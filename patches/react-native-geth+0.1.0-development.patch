patch-package
--- a/node_modules/react-native-geth/android/build.gradle
+++ b/node_modules/react-native-geth/android/build.gradle
@@ -27,9 +27,13 @@ android {
 
 repositories {
     mavenCentral()
+
+    flatDir {
+      dirs rootProject.ext.get("celoClientDirectory")
+    }
 }
 
 dependencies {
     compile "com.facebook.react:react-native:+"  // From node_modules
-    compile 'org.ethereum:geth:1.8.3'
+    compile(name: "geth", ext:"aar")
 }
--- a/node_modules/react-native-geth/android/src/main/java/com/reactnativegeth/RNGethModule.java
+++ b/node_modules/react-native-geth/android/src/main/java/com/reactnativegeth/RNGethModule.java
@@ -31,6 +31,8 @@ import org.ethereum.geth.Node;
 import org.ethereum.geth.NodeConfig;
 import org.ethereum.geth.SyncProgress;
 import org.ethereum.geth.Transaction;
+import org.ethereum.geth.NodeInfo;
+import org.ethereum.geth.Strings;
 
 public class RNGethModule extends ReactContextBaseJavaModule {
 
@@ -391,7 +393,7 @@ public class RNGethModule extends ReactContextBaseJavaModule {
             if (acc != null) {
                 byte[] key = GethHolder.getKeyStore()
                     .exportKey(acc, creationPassphrase, exportPassphrase);
-                promise.resolve(key);
+                promise.resolve(new String(key, "UTF-8"));
             } else {
                 promise.reject(EXPORT_KEY_ERROR, "call method setAccount('accountId') before");
             }
@@ -446,50 +448,6 @@ public class RNGethModule extends ReactContextBaseJavaModule {
         }
     }
 
-    /**
-     * Create and send transaction.
-     *
-     * @param passphrase Passphrase
-     * @param nonce      Account nonce (use -1 to use last known nonce)
-     * @param toAddress  Address destination
-     * @param amount     Amount
-     * @param gasLimit   Gas limit
-     * @param gasPrice   Gas price
-     * @param data
-     * @param promise    Promise
-     * @return Return String transaction
-     */
-    @ReactMethod
-    public void createAndSendTransaction(String passphrase, double nonce, String toAddress,
-                                         String amount, double gasLimit, double gasPrice,
-                                         String data, Promise promise) {
-        try {
-            Account acc = GethHolder.getAccount();
-            Address fromAddress = acc.getAddress();
-            BigInt chain = new BigInt(GethHolder.getNodeConfig().getEthereumNetworkID());
-            Context ctx = new Context();
-            BigInt bigIntAmount = new BigInt(0);
-            bigIntAmount.setString(amount, 10);
-            if (nonce == -1) nonce = GethHolder.getNode().getEthereumClient()
-                .getPendingNonceAt(ctx, fromAddress);
-            Transaction tx = new Transaction(
-                    (long) nonce,
-                    new Address(toAddress),
-                    bigIntAmount,
-                    (long) gasLimit,
-                    new BigInt((long) gasPrice),
-                    data.getBytes("UTF8"));
-            // Sign a transaction with a single authorization
-            Transaction signed = GethHolder.getKeyStore()
-                .signTxPassphrase(acc, passphrase, tx, chain);
-            // Send it out to the network.
-            GethHolder.getNode().getEthereumClient().sendTransaction(ctx, signed);
-            promise.resolve(tx.toString());
-        } catch (Exception e) {
-            promise.reject(NEW_TRANSACTION_ERROR, e);
-        }
-    }
-
     /**
      * Retrieves the currently suggested gas price to allow a timely execution of a transaction.
      *
@@ -526,6 +484,21 @@ public class RNGethModule extends ReactContextBaseJavaModule {
             promise.reject(GET_NONCE_ERROR, e);
         }
     }
+
+    @ReactMethod
+    public void getNodeInfo(Promise promise) {
+        WritableMap result = new WritableNativeMap();
+        NodeInfo nodeInfo = GethHolder.getNode().getNodeInfo();
+        result.putString("enode", nodeInfo.getEnode());
+        result.putString("id", nodeInfo.getID());
+        result.putString("ip", nodeInfo.getIP());
+        result.putString("listenerAddress", nodeInfo.getListenerAddress());
+        result.putString("name", nodeInfo.getName());
+        result.putString("protocols", nodeInfo.getProtocols().toString());
+        result.putDouble("discoveryPort", nodeInfo.getDiscoveryPort());
+        result.putDouble("listenerPort", nodeInfo.getListenerPort());
+        promise.resolve(result);
+    }
 }
 
 /*
--- a/node_modules/react-native-geth/src/geth.js
+++ b/node_modules/react-native-geth/src/geth.js
@@ -1,13 +1,7 @@
 // @flow
 
 import { Platform, NativeModules } from 'react-native'
-import type {
-  NodeConfig,
-  Account,
-  ListAccounts,
-  SyncProgress,
-  GethNativeModule
-} from './types'
+import type { NodeConfig, Account, ListAccounts, SyncProgress, GethNativeModule } from './types'
 
 /**
  * Geth object
@@ -22,174 +16,187 @@ import type {
 class Geth {
   config: ?NodeConfig
   geth: GethNativeModule = Platform.select({
-      ios: NativeModules.ReactNativeGeth,
-      android: NativeModules.Geth
-  });
+    ios: NativeModules.ReactNativeGeth,
+    android: NativeModules.Geth,
+  })
 
   constructor(config: NodeConfig): void {
-    this.config = (config) ? config : {}
+    this.config = config ? config : {}
     this.geth.nodeConfig(this.config)
   }
 
   /**
- * Start creates a live P2P node and starts running it.
- * @return {Boolean} return true if started.
- */
+   * Start creates a live P2P node and starts running it.
+   * @return {Boolean} return true if started.
+   */
   async start(): Promise<boolean> {
     return await this.geth.startNode()
   }
 
   /**
-  * Terminates a running node along with all it's services.
-  * @return {Boolean} return true if stopped.
-  */
+   * Terminates a running node along with all it's services.
+   * @return {Boolean} return true if stopped.
+   */
   async stop(): Promise<boolean> {
     return await this.geth.stopNode()
   }
 
   /**
-  * Create a new account with the specified encryption passphrase.
-  * @param {String} passphrase Passphrase
-  * @return {Object} return new account object
-  */
+   * Create a new account with the specified encryption passphrase.
+   * @param {String} passphrase Passphrase
+   * @return {Object} return new account object
+   */
   async newAccount(passphrase: string): Promise<Account> {
     return await this.geth.newAccount(passphrase)
   }
 
   /**
-  * Sets the default account at the given index in the listAccounts.
-  * @param {Number} accID   index in the listAccounts
-  * @return {Boolean} return true if sets.
-  */
+   * Sets the default account at the given index in the listAccounts.
+   * @param {Number} accID   index in the listAccounts
+   * @return {Boolean} return true if sets.
+   */
   async setAccount(accID: number): Promise<boolean> {
     return await this.geth.setAccount(accID)
   }
 
   /**
-  * Retrieves the address associated with the current account.
-  * @return {String} return address..
-  */
+   * Retrieves the address associated with the current account.
+   * @return {String} return address..
+   */
   async getAddress(): Promise<string> {
     return await this.geth.getAddress()
   }
 
   /**
-  * Returns the wei balance of the current account.
-  * @return {String} return balance.
-  */
+   * Returns the wei balance of the current account.
+   * @return {String} return balance.
+   */
   async balanceAccount(): Promise<string> {
     return await this.geth.balanceAccount()
   }
 
   /**
-  * Returns the wei balance of the specified account.
-  * @param {String} address Address of account being looked up.
-  * @return {String} Return balance.
-  */
+   * Returns the wei balance of the specified account.
+   * @param {String} address Address of account being looked up.
+   * @return {String} Return balance.
+   */
   async balanceAt(address: string): Promise<string> {
     return await this.geth.balanceAt(address)
   }
 
   /**
-  * Retrieves the current progress of the sync algorithm.
-  * @return {Object} Return object sync progress or null
-  */
+   * Retrieves the current progress of the sync algorithm.
+   * @return {Object} Return object sync progress or null
+   */
   async syncProgress(): Promise<SyncProgress> {
     return await this.geth.syncProgress()
   }
 
   /**
-  * Subscribes to notifications about the current blockchain head
-  * @return {Boolean} Return true if subscribed
-  */
+   * Subscribes to notifications about the current blockchain head
+   * @return {Boolean} Return true if subscribed
+   */
   async subscribeNewHead(): Promise<boolean> {
     return await this.geth.subscribeNewHead()
   }
 
   /**
-  * Changes the passphrase of current account.
-  * @param {String} oldPassphrase Passphrase
-  * @param {String} newPassphrase New passphrase
-  * @return {Boolean} Return true if passphrase changed
-  */
-  async updateAccount(oldPassphrase: string,
-    newPassphrase: string): Promise<boolean> {
+   * Changes the passphrase of current account.
+   * @param {String} oldPassphrase Passphrase
+   * @param {String} newPassphrase New passphrase
+   * @return {Boolean} Return true if passphrase changed
+   */
+  async updateAccount(oldPassphrase: string, newPassphrase: string): Promise<boolean> {
     return await this.geth.updateAccount(oldPassphrase, newPassphrase)
   }
 
   /**
-  * Deletes the key matched by current account if the passphrase is correct.
-  * @return {Boolean} Return true if account deleted
-  */
-  async deleteAccount(
-    passphrase: string): Promise<boolean> {
+   * Deletes the key matched by current account if the passphrase is correct.
+   * @return {Boolean} Return true if account deleted
+   */
+  async deleteAccount(passphrase: string): Promise<boolean> {
     return await this.geth.deleteAccount(passphrase)
   }
 
   /**
-  * Exports as a JSON key of current account, encrypted with new passphrase.
-  * @param {String} creationPassphrase Old Passphrase
-  * @param {String} exportPassphrase New passphrase
-  * @return {String} Return key
-  */
-  async exportKey(creationPassphrase: string,
-    exportPassphrase: string): Promise<string> {
+   * Exports as a JSON key of current account, encrypted with new passphrase.
+   * @param {String} creationPassphrase Old Passphrase
+   * @param {String} exportPassphrase New passphrase
+   * @return {String} Return key
+   */
+  async exportKey(creationPassphrase: string, exportPassphrase: string): Promise<string> {
     return await this.geth.exportKey(creationPassphrase, exportPassphrase)
   }
 
   /**
-  * Stores the given encrypted JSON key into the key directory.
-  * @param {String} key Passphrase
-  * @param {String} oldPassphrase Old passphrase
-  * @param {String} newPassphrase New passphrase
-  * @return {Object} Return account object
-  */
-  async importKey(key: string, oldPassphrase: string,
-    newPassphrase: string): Promise<Account> {
+   * Stores the given encrypted JSON key into the key directory.
+   * @param {String} key Passphrase
+   * @param {String} oldPassphrase Old passphrase
+   * @param {String} newPassphrase New passphrase
+   * @return {Object} Return account object
+   */
+  async importKey(key: string, oldPassphrase: string, newPassphrase: string): Promise<Account> {
     return await this.geth.importKey(key, oldPassphrase, newPassphrase)
   }
 
   /**
-  * Returns all key files present in the directory.
-  * @return {Array} Return array of accounts objects
-  */
+   * Returns all key files present in the directory.
+   * @return {Array} Return array of accounts objects
+   */
   async listAccounts(): Promise<ListAccounts> {
     return await this.geth.listAccounts()
   }
 
   /**
-  * Create and send transaction.
-  * @param {String} passphrase Passphrase
-  * @param {Number} nonce      Account nonce (use -1 to use last known nonce)
-  * @param {String} toAddress  Address destination
-  * @param {Number} amount     Amount
-  * @param {Number} gasLimit   Gas limit
-  * @param {Number} gasPrice   Gas price
-  * @param {Number} data
-  * @return {String} Return transaction
-  */
-  async createAndSendTransaction(passphrase: string, nonce: number,
-    toAddress: string, amount: number, gasLimit: number, gasPrice: number,
-    data: string): Promise<string> {
-    return await this.geth.createAndSendTransaction(passphrase, nonce,
-      toAddress, amount, gasLimit, gasPrice, data)
-  }
-
-  /**
-  * Retrieves the currently suggested gas price to allow a timely execution of a transaction.
-  * @return {Double} Return suggested gas price
-  */
+   * Create and send transaction.
+   * @param {String} passphrase Passphrase
+   * @param {Number} nonce      Account nonce (use -1 to use last known nonce)
+   * @param {String} toAddress  Address destination
+   * @param {Number} amount     Amount
+   * @param {Number} gasLimit   Gas limit
+   * @param {Number} gasPrice   Gas price
+   * @param {Number} data
+   * @return {String} Return transaction
+   */
+  async createAndSendTransaction(
+    passphrase: string,
+    nonce: number,
+    toAddress: string,
+    amount: number,
+    gasLimit: number,
+    gasPrice: number,
+    data: string
+  ): Promise<string> {
+    return await this.geth.createAndSendTransaction(
+      passphrase,
+      nonce,
+      toAddress,
+      amount,
+      gasLimit,
+      gasPrice,
+      data
+    )
+  }
+
+  /**
+   * Retrieves the currently suggested gas price to allow a timely execution of a transaction.
+   * @return {Double} Return suggested gas price
+   */
   async suggestGasPrice(): Promise<number> {
     return await this.geth.suggestGasPrice()
   }
 
   /**
-  * Retrieves this account's pending nonce. This is the nonce you should use when creating a transaction.
-  * @return {Double} Return nonce
-  */
+   * Retrieves this account's pending nonce. This is the nonce you should use when creating a transaction.
+   * @return {Double} Return nonce
+   */
   async getPendingNonce(): Promise<number> {
     return await this.geth.getPendingNonce()
   }
+
+  async getNodeInfo(): Promise<Object> {
+    return await this.geth.getNodeInfo()
+  }
 }
 
 export default Geth
