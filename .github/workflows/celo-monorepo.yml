name: Build & Integration Tests
run-name: 'Build & Integration Tests: ${{ github.head_ref || github.ref_name }}'

# Dockefile for the self-hosted runner:
# https://github.com/celo-org/infrastructure/blob/master/terraform/root-modules/gcp/integration-tests-gke/files/github-arc/Dockerfile-monorepo

on:
  push:
    branches:
      - master
      - 'release/**'
  pull_request:
    branches:
      - master
      - 'release/**'

concurrency:
  group: celo-monorepo-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --login -eo pipefail {0}

env:
  # Increment these to force cache rebuilding
  NODE_MODULE_CACHE_VERSION: 8
  NODE_OPTIONS: '--max-old-space-size=4096'
  TERM: dumb
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"'
  # Git Tag for contract release to use
  RELEASE_TAG: core-contracts.v13
  # CELO_BLOCKCHAIN_BRANCH_TO_TEST: master
  CELO_BLOCKCHAIN_BRANCH_TO_TEST: release/1.8.x

# EXAMPLE on debug ssh step
#  - name: Setup tmate session
#  uses: mxschmitt/action-tmate@v3
#  timeout-minutes: 20
#  if: contains(matrix.command, 'common/') && false
#  with:
#    limit-access-to-actor: true

permissions:
  contents: read

jobs:
  install-dependencies:
    name: Install dependencies
    outputs:
      # Propagate more outputs if you need https://github.com/step-security/changed-files#outputs
      # Adding a initial comma so ',<path>' matches also for the first file
      all_modified_files: ',${{ steps.changed-files.outputs.all_modified_files }}'
      artifacts_to_cache: ${{ steps.get_artifacts_to_cache.outputs.artifacts_to_cache }}
    runs-on: ['self-hosted', 'org', 'ubuntu22-node18']
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Restore node cache
        uses: actions/cache@v4
        id: cache_node
        with:
          # We need to cache all the artifacts generated by yarn install+build
          # Update this list also in .github/actions/sync-workspace/action.yml with exactly the same list
          path: |
            node_modules
            packages/**/node_modules
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-
      - name: Double check node version
        run: |
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
      - name: Install yarn dependencies
        run: git config --global url."https://".insteadOf ssh:// && yarn generate-lock-entry && yarn install --frozen-lockfile --network-timeout 1000000
        if: steps.cache_node.outputs.cache-hit != 'true'
      - name: Run yarn postinstall if cache hitted
        run: yarn run postinstall
        if: steps.cache_node.outputs.cache-hit == 'true'
      - name: Build packages
        run: yarn build --include-dependencies
      - name: Check licenses
        if: steps.cache_node.outputs.cache-hit != 'true'
        run: |
          yarn check-licenses
      # Get a list of submodules to ignore in the changed files check
      - name: Get submodules to ignore in changed files check
        id: get_submodules_to_ignore
        run: |
          # Get all the submodules paths
          submodules=$(git config --file .gitmodules --name-only --get-regexp path)
          # Remove the "submodule." prefix and ".path" suffix
          submodules=$(echo $submodules | sed 's/^submodule.//g')
          submodules=$(echo $submodules | sed 's/.path$//g')
          # Add a ! in front of each path to ignore it latter in the changed files check
          submodules=$(echo $submodules | sed 's/^/!/g')
          echo "submodules<<EOF" >> $GITHUB_OUTPUT
          echo "$submodules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      # Get workdir local changes and fail if there are any change
      - name: Verify Changed files
        id: verify-changed-files
        uses: tj-actions/verify-changed-files@6ed7632824d235029086612d4330d659005af687
        with:
          fail-if-changed: 'true'
          fail-message: 'Files changed during build. Please build locally and commit the changes.'
          files: |
            **/*
            ${{ steps.get_submodules_to_ignore.outputs.submodules }}
      - run: |
          echo "${{ steps.verify-changed-files.outputs.changed_files }}"
      - name: Get the artifacts to cache
        id: get_artifacts_to_cache
        run: |
          artifacts_to_cache="$(git ls-files --others --ignored --exclude-standard | grep -v node_modules | grep -v .js.map)"
          echo "artifacts_to_cache<<EOF" >> $GITHUB_OUTPUT
          echo "$artifacts_to_cache" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      # We use cache to share the build artifacts between jobs (gh artifacts are too slow...)
      # For more context check https://github.com/actions/upload-artifact/issues/199
      - name: Restore build artifacts cache
        uses: actions/cache@v4
        id: cache_build_artifacts
        with:
          # We need to cache all the artifacts generated by yarn install+build
          # Update this list also in .github/actions/sync-workspace/action.yml with exactly the same list
          path: |
            ${{ steps.get_artifacts_to_cache.outputs.artifacts_to_cache }}
          key: code-${{ github.sha }}
          restore-keys: |
            code-${{ github.sha }}
      - name: Detect files changed in PR (or commit), and expose as output
        id: changed-files
        uses: step-security/changed-files@3dbe17c78367e7d60f00d78ae6781a35be47b4a1
        with:
          # Using comma as separator to be able to easily match full paths (using ,<path>)
          separator: ','
          # Checking if changed in the last 100 commits in PRs
          fetch_depth: '150'
      - run: echo ",${{ steps.changed-files.outputs.all_modified_files }}"

  lint-checks:
    name: Lint code
    runs-on: ['self-hosted', 'org', 'ubuntu22-node18']
    timeout-minutes: 30
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          artifacts_to_cache: ${{ needs.install-dependencies.outputs.artifacts_to_cache }}
      - run: yarn run prettify:diff
      - run: yarn run lint

  protocol-test-release:
    name: Protocol Test Release
    runs-on: ['self-hosted', 'org', 'ubuntu22-node18']
    timeout-minutes: 500
    needs: [install-dependencies, lint-checks]
    if: |
      github.base_ref == 'master' || contains(github.base_ref, 'release') || contains(github.base_ref, 'production') ||
      contains(needs.install-dependencies.outputs.all_modified_files, 'packages/protocol') ||
      contains(needs.install-dependencies.outputs.all_modified_files, ',package.json') ||
      contains(needs.install-dependencies.outputs.all_modified_files, ',yarn.lock') ||
      false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          artifacts_to_cache: ${{ needs.install-dependencies.outputs.artifacts_to_cache }}
        
      # this is using ganache
      # TODO open doc for this
      # - name: Download protocol devchain artifact
      #   uses: dawidd6/action-download-artifact@20319c5641d495c8a52e688b7dc5fada6c3a9fbc
      #   with:
      #     workflow: protocol-devchain.yml
      #     name: devchain-${{ env.RELEASE_TAG }}
      #     path: packages/protocol/.tmp/devchain
      # - name: Copy DevChain and Build generated from released tag
      #   run: |
      #     BUILD_AND_DEVCHAIN_DIR=$(echo build/$(echo $RELEASE_TAG | sed -e 's/\//_/g'))
      #     (cp -r packages/protocol/.tmp/devchain packages/protocol/$BUILD_AND_DEVCHAIN_DIR)
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@8f1998e9878d786675189ef566a2e4bf24869773
        with:
          version: 'v1.0.0'

      - name: Install forge dependencies
        working-directory: packages/protocol
        run: forge install
      - name: Test against current release
        run: |
          echo "Comparing against $RELEASE_TAG"
          BUILD_AND_DEVCHAIN_DIR=$(echo build/$(echo $RELEASE_TAG | sed -e 's/\//_/g'))
          # this is the command that should work with anvil
          yarn --cwd packages/protocol ci:test-make-release -b $RELEASE_TAG -d $BUILD_AND_DEVCHAIN_DIR

  protocol-test-matrix:
    # Keeping name short because GitHub UI does not handle long names well
    name: ${{ matrix.name }}
    runs-on: ['self-hosted', 'org', 'ubuntu22-node18']
    timeout-minutes: 60
    needs: [install-dependencies, lint-checks]
    if: |
      github.base_ref == 'master' || contains(github.base_ref, 'release') || contains(github.base_ref, 'staging') || contains(github.base_ref, 'production') ||
      contains(needs.install-dependencies.outputs.all_modified_files, 'packages/protocol') ||
      contains(needs.install-dependencies.outputs.all_modified_files, 'packages/typescript') ||
      contains(needs.install-dependencies.outputs.all_modified_files, ',package.json') ||
      contains(needs.install-dependencies.outputs.all_modified_files, ',yarn.lock') ||
      false
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Protocol Release Snapshots
            command: |
              yarn --cwd packages/protocol test:release-snapshots
              if [[ $(git status packages/protocol/releaseData/versionReports --porcelain) ]]; then
                git --no-pager diff packages/protocol/releaseData/versionReports
                echo "There are git differences after generating release version report snapshots"
                echo "If these changes are intended, update the 'releaseData/versionReports' accordingly"
                exit 1
              fi
          # - name: Protocol Common tests
          #   command: |
          #     yarn --cwd packages/protocol test:truffle common/
          # - name: Protocol Compatibility
          #   command: |
          #     yarn --cwd packages/protocol test:truffle compatibility/
          # - name: Protocol scripts test
          #   command: |
          #     yarn --cwd packages/protocol test:scripts
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          rebuild-package: 'true'
          artifacts_to_cache: ${{ needs.install-dependencies.outputs.artifacts_to_cache }}
      - name: Execute matrix command for test
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e
        with:
          timeout_minutes: 40
          max_attempts: 3
          command: |
            ${{ matrix.command }}

  # NOTE: This has not been fully tested as we don't have a license for certora
  certora-test:
    name: Certora test ${{ matrix.name }}
    runs-on: ['self-hosted', 'org', '8-cpu']
    container:
      image: us-west1-docker.pkg.dev/devopsre/actions-runner-controller/celo-monorepo:34b1c5e90f9613964160cdf6bc292b410362ec6d
    timeout-minutes: 30
    needs: [install-dependencies, lint-checks]
    # Disable as certora license is not active
    if: |
      false && (
        github.base_ref == 'master' || contains(github.base_ref, 'release') || contains(github.base_ref, 'production') ||
        contains(needs.install-dependencies.outputs.all_modified_files, 'packages/protocol') ||
        contains(needs.install-dependencies.outputs.all_modified_files, ',package.json') ||
        contains(needs.install-dependencies.outputs.all_modified_files, ',yarn.lock')
      )
    env:
      CERTORAKEY: NOT_ACTIVE
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Locked Gold
            command: |
              cd packages/protocol
              ./specs/scripts/lockedgold.sh
          - name: Accounts
            command: |
              cd packages/protocol
              ./specs/scripts/accounts.sh
          - name: Accounts
            command: |
              cd packages/protocol
              ./specs/scripts/accountsPrivileged.sh
          - name: Accounts
            command: |
              cd packages/protocol
              ./specs/scripts/applyHarness.sh
              ./specs/scripts/governance.sh
          - name: Accounts
            command: |
              cd packages/protocol
              ./specs/scripts/reserve.sh
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          artifacts_to_cache: ${{ needs.install-dependencies.outputs.artifacts_to_cache }}
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Certora dependencies
        run: |
          echo "export PATH=$PATH:~/.local/bin" >> ~/.bashrc
          sudo apt-get update
          sudo apt-get install -y software-properties-common python3-pip
          pip3 install certora-cli
          wget https://github.com/ethereum/solidity/releases/download/v0.5.13/solc-static-linux
          chmod +x solc-static-linux
          sudo mv solc-static-linux /usr/bin/solc
      - name: Build and run command
        run: |
          ${{ matrix.command }}
