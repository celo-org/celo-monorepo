name: celo-monorepo
run-name: celo-monorepo tests

on:
  push:
    branches:
      - jcortejoso/circleci-github-actions
  # pull_request:
  #   branches:
  #     - master

concurrency:
  group: circle-ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    # working-directory: ~/app
    shell: bash --login -eo pipefail {0}

env:
  # Increment these to force cache rebuilding
  NODE_MODULE_CACHE_VERSION: 2
  NODE_OPTIONS: '--max-old-space-size=4096'
  TERM: dumb
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"'
  # Git Tag for contract release to use
  RELEASE_TAG: core-contracts.v9
  CELO_BLOCKCHAIN_BRANCH_TO_TEST: master

jobs:
  install-dependencies:
    name: Install dependencies
    outputs:
      package-json-checksum: ${{ steps.node-checksums.outputs.PACKAGE_JSON_CHECKSUM }}
    # runs-on: ubuntu-latest
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    steps:
      - name: Restore .git cache
        uses: actions/cache@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
          restore-keys: |
            git-
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Verify setup for incremental testing
        run: |
          set -euo pipefail
          set -v
          # To get the "master" branch mapping
          git checkout master
          git checkout ${GITHUB_REF}
          # Verify that following commands work, they are later called in the incremental testing script
          # There output does not matter here, the fact that they finish successfully does.
          git rev-parse --abbrev-ref HEAD
          git fetch --all --tags
      - name: Calculate node cache keys
        id: node-checksums
        run: |
          find . -maxdepth 5 -type f -name 'package.json' -not -path "*node_modules*" -print0 | sort -z | xargs -0 cat > $RUNNER_TEMP/package.checksum
          find ./patches -type f -name '*.patch' -print0 | sort -z | xargs -0 cat > $RUNNER_TEMP/patches.checksum
          echo "PACKAGE_JSON_CHECKSUM=${{ hashFiles('$RUNNER_TEMP/*.checksum') }}" >> "$GITHUB_OUTPUT"
      - name: Restore node cache
        uses: actions/cache@v3
        id: cache_node
        with:
          # We need to cache all the artifacts generated by yarn install+build
          # Update this list also in .github/actions/sync-workspace/action.yml with exactly the same list
          path: |
            node_modules
            packages/**/node_modules
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}-${{ steps.node-checksums.outputs.PACKAGE_JSON_CHECKSUM }}
          restore-keys: |
            node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-
      # We use cache to share the build artifacts between jobs (gh artifacts are too slow...)
      - name: Restore build artifacts cache
        uses: actions/cache@v3
        id: cache_build_artifacts
        with:
          # We need to cache all the artifacts generated by yarn install+build
          # Update this list also in .github/actions/sync-workspace/action.yml with exactly the same list
          path: |
            packages/**/lib
            packages/**/dist
            packages/**/build
            packages/protocol/*.js
            packages/protocol/**/*.js
            packages/sdk/contractkit/src/generated
          key: code-${{ github.sha }}
          restore-keys: |
            code-${{ github.sha }}
      - name: Install yarn dependencies
        run: yarn install
        if: steps.cache_node.outputs.cache-hit != 'true'
      - name: Run yarn postinstall if cache hitted 
        run: yarn run postinstall
        if: steps.cache_node.outputs.cache-hit == 'true'
      - name: Fail if generated dependency graph doesn't match committed
        run: ./scripts/ci_check_dependency_graph_changed.sh
      - name: Fail if any file changed on git
        run: |
          # This fails if there is any change
          if ! git diff-index HEAD --; then
            echo "Git changes detected while building. If this is unexpected, bump NODE_MODULE_CACHE_VERSION in .github/workflows/circleci.yml"
            exit 1
          fi
      - name: Build packages
        run: yarn build --ignore docs --include-dependencies
      - name: Check licenses
        run: |
          if [ ! -e ~/.tmp/yarn_deps_have_changed ]; then
            # Internally `yarn check-licenses` downloads dependencies into its cache again even if node_modules are up-to-date
            # which happens when we've restored our cached node_modules.
            # Making `yarn check-licenses` take ~45secs instead of ~3secs (depending on network conditions and build machine)
            # So here we skip checking when it's unnecessary
            echo "Skipping checking licenses, dependencies haven't changed"
            exit 0
          fi
          yarn check-licenses
  lint-checks:
    name: Lint code
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: install-dependencies
    steps:
      # Restore .git cache as we need to checkout the local composite action to run it:
      # https://github.com/orgs/community/discussions/11771
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - run: yarn run prettify:diff
      - run: yarn run lint
  general_test:
    name: General jest test
    runs-on: ["self-hosted", "monorepo"]
    needs: install-dependencies
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Run Jest Tests
        run: |
          mkdir -p test-results/jest
          yarn run lerna \
            --ignore @celo/contractkit \
            --ignore @celo/protocol \
            --ignore @celo/celotool \
            --ignore @celo/celocli \
            --ignore @celo/env-tests \
            --ignore @celo/identity \
            --ignore @celo/transactions-uri \
            --ignore '@celo/wallet-*' \
            run test
      - name: Upload Jest Test Results
        uses: actions/upload-artifact@v3
        with:
          name: Jest Test Results
          path: test-results/jest
  wallet-test:
    name: Wallet test
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: install-dependencies
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Run Wallet tests
        run: |
          yarn run lerna --scope '@celo/wallet-*' run test
  pre-protocol-test-release:
    name: Protocol Tests Prepare
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies, lint-checks]
    outputs:
      protocol-test-must-run: ${{ steps.protocol-test-must-run.outputs.PROTOCOL_TEST_MUST_RUN }}
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          fetch_depth: "100"
      - name: Export protocol test must run
        id: protocol-test-must-run
        # TODO(jcortejoso): Remove true
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/protocol') || true
        run: |
          # TODO(jcortejoso): This script slightly depends on CircleCI
          # Ideally refactor this to depend just on GitHub Actions
          # ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
          echo "Protocol tests runs always"
          echo "PROTOCOL_TEST_MUST_RUN=true" >> "$GITHUB_OUTPUT"
      - name: Cache protocol devchain
        uses: actions/cache@v3
        id: cache_protocol
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/protocol') || true
        with:
          path: packages/protocol/.tmp/released_chain
          key: protocol-${{ github.sha }}
          restore-keys: |
            protocol-${{ github.sha }}
      - name: Opcode tests
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/protocol') || true
        run: |
          yarn --cwd packages/protocol check-opcodes
      - name: Generate devchain of previous release
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/protocol') || true
        run: |
          echo "Comparing against $RELEASE_TAG"
          # Github has phased out the git protocol so we ensure that we use
          # https for all git operations that yarn may perform.
          git config --global url."https://github.com".insteadOf git://github.com
          yarn --cwd packages/protocol test:generate-old-devchain-and-build -b $RELEASE_TAG -d .tmp/released_chain -l /dev/stdout -g scripts/truffle/releaseGoldExampleConfigs.json
  protocol-test-release:
    name: Protocol Test Release
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies, lint-checks, pre-protocol-test-release]
    if: |
      needs.pre-protocol-test-release.outputs.protocol-test-must-run == 'true'
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/protocol-sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Copy DevChain and Build generated from released tag
        run: |
          BUILD_AND_DEVCHAIN_DIR=$(echo build/$(echo $RELEASE_TAG | sed -e 's/\//_/g'))
          (cp -r packages/protocol/.tmp/released_chain packages/protocol/$BUILD_AND_DEVCHAIN_DIR)
      - name: Test against current release
        run: |
          echo "Comparing against $RELEASE_TAG"
          BUILD_AND_DEVCHAIN_DIR=$(echo build/$(echo $RELEASE_TAG | sed -e 's/\//_/g'))
          yarn --cwd packages/protocol test:devchain-release -b $RELEASE_TAG -d $BUILD_AND_DEVCHAIN_DIR -l /dev/stdout
  protocol-test-matrix:
    name: Protocol Test Matrix - ${{ matrix.name }}
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies, lint-checks, pre-protocol-test-release]
    if: |
      needs.pre-protocol-test-release.outputs.protocol-test-must-run == 'true'
    strategy:
      matrix:
        include:
          - name: Protocol Test Reslease Snapshots
            command: |
              yarn --cwd packages/protocol test:release-snapshots
              if [[ $(git status packages/protocol/releaseData/versionReports --porcelain) ]]; then
                git --no-pager diff packages/protocol/releaseData/versionReports
                echo "There are git differences after generating release version report snapshots"
                echo "If these changes are intended, update the 'releaseData/versionReports' accordingly"
                exit 1
              fi
          - name: Protocol Test Unit tests
            commnd: |
              yarn --cwd packages/protocol test common/
          - name: Protocol Test Compatibility
            commnd: |
              yarn --cwd packages/protocol test compatibility/
          - name: Protocol Test Governance Network
            commnd: |
              yarn --cwd packages/protocol test governance/network/
          - name: Protocol Test Governance Validators
            commnd: |
              yarn --cwd packages/protocol test governance/validators/
          - name: Protocol Test Governance Voting
            commnd: |
              yarn --cwd packages/protocol test governance/voting/
          - name: Protocol Test Governance Identity
            commnd: |
              yarn --cwd packages/protocol test identity/
          - name: Protocol Test Stability
            commnd: |
              yarn --cwd packages/protocol test stability/
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/protocol-sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Execute matrix command for test
        run: |
          ${{ matrix.command }}

  protocol-test-with-code-coverage:
    name: Protocol Test with code coverage
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies, lint-checks, pre-protocol-test-release]
    if: |
      needs.pre-protocol-test-release.outputs.protocol-test-must-run == 'true'
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/protocol-sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Run unit tests with code coverage
        run: |
          yarn --cwd packages/protocol test:coverage
      - name: Upload Coverage Test Results
        uses: actions/upload-artifact@v3
        with:
          name: Protocol Test Coverage
          path: packages/protocol/coverage
  contractkit-tests:
    name: ContractKit Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          fetch_depth: "100"
      - name: Generate DevChain
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/contractkit') || true
        run: |
          cd packages/sdk/contractkit
          yarn test:reset
      - name: Run tests
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/contractkit') || true
        run: |
          yarn --cwd=packages/sdk/contractkit test
  identity-tests:
    name: Identity Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          fetch_depth: "100"
      - name: Generate DevChain
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/identity') || true
        run: |
          cd packages/sdk/identity
          yarn test:reset
      - name: Run tests
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/identity') || true
        run: |
          yarn --cwd=packages/sdk/identity test
  transactions-uri-tests:
    name: Transaction URI Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          fetch_depth: "100"
      - name: Generate DevChain
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/sdk/transactions-uri') || true
        run: |
          cd packages/sdk/identity
          yarn test:reset
      - name: Run tests
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/sdk/transactions-uri') || true
        run: |
          yarn --cwd=packages/sdk/identity test
  cli-tests:
    name: CeloCli Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          fetch_depth: "100"
      - name: Generate DevChain
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/cli') || true
        run: |
          cd packages/cli
          yarn test:reset
      - name: Run tests
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/cli') || true
        run: |
          yarn --cwd=packages/cli test
      - name: Fail if someone forgot to commit CLI docs
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/cli') || true
        run: |
          yarn --cwd=packages/cli docs
          if [[ $(git status packages/docs/command-line-interface --porcelain) ]]; then
            git --no-pager diff packages/docs/command-line-interface
            echo "There are git differences after generating CLI docs"
            exit 1
          fi
      - name: Verify that a new account can be created
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/cli') || true
        run: |
          yarn --cwd=packages/cli run celocli account:new
      # TODO(jcortejoso): Review later
      - name: Install and test the npm package
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/cli') || true
        run: |
          cd packages/cli
          yarn pack
          cd $RUNNER_TEMP
          npm install $RUNNER_WORKSPACE/celo-monorepo/packages/cli/celo-cli-*.tgz
          npx celocli account:new
  typescript-tests:
    name: Typescript package Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          fetch_depth: "100"
      - name: Install and test the npm package
        if: contains(steps.changed-files.outputs.all_files_changed, 'packages/typescript') || true
        run: |
          set -euo pipefail
          cd packages/typescript
          yarn pack
          cd $RUNNER_TEMP
          npm install $RUNNER_WORKSPACE/celo-monorepo/packages/typescript/*.tgz
  base-test:
    name: SDK Base package Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 20
        if: false
        with:
          limit-access-to-actor: true
      - name: Install and test the npm package
        run: |
          set -euo pipefail
          cd packages/sdk/base
          yarn pack
          cd $RUNNER_TEMP
          npm install $RUNNER_WORKSPACE/celo-monorepo/packages/sdk/base/*.tgz
  utils-test:
    name: SDK Utils package Tests
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies]
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Install and test the npm package
        run: |
          set -euo pipefail
          cd packages/sdk/base
          yarn pack
          cd ../utils
          yarn pack
          cd $RUNNER_TEMP
          npm install $RUNNER_WORKSPACE/celo-monorepo/packages/sdk/base/*.tgz
          npm install $RUNNER_WORKSPACE/celo-monorepo/packages/sdk/utils/*.tgz

  # end-to-end-geth-transfer-test:
  #   name: Celo-Blockchain E2E Transfer test
  #   runs-on: ["self-hosted", "monorepo"]
  #   needs: [install-dependencies, lint-checks, contractkit-tests]
  #   steps:
  #     - uses: actions/cache/restore@v3
  #       id: cache_git
  #       with:
  #         path: .git
  #         key: git-${{ github.ref }}
  #     - uses: actions/checkout@v3
  #     - name: Sync workspace
  #       uses: ./.github/actions/sync-workspace
  #       with:
  #         package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
  #     - name: Run tests
  #       run: |
  #         set -e
  #         cd packages/celotool
  #         ./ci_test_transfers.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
  end-to-end-geth-matrix:
    name: Celo Blockchain e2e Test Matrix - ${{ matrix.name }}
    runs-on: ["self-hosted", "monorepo"]
    timeout-minutes: 30
    needs: [install-dependencies, lint-checks, pre-protocol-test-release]
    if: |
      needs.pre-protocol-test-release.outputs.protocol-test-must-run == 'true'
    strategy:
      matrix:
        include:
          - name: Transfer test
            command: |
              set -e
              cd packages/celotool
              ./ci_test_transfers.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: Blockchain Parameters test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_blockchain_parameters.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: Slashing test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_slashing.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: Governance test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_governance.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: Replica test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_replicas.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: Sync test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_sync.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: Validator order test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_validator_order.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
          - name: CIP35 eth compatibility test
            commnd: |
              set -e
              cd packages/celotool
              ./ci_test_cip35.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - name: Sync workspace
        uses: ./.github/actions/protocol-sync-workspace
        with:
          package-json-checksum: ${{ needs.install-dependencies.outputs.package-json-checksum }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 20
        if: contains(matrix.command, 'ci_test_transfers.sh')
        with:
          limit-access-to-actor: true
      - name: Execute matrix command for test
        run: |
          ${{ matrix.command }}
