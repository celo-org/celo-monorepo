name: celo-monorepo
run-name: celo-monorepo tests

on:
  push:
    branches:
      - jcortejoso/circleci-github-actions
  # pull_request:
  #   branches:
  #     - master

concurrency:
  group: circle-ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    # working-directory: ~/app
    # TODO(jcortejoso): When using a self-hosted runner, we can use this if `/bin/bash` is installed. Not available in gh's ubuntu-latest
    shell: bash --login -eo pipefail {0}
    # shell: sh -e -u {0}

env:
  # Increment these to force cache rebuilding
  NODE_MODULE_CACHE_VERSION: 1
  NODE_OPTIONS: '--max-old-space-size=4096'
  TERM: dumb
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"'

jobs:
  install_dependencies:
    name: Install dependencies
    outputs:
      package-json-checksum: ${{ steps.node-checksums.outputs.PACKAGE_JSON_CHECKSUM }}
    # runs-on: ubuntu-latest
    runs-on: ["self-hosted", "monorepo"]
    steps:
      - name: Restore .git cache
        uses: actions/cache@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
          restore-keys: |
            git-
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Verify setup for incremental testing
        run: |
          set -euo pipefail
          set -v
          # To get the "master" branch mapping
          git checkout master
          git checkout ${GITHUB_REF}
          # Verify that following commands work, they are later called in the incremental testing script
          # There output does not matter here, the fact that they finish successfully does.
          git rev-parse --abbrev-ref HEAD
          git fetch --all --tags
      - name: Calculate node cache keys
        id: node-checksums
        run: |
          find . -maxdepth 5 -type f -name 'package.json' -not -path "*node_modules*" -print0 | sort -z | xargs -0 cat > package.checksum
          find ./patches -type f -name '*.patch' -print0 | sort -z | xargs -0 cat > patches.checksum
          echo "PACKAGE_JSON_CHECKSUM=${{ hashFiles('*.checksum') }}" >> "$GITHUB_OUTPUT"
      - name: Restore node cache
        uses: actions/cache@v3
        id: cache_node
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}-${{ steps.node-checksums.outputs.PACKAGE_JSON_CHECKSUM }}
          # TODO(jcortejoso): Think if remove this, to start clean with any change in deps
          restore-keys: |
            node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 10
        if: false
        with:
          limit-access-to-actor: true
      - name: Install yarn dependencies
        run: yarn install
        if: steps.cache_node.outputs.cache-hit != 'true'
      - name: Run yarn postinstall if cache hitted 
        run: yarn install
        if: steps.cache_node.outputs.cache-hit == 'true'
      - name: Fail if generated dependency graph doesn't match committed
        run: ./scripts/ci_check_dependency_graph_changed.sh
      - name: Build packages
        run: yarn build --ignore docs --include-dependencies
      - name: Check licenses
        run: |
          if [ ! -e ~/.tmp/yarn_deps_have_changed ]; then
            # Internally `yarn check-licenses` downloads dependencies into its cache again even if node_modules are up-to-date
            # which happens when we've restored our cached node_modules.
            # Making `yarn check-licenses` take ~45secs instead of ~3secs (depending on network conditions and build machine)
            # So here we skip checking when it's unnecessary
            echo "Skipping checking licenses, dependencies haven't changed"
            exit 0
          fi
          yarn check-licenses
  lint_checks:
    name: Lint code
    runs-on: ["self-hosted", "monorepo"]
    needs: install_dependencies
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - uses: actions/cache/restore@v3
        id: cache_node
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}-${{ needs.install_dependencies.outputs.package-json-checksum }}
      - run: yarn run prettify:diff
      - run: yarn run lint
  general_test:
    name: General jest test
    runs-on: ["self-hosted", "monorepo"]
    needs: install_dependencies
    steps:
      - uses: actions/cache/restore@v3
        id: cache_git
        with:
          path: .git
          key: git-${{ github.ref }}
      - uses: actions/checkout@v3
      - uses: actions/cache/restore@v3
        id: cache_node
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ env.NODE_MODULE_CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}-${{ needs.install_dependencies.outputs.package-json-checksum }}
      - run: yarn run prettify:diff
      - name: Run Jest Tests
        run: |
          mkdir -p test-results/jest
          yarn run lerna \
            --ignore @celo/contractkit \
            --ignore @celo/protocol \
            --ignore @celo/celotool \
            --ignore @celo/celocli \
            --ignore @celo/env-tests \
            --ignore @celo/identity \
            --ignore @celo/transactions-uri \
            --ignore '@celo/wallet-*' \
            run test
      - name: Upload Jest Test Results
        uses: actions/upload-artifact@v3
        with:
          name: Jest Test Results
          path: test-results/jest
