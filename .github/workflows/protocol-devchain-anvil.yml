name: Protocol Devchain Anvil
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Increment these to force cache rebuilding
  FOUNDRY_CACHE_KEY: 1

jobs:
  build:
    defaults:
      run:
        working-directory: packages/protocol
    name: Generate anvil
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      pull-requests: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Fail if there are test with wrong extension
        run: |
          if  tree test-sol | grep -i ".sol" | grep -v ".sol"; then
            echo "There are tests with wrong extensions"
            tree test-sol | grep -i ".sol" | grep -v ".sol"
            exit 1
          fi
      - name: Foundry cache
        id: foundry-cache
        uses: actions/cache@v3
        with:
          path: ./cache
          key: ${{ runner.os }}-foundry-cache-${{ env.FOUNDRY_CACHE_KEY }}
      - name: Foundry out
        id: foundry-out
        uses: actions/cache@v3
        with:
          path: ./out
          key: ${{ runner.os }}-foundry-out-${{ env.FOUNDRY_CACHE_KEY }}

      - uses: actions/github-script@v7
        id: get_pr_data
        with:
          script: |
            console.log('Commit SHA:', context.sha);
            console.log('Repository Owner:', context.repo.owner);
            console.log('Repository:', context.repo.repo);

            const prResponse = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              commit_sha: context.sha,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            console.log('PR Response:', prResponse);
            const pr = prResponse.data[0];
            if (pr) {
              core.setOutput('result', JSON.stringify(pr));
            } else {
              console.log('No pull request found for this commit.');
            }
      - name: Pull Request data
        run: |
          echo '${{ steps.get_pr_data.outputs.result }}'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install forge dependencies
        run: forge install

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Generate migrations
        run: ./migrations_sol/run_integration_tests_in_anvil.sh

      - name: Sanitize ref name
        id: sanitize-ref-name
        run: |
          sanitized_ref_name=$(echo "${{ github.ref_name }}" | tr -cd '[:alnum:]-_')
          echo "sanitized_ref_name=${sanitized_ref_name}" >> $GITHUB_ENV

      - name: Set package.json version based on GitHub ref
        run: |
          VERSION=${{ env.sanitized_ref_name }}
          echo "Setting version to $VERSION"
          jq ".version = \"$VERSION\"" .tmp/package.json > .tmp/temp.json && mv .tmp/temp.json .tmp/package.json

      - name: Upload devchain as artifact
        uses: actions/upload-artifact@v4
        with:
          name: devchain-${{ env.sanitized_ref_name }}-${{ steps.date.outputs.date }}
          path: packages/protocol/.tmp
          # Max retention time is 90 days for public repos
          # https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#artifact-and-log-retention-policy
          retention-days: 90

      - name: Akeyless Get Secrets
        id: get_auth_token
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          api-url: https://api.gateway.akeyless.celo-networks-dev.org
          access-id: p-kf9vjzruht6l
          static-secrets: '{"/static-secrets/NPM/npm-publish-token":"NPM_TOKEN"}'

      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish @celo/devchain-anvil
        run: |
          cat package.json
          npm publish $DRY_RUN
        working-directory: packages/protocol/.tmp
        env:
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}
          DRY_RUN: ${{ env.RELEASE_VERSION == '' && '--dry-run' || '' }}
