name: Publish ABIs and Solidity files to NPM

on:
  push:
    tags:
      - core-contracts.v*
    # If you define both branches/branches-ignore and paths/paths-ignore, the workflow will only run when both filters are satisfied.
    branches: [release/core-contracts/*]
    paths:
      - 'packages/protocol/abis/**'
      - 'packages/protocol/contracts/**'
      - 'packages/protocol/contracts-0.8/**'
      - 'packages/protocol/lib/**'
      - 'packages/protocol/scripts/**'
      - '!packages/protocol/scripts/foundry/**'  
      - '!packages/protocol/scripts/truffle/**' 

  pull_request:
    branches: [release/core-contracts/*, master]
    paths:
      - 'packages/protocol/abis/**'
      - 'packages/protocol/contracts/**'
      - 'packages/protocol/contracts-0.8/**'
      - 'packages/protocol/lib/**'
      - 'packages/protocol/scripts/**'
      - '!packages/protocol/scripts/foundry/**'  
      - '!packages/protocol/scripts/truffle/**'  
     
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      npm_tag:
        description: 'NPM TAG e.g. alpha, pre-merge (default: canary) '
        required: true
        type: string
jobs:
  setup:
    runs-on: ['self-hosted', 'org', 'npm-publish']
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      repository-projects: write
    outputs:
      RELEASE_TYPE: ${{ steps.determine_release.outputs.RELEASE_TYPE }}
      RELEASE_VERSION: ${{ steps.determine_release.outputs.RELEASE_VERSION }}
      COMMIT_HASH: ${{ steps.get_COMMIT_HASH.outputs.COMMIT_HASH }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Akeyless Get Secrets
        id: get_auth_token
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          api-url: https://api.gateway.akeyless.celo-networks-dev.org
          access-id: p-kf9vjzruht6l
          static-secrets: '{"/static-secrets/NPM/npm-publish-token":"NPM_TOKEN"}'

      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: 'Setup yarn'
        shell: bash
        run: |
          npm install --global yarn
          source ~/.bashrc
      - name: 'Install packages'
        shell: bash
        run: yarn
      - name: Determine release type and version (or dry run)
        # This is what sets the RELEASE_TYPE and RELEASE_VERSION env variables
        id: determine_release
        run: |
          yarn --silent determine-release-version >> "$GITHUB_ENV"
          echo "::set-output name=RELEASE_TYPE::${{ env.RELEASE_TYPE }}"
          echo "::set-output name=RELEASE_VERSION::${{ env.RELEASE_VERSION }}"
        working-directory: packages/protocol
        env:
          GITHUB_TAG: ${{ github.ref_name }}
          NPM_PACKAGE: "@celo/contracts"
          NPM_TAG: ${{ inputs.npm_tag }}
      - name: 'Build packages'
        shell: bash
        run: yarn build --ignore @celo/celotool --ignore @celo/env-tests --include-dependencies
      - name: Compile solidity contracts and typescript files
        run: yarn prepare_contracts_and_abis_publishing
        working-directory: packages/protocol
        env:
          RELEASE_TYPE: ${{ env.RELEASE_TYPE }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      - name: 'Validate ABIS Exports'
        shell: bash
        run: yarn validate_abis_exports
        working-directory: packages/protocol
      - name: 'Get git commit hash'
        id: get_COMMIT_HASH
        run: echo "::set-output name=COMMIT_HASH::$(git rev-parse --short HEAD)"

  publish:
    needs: setup
    runs-on: ['self-hosted', 'org', 'npm-publish']
    strategy:
      matrix:
        package: [contracts, abis]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Publish packages
        working-directory: packages/protocol/${{ matrix.package }}
        env:
          RELEASE_TYPE: --tag ${{ needs.setup.outputs.RELEASE_TYPE != '' && needs.setup.outputs.RELEASE_TYPE || 'canary' }}
          RELEASE_VERSION: ${{ needs.setup.outputs.RELEASE_VERSION }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          DRY_RUN: ${{ needs.setup.outputs.RELEASE_VERSION == '' && '--dry-run' || '' }}
          COMMIT_HASH: ${{ needs.setup.outputs.COMMIT_HASH }}
        shell: bash
        run: |
          echo "Publishing @celo/${{ matrix.package }}"
          cat package.json
          npm publish $RELEASE_TYPE $DRY_RUN
          if [ -n "$DRY_RUN" ]; then
            echo "Dry run mode, exiting successfully."
            exit 0
          fi
          echo 'tagging version' $RELEASE_VERSION 'with commit hash' $COMMIT_HASH
          npm dist-tag add @celo/${{ matrix.package }}@$RELEASE_VERSION $COMMIT_HASH
