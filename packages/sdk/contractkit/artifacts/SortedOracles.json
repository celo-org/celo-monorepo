{
  "contractName": "SortedOracles",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MedianUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleReportRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "OracleReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportExpiry",
          "type": "uint256"
        }
      ],
      "name": "ReportExpirySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportExpiry",
          "type": "uint256"
        }
      ],
      "name": "TokenReportExpirySet",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reportExpirySeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenReportExpirySeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportExpirySeconds",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportExpirySeconds",
          "type": "uint256"
        }
      ],
      "name": "setReportExpiry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reportExpirySeconds",
          "type": "uint256"
        }
      ],
      "name": "setTokenReportExpiry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "removeExpiredReports",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isOldestReportExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lesserKey",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greaterKey",
          "type": "address"
        }
      ],
      "name": "report",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "numRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "medianRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getRates",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "enum SortedLinkedListWithMedian.MedianRelation[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "numTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "medianTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTimestamps",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "enum SortedLinkedListWithMedian.MedianRelation[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getOracles",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenReportExpirySeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MedianUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleReportRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OracleReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportExpiry\",\"type\":\"uint256\"}],\"name\":\"ReportExpirySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportExpiry\",\"type\":\"uint256\"}],\"name\":\"TokenReportExpirySet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"enum SortedLinkedListWithMedian.MedianRelation[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTimestamps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"enum SortedLinkedListWithMedian.MedianRelation[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenReportExpirySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportExpirySeconds\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isOldestReportExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"medianRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"medianTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"numRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"numTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"removeExpiredReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lesserKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greaterKey\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reportExpirySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportExpirySeconds\",\"type\":\"uint256\"}],\"name\":\"setReportExpiry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reportExpirySeconds\",\"type\":\"uint256\"}],\"name\":\"setTokenReportExpiry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReportExpirySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addOracle(address,address)\":{\"params\":{\"oracleAddress\":\"The address of the oracle.\",\"token\":\"The address of the token.\"}},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization\"}},\"getOracles(address)\":{\"params\":{\"token\":\"The address of the token whose oracles should be returned.\"},\"return\":\"The list of oracles for a particular token.\"},\"getRates(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"keys Keys of nn unpacked list of elements from largest to smallest.values Values of an unpacked list of elements from largest to smallest.relations Relations of an unpacked list of elements from largest to smallest.\"},\"getTimestamps(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"keys Keys of nn unpacked list of elements from largest to smallest.values Values of an unpacked list of elements from largest to smallest.relations Relations of an unpacked list of elements from largest to smallest.\"},\"getTokenReportExpirySeconds(address)\":{\"params\":{\"token\":\"The address of the token.\"},\"return\":\"The report expiry in seconds.\"},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"initialize(uint256)\":{\"params\":{\"_reportExpirySeconds\":\"The number of seconds before a report is considered expired.\"}},\"isOldestReportExpired(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"isExpiredThe address of the last report.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"medianRate(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"The median exchange rate for `token`.fixidity\"},\"medianTimestamp(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"The median report timestamp for `token`.\"},\"numRates(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"The number of reported oracle rates for `token`.\"},\"numTimestamps(address)\":{\"params\":{\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"},\"return\":\"The number of oracle report timestamps for `token`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeExpiredReports(address,uint256)\":{\"params\":{\"n\":\"The number of expired reports to remove, at most (deterministic upper gas bound).\",\"token\":\"The address of the token for which the CELO exchange rate is being reported.\"}},\"removeOracle(address,address,uint256)\":{\"params\":{\"index\":\"The index of `oracleAddress` in the list of oracles.\",\"oracleAddress\":\"The address of the oracle.\",\"token\":\"The address of the token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"report(address,uint256,address,address)\":{\"details\":\"Note that only one of `lesserKey` or `greaterKey` needs to be correct to reduce friction.\",\"params\":{\"greaterKey\":\"The element which should be just right of the new oracle value.\",\"lesserKey\":\"The element which should be just left of the new oracle value.\",\"token\":\"The address of the token for which the CELO exchange rate is being reported.\",\"value\":\"The amount of `token` equal to one CELO, expressed as a fixidity value.\"}},\"setReportExpiry(uint256)\":{\"params\":{\"_reportExpirySeconds\":\"The number of seconds before a report is considered expired.\"}},\"setTokenReportExpiry(address,uint256)\":{\"params\":{\"_reportExpirySeconds\":\"The number of seconds before a report is considered expired.\",\"_token\":\"The address of the token to set expiry for.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Maintains a sorted list of oracle exchange rates between CELO and other currencies.\"},\"userdoc\":{\"methods\":{\"addOracle(address,address)\":{\"notice\":\"Adds a new Oracle.\"},\"constructor\":\"Sets initialized == true on implementation contracts\",\"getOracles(address)\":{\"notice\":\"Returns the list of oracles for a particular token.\"},\"getRates(address)\":{\"notice\":\"Gets all elements from the doubly linked list.\"},\"getTimestamps(address)\":{\"notice\":\"Gets all elements from the doubly linked list.\"},\"getTokenReportExpirySeconds(address)\":{\"notice\":\"Returns the expiry for the token if exists, if not the default.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"initialize(uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"isOldestReportExpired(address)\":{\"notice\":\"Check if last report is expired.\"},\"medianRate(address)\":{\"notice\":\"Returns the median rate.\"},\"medianTimestamp(address)\":{\"notice\":\"Returns the median timestamp.\"},\"numRates(address)\":{\"notice\":\"Returns the number of rates.\"},\"numTimestamps(address)\":{\"notice\":\"Returns the number of timestamps.\"},\"removeExpiredReports(address,uint256)\":{\"notice\":\"Removes a report that is expired.\"},\"removeOracle(address,address,uint256)\":{\"notice\":\"Removes an Oracle.\"},\"report(address,uint256,address,address)\":{\"notice\":\"Updates an oracle value and the median.\"},\"setReportExpiry(uint256)\":{\"notice\":\"Sets the report expiry parameter.\"},\"setTokenReportExpiry(address,uint256)\":{\"notice\":\"Sets the report expiry parameter for a token.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/stability/SortedOracles.sol\":\"SortedOracles\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (Fraction memory)\\n  {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0xf1cebbfcf298ef05f24e940ab4351049e2da6e5ee77b272257d2c86b4cd1cc1c\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract Initializable {\\n  bool public initialized;\\n\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x27277d9f2c894659833be45eeca368a6d5ff060d944f0ad335e31003bf6477ed\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n    * @return Storage version of the contract.\\n    * @return Major version of the contract.\\n    * @return Minor version of the contract.\\n    * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x27f0b14472db998eb8e4b529bbfd6a5879cbd842f8db8aa6c06ed7d2e0b17ac1\"},\"project:/contracts/common/linkedlists/AddressSortedLinkedListWithMedian.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./SortedLinkedListWithMedian.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by address.\\n */\\nlibrary AddressSortedLinkedListWithMedian {\\n  using SafeMath for uint256;\\n  using SortedLinkedListWithMedian for SortedLinkedListWithMedian.List;\\n\\n  function toBytes(address a) public pure returns (bytes32) {\\n    return bytes32(uint256(a) << 96);\\n  }\\n\\n  function toAddress(bytes32 b) public pure returns (address) {\\n    return address(uint256(b) >> 96);\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    SortedLinkedListWithMedian.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.insert(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(SortedLinkedListWithMedian.List storage list, address key) public {\\n    list.remove(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    SortedLinkedListWithMedian.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.update(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(SortedLinkedListWithMedian.List storage list, address key)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return list.contains(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(SortedLinkedListWithMedian.List storage list, address key)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return list.getValue(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Returns the median value of the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The median value.\\n   */\\n  function getMedianValue(SortedLinkedListWithMedian.List storage list)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return list.getValue(list.median);\\n  }\\n\\n  /**\\n   * @notice Returns the key of the first element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the first element in the list.\\n   */\\n  function getHead(SortedLinkedListWithMedian.List storage list) external view returns (address) {\\n    return toAddress(list.getHead());\\n  }\\n\\n  /**\\n   * @notice Returns the key of the median element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the median element in the list.\\n   */\\n  function getMedian(SortedLinkedListWithMedian.List storage list) external view returns (address) {\\n    return toAddress(list.getMedian());\\n  }\\n\\n  /**\\n   * @notice Returns the key of the last element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the last element in the list.\\n   */\\n  function getTail(SortedLinkedListWithMedian.List storage list) external view returns (address) {\\n    return toAddress(list.getTail());\\n  }\\n\\n  /**\\n   * @notice Returns the number of elements in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The number of elements in the list.\\n   */\\n  function getNumElements(SortedLinkedListWithMedian.List storage list)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return list.getNumElements();\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   * @return Array of relations to median of corresponding list elements.\\n   */\\n  function getElements(SortedLinkedListWithMedian.List storage list)\\n    public\\n    view\\n    returns (address[] memory, uint256[] memory, SortedLinkedListWithMedian.MedianRelation[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.getKeys();\\n    address[] memory keys = new address[](byteKeys.length);\\n    uint256[] memory values = new uint256[](byteKeys.length);\\n    // prettier-ignore\\n    SortedLinkedListWithMedian.MedianRelation[] memory relations =\\n      new SortedLinkedListWithMedian.MedianRelation[](keys.length);\\n    for (uint256 i = 0; i < byteKeys.length; i = i.add(1)) {\\n      keys[i] = toAddress(byteKeys[i]);\\n      values[i] = list.getValue(byteKeys[i]);\\n      relations[i] = list.relation[byteKeys[i]];\\n    }\\n    return (keys, values, relations);\\n  }\\n}\\n\",\"keccak256\":\"0x6849671d8e5b43c7f01614717ecf2e6a4a337bca386217edac310b859fdfe495\"},\"project:/contracts/common/linkedlists/LinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Maintains a doubly linked list keyed by bytes32.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary LinkedList {\\n  using SafeMath for uint256;\\n\\n  struct Element {\\n    bytes32 previousKey;\\n    bytes32 nextKey;\\n    bool exists;\\n  }\\n\\n  struct List {\\n    bytes32 head;\\n    bytes32 tail;\\n    uint256 numElements;\\n    mapping(bytes32 => Element) elements;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(key != bytes32(0), \\\"Key must be defined\\\");\\n    require(!contains(list, key), \\\"Can't insert an existing element\\\");\\n    require(\\n      previousKey != key && nextKey != key,\\n      \\\"Key cannot be the same as previousKey or nextKey\\\"\\n    );\\n\\n    Element storage element = list.elements[key];\\n    element.exists = true;\\n\\n    if (list.numElements == 0) {\\n      list.tail = key;\\n      list.head = key;\\n    } else {\\n      require(\\n        previousKey != bytes32(0) || nextKey != bytes32(0),\\n        \\\"Either previousKey or nextKey must be defined\\\"\\n      );\\n\\n      element.previousKey = previousKey;\\n      element.nextKey = nextKey;\\n\\n      if (previousKey != bytes32(0)) {\\n        require(\\n          contains(list, previousKey),\\n          \\\"If previousKey is defined, it must exist in the list\\\"\\n        );\\n        Element storage previousElement = list.elements[previousKey];\\n        require(previousElement.nextKey == nextKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        previousElement.nextKey = key;\\n      } else {\\n        list.tail = key;\\n      }\\n\\n      if (nextKey != bytes32(0)) {\\n        require(contains(list, nextKey), \\\"If nextKey is defined, it must exist in the list\\\");\\n        Element storage nextElement = list.elements[nextKey];\\n        require(nextElement.previousKey == previousKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        nextElement.previousKey = key;\\n      } else {\\n        list.head = key;\\n      }\\n    }\\n\\n    list.numElements = list.numElements.add(1);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    Element storage element = list.elements[key];\\n    require(key != bytes32(0) && contains(list, key), \\\"key not in list\\\");\\n    if (element.previousKey != bytes32(0)) {\\n      Element storage previousElement = list.elements[element.previousKey];\\n      previousElement.nextKey = element.nextKey;\\n    } else {\\n      list.tail = element.nextKey;\\n    }\\n\\n    if (element.nextKey != bytes32(0)) {\\n      Element storage nextElement = list.elements[element.nextKey];\\n      nextElement.previousKey = element.previousKey;\\n    } else {\\n      list.head = element.previousKey;\\n    }\\n\\n    delete list.elements[key];\\n    list.numElements = list.numElements.sub(1);\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(\\n      key != bytes32(0) && key != previousKey && key != nextKey && contains(list, key),\\n      \\\"key on in list\\\"\\n    );\\n    remove(list, key);\\n    insert(list, key, previousKey, nextKey);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.elements[key].exists;\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the N elements at the head of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the N elements at the head of the list.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    require(n <= list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    bytes32 key = list.head;\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      keys[i] = key;\\n      key = list.elements[key].previousKey;\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0x9104cbf273bd44a5845784a7540066ce80d543912b8b84742094e80adac3f1a3\"},\"project:/contracts/common/linkedlists/SortedLinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by bytes32.\\n */\\nlibrary SortedLinkedList {\\n  using SafeMath for uint256;\\n  using LinkedList for LinkedList.List;\\n\\n  struct List {\\n    LinkedList.List list;\\n    mapping(bytes32 => uint256) values;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    require(\\n      key != bytes32(0) && key != lesserKey && key != greaterKey && !contains(list, key),\\n      \\\"invalid key\\\"\\n    );\\n    require(\\n      (lesserKey != bytes32(0) || greaterKey != bytes32(0)) || list.list.numElements == 0,\\n      \\\"greater and lesser key zero\\\"\\n    );\\n    require(contains(list, lesserKey) || lesserKey == bytes32(0), \\\"invalid lesser key\\\");\\n    require(contains(list, greaterKey) || greaterKey == bytes32(0), \\\"invalid greater key\\\");\\n    (lesserKey, greaterKey) = getLesserAndGreater(list, value, lesserKey, greaterKey);\\n    list.list.insert(key, lesserKey, greaterKey);\\n    list.values[key] = value;\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    list.list.remove(key);\\n    list.values[key] = 0;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    remove(list, key);\\n    insert(list, key, value, lesserKey, greaterKey);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, 0, bytes32(0), list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(List storage list, uint256 n) internal returns (bytes32[] memory) {\\n    require(n <= list.list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      bytes32 key = list.list.head;\\n      keys[i] = key;\\n      remove(list, key);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.list.contains(key);\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(List storage list, bytes32 key) internal view returns (uint256) {\\n    return list.values[key];\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(List storage list)\\n    internal\\n    view\\n    returns (bytes32[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory keys = getKeys(list);\\n    uint256[] memory values = new uint256[](keys.length);\\n    for (uint256 i = 0; i < keys.length; i = i.add(1)) {\\n      values[i] = list.values[keys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return list.list.getKeys();\\n  }\\n\\n  /**\\n   * @notice Returns first N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the first n elements.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    return list.list.headN(n);\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the elements greaterKey than and less than the provided value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element which could be just left of the new value.\\n   * @param greaterKey The key of the element which could be just right of the new value.\\n   * @return The correct lesserKey keys.\\n   * @return The correct greaterKey keys.\\n   */\\n  function getLesserAndGreater(\\n    List storage list,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) private view returns (bytes32, bytes32) {\\n    // Check for one of the following conditions and fail if none are met:\\n    //   1. The value is less than the current lowest value\\n    //   2. The value is greater than the current greatest value\\n    //   3. The value is just greater than the value for `lesserKey`\\n    //   4. The value is just less than the value for `greaterKey`\\n    if (lesserKey == bytes32(0) && isValueBetween(list, value, lesserKey, list.list.tail)) {\\n      return (lesserKey, list.list.tail);\\n    } else if (\\n      greaterKey == bytes32(0) && isValueBetween(list, value, list.list.head, greaterKey)\\n    ) {\\n      return (list.list.head, greaterKey);\\n    } else if (\\n      lesserKey != bytes32(0) &&\\n      isValueBetween(list, value, lesserKey, list.list.elements[lesserKey].nextKey)\\n    ) {\\n      return (lesserKey, list.list.elements[lesserKey].nextKey);\\n    } else if (\\n      greaterKey != bytes32(0) &&\\n      isValueBetween(list, value, list.list.elements[greaterKey].previousKey, greaterKey)\\n    ) {\\n      return (list.list.elements[greaterKey].previousKey, greaterKey);\\n    } else {\\n      require(false, \\\"get lesser and greater failure\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a given element is between two other elements.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element whose value should be lesserKey.\\n   * @param greaterKey The key of the element whose value should be greaterKey.\\n   * @return True if the given element is between the two other elements.\\n   */\\n  function isValueBetween(List storage list, uint256 value, bytes32 lesserKey, bytes32 greaterKey)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool isLesser = lesserKey == bytes32(0) || list.values[lesserKey] <= value;\\n    bool isGreater = greaterKey == bytes32(0) || list.values[greaterKey] >= value;\\n    return isLesser && isGreater;\\n  }\\n}\\n\",\"keccak256\":\"0x26ef33655ed20a0595dfa7783dc0f46444242e1846501353c276368e4250e73c\"},\"project:/contracts/common/linkedlists/SortedLinkedListWithMedian.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LinkedList.sol\\\";\\nimport \\\"./SortedLinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by bytes32.\\n */\\nlibrary SortedLinkedListWithMedian {\\n  using SafeMath for uint256;\\n  using SortedLinkedList for SortedLinkedList.List;\\n\\n  enum MedianAction { None, Lesser, Greater }\\n\\n  enum MedianRelation { Undefined, Lesser, Greater, Equal }\\n\\n  struct List {\\n    SortedLinkedList.List list;\\n    bytes32 median;\\n    mapping(bytes32 => MedianRelation) relation;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    list.list.insert(key, value, lesserKey, greaterKey);\\n    LinkedList.Element storage element = list.list.list.elements[key];\\n\\n    MedianAction action = MedianAction.None;\\n    if (list.list.list.numElements == 1) {\\n      list.median = key;\\n      list.relation[key] = MedianRelation.Equal;\\n    } else if (list.list.list.numElements % 2 == 1) {\\n      // When we have an odd number of elements, and the element that we inserted is less than\\n      // the previous median, we need to slide the median down one element, since we had previously\\n      // selected the greater of the two middle elements.\\n      if (\\n        element.previousKey == bytes32(0) ||\\n        list.relation[element.previousKey] == MedianRelation.Lesser\\n      ) {\\n        action = MedianAction.Lesser;\\n        list.relation[key] = MedianRelation.Lesser;\\n      } else {\\n        list.relation[key] = MedianRelation.Greater;\\n      }\\n    } else {\\n      // When we have an even number of elements, and the element that we inserted is greater than\\n      // the previous median, we need to slide the median up one element, since we always select\\n      // the greater of the two middle elements.\\n      if (\\n        element.nextKey == bytes32(0) || list.relation[element.nextKey] == MedianRelation.Greater\\n      ) {\\n        action = MedianAction.Greater;\\n        list.relation[key] = MedianRelation.Greater;\\n      } else {\\n        list.relation[key] = MedianRelation.Lesser;\\n      }\\n    }\\n    updateMedian(list, action);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    MedianAction action = MedianAction.None;\\n    if (list.list.list.numElements == 0) {\\n      list.median = bytes32(0);\\n    } else if (list.list.list.numElements % 2 == 0) {\\n      // When we have an even number of elements, we always choose the higher of the two medians.\\n      // Thus, if the element we're removing is greaterKey than or equal to the median we need to\\n      // slide the median left by one.\\n      if (\\n        list.relation[key] == MedianRelation.Greater || list.relation[key] == MedianRelation.Equal\\n      ) {\\n        action = MedianAction.Lesser;\\n      }\\n    } else {\\n      // When we don't have an even number of elements, we just choose the median value.\\n      // Thus, if the element we're removing is less than or equal to the median, we need to slide\\n      // median right by one.\\n      if (\\n        list.relation[key] == MedianRelation.Lesser || list.relation[key] == MedianRelation.Equal\\n      ) {\\n        action = MedianAction.Greater;\\n      }\\n    }\\n    updateMedian(list, action);\\n\\n    list.list.remove(key);\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    remove(list, key);\\n    insert(list, key, value, lesserKey, greaterKey);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, 0, bytes32(0), list.list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(List storage list, uint256 n) internal returns (bytes32[] memory) {\\n    require(n <= list.list.list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      bytes32 key = list.list.list.head;\\n      keys[i] = key;\\n      remove(list, key);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.list.contains(key);\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(List storage list, bytes32 key) internal view returns (uint256) {\\n    return list.list.values[key];\\n  }\\n\\n  /**\\n   * @notice Returns the median value of the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The median value.\\n   */\\n  function getMedianValue(List storage list) internal view returns (uint256) {\\n    return getValue(list, list.median);\\n  }\\n\\n  /**\\n   * @notice Returns the key of the first element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the first element in the list.\\n   */\\n  function getHead(List storage list) internal view returns (bytes32) {\\n    return list.list.list.head;\\n  }\\n\\n  /**\\n   * @notice Returns the key of the median element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the median element in the list.\\n   */\\n  function getMedian(List storage list) internal view returns (bytes32) {\\n    return list.median;\\n  }\\n\\n  /**\\n   * @notice Returns the key of the last element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The key of the last element in the list.\\n   */\\n  function getTail(List storage list) internal view returns (bytes32) {\\n    return list.list.list.tail;\\n  }\\n\\n  /**\\n   * @notice Returns the number of elements in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return The number of elements in the list.\\n   */\\n  function getNumElements(List storage list) internal view returns (uint256) {\\n    return list.list.list.numElements;\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   * @return Array of relations to median of corresponding list elements.\\n   */\\n  function getElements(List storage list)\\n    internal\\n    view\\n    returns (bytes32[] memory, uint256[] memory, MedianRelation[] memory)\\n  {\\n    bytes32[] memory keys = getKeys(list);\\n    uint256[] memory values = new uint256[](keys.length);\\n    MedianRelation[] memory relations = new MedianRelation[](keys.length);\\n    for (uint256 i = 0; i < keys.length; i = i.add(1)) {\\n      values[i] = list.list.values[keys[i]];\\n      relations[i] = list.relation[keys[i]];\\n    }\\n    return (keys, values, relations);\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return list.list.getKeys();\\n  }\\n\\n  /**\\n   * @notice Moves the median pointer right or left of its current value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param action Which direction to move the median pointer.\\n   */\\n  function updateMedian(List storage list, MedianAction action) private {\\n    LinkedList.Element storage previousMedian = list.list.list.elements[list.median];\\n    if (action == MedianAction.Lesser) {\\n      list.relation[list.median] = MedianRelation.Greater;\\n      list.median = previousMedian.previousKey;\\n    } else if (action == MedianAction.Greater) {\\n      list.relation[list.median] = MedianRelation.Lesser;\\n      list.median = previousMedian.nextKey;\\n    }\\n    list.relation[list.median] = MedianRelation.Equal;\\n  }\\n}\\n\",\"keccak256\":\"0xf4bf675bbac6bfe88f7c45aef95509fc480aba77d06628f83353ab07767efcfe\"},\"project:/contracts/stability/SortedOracles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/ISortedOracles.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/linkedlists/AddressSortedLinkedListWithMedian.sol\\\";\\nimport \\\"../common/linkedlists/SortedLinkedListWithMedian.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of oracle exchange rates between CELO and other currencies.\\n */\\ncontract SortedOracles is ISortedOracles, ICeloVersionedContract, Ownable, Initializable {\\n  using SafeMath for uint256;\\n  using AddressSortedLinkedListWithMedian for SortedLinkedListWithMedian.List;\\n  using FixidityLib for FixidityLib.Fraction;\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  // Maps a token address to a sorted list of report values.\\n  mapping(address => SortedLinkedListWithMedian.List) private rates;\\n  // Maps a token address to a sorted list of report timestamps.\\n  mapping(address => SortedLinkedListWithMedian.List) private timestamps;\\n  mapping(address => mapping(address => bool)) public isOracle;\\n  mapping(address => address[]) public oracles;\\n\\n  // `reportExpirySeconds` is the fallback value used to determine reporting\\n  // frequency. Initially it was the _only_ value but we later introduced\\n  // the per token mapping in `tokenReportExpirySeconds`. If a token\\n  // doesn't have a value in the mapping (i.e. it's 0), the fallback is used.\\n  // See: #getTokenReportExpirySeconds\\n  uint256 public reportExpirySeconds;\\n  mapping(address => uint256) public tokenReportExpirySeconds;\\n\\n  event OracleAdded(address indexed token, address indexed oracleAddress);\\n  event OracleRemoved(address indexed token, address indexed oracleAddress);\\n  event OracleReported(\\n    address indexed token,\\n    address indexed oracle,\\n    uint256 timestamp,\\n    uint256 value\\n  );\\n  event OracleReportRemoved(address indexed token, address indexed oracle);\\n  event MedianUpdated(address indexed token, uint256 value);\\n  event ReportExpirySet(uint256 reportExpiry);\\n  event TokenReportExpirySet(address token, uint256 reportExpiry);\\n\\n  modifier onlyOracle(address token) {\\n    require(isOracle[token][msg.sender], \\\"sender was not an oracle for token addr\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 1, 2, 2);\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param _reportExpirySeconds The number of seconds before a report is considered expired.\\n   */\\n  function initialize(uint256 _reportExpirySeconds) external initializer {\\n    _transferOwnership(msg.sender);\\n    setReportExpiry(_reportExpirySeconds);\\n  }\\n\\n  /**\\n   * @notice Sets the report expiry parameter.\\n   * @param _reportExpirySeconds The number of seconds before a report is considered expired.\\n   */\\n  function setReportExpiry(uint256 _reportExpirySeconds) public onlyOwner {\\n    require(_reportExpirySeconds > 0, \\\"report expiry seconds must be > 0\\\");\\n    require(_reportExpirySeconds != reportExpirySeconds, \\\"reportExpirySeconds hasn't changed\\\");\\n    reportExpirySeconds = _reportExpirySeconds;\\n    emit ReportExpirySet(_reportExpirySeconds);\\n  }\\n\\n  /**\\n   * @notice Sets the report expiry parameter for a token.\\n   * @param _token The address of the token to set expiry for.\\n   * @param _reportExpirySeconds The number of seconds before a report is considered expired.\\n   */\\n  function setTokenReportExpiry(address _token, uint256 _reportExpirySeconds) external onlyOwner {\\n    require(_reportExpirySeconds > 0, \\\"report expiry seconds must be > 0\\\");\\n    require(\\n      _reportExpirySeconds != tokenReportExpirySeconds[_token],\\n      \\\"token reportExpirySeconds hasn't changed\\\"\\n    );\\n    tokenReportExpirySeconds[_token] = _reportExpirySeconds;\\n    emit TokenReportExpirySet(_token, _reportExpirySeconds);\\n  }\\n\\n  /**\\n   * @notice Adds a new Oracle.\\n   * @param token The address of the token.\\n   * @param oracleAddress The address of the oracle.\\n   */\\n  function addOracle(address token, address oracleAddress) external onlyOwner {\\n    require(\\n      token != address(0) && oracleAddress != address(0) && !isOracle[token][oracleAddress],\\n      \\\"token addr was null or oracle addr was null or oracle addr is not an oracle for token addr\\\"\\n    );\\n    isOracle[token][oracleAddress] = true;\\n    oracles[token].push(oracleAddress);\\n    emit OracleAdded(token, oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Removes an Oracle.\\n   * @param token The address of the token.\\n   * @param oracleAddress The address of the oracle.\\n   * @param index The index of `oracleAddress` in the list of oracles.\\n   */\\n  function removeOracle(address token, address oracleAddress, uint256 index) external onlyOwner {\\n    require(\\n      token != address(0) &&\\n        oracleAddress != address(0) &&\\n        oracles[token].length > index &&\\n        oracles[token][index] == oracleAddress,\\n      \\\"token addr null or oracle addr null or index of token oracle not mapped to oracle addr\\\"\\n    );\\n    isOracle[token][oracleAddress] = false;\\n    oracles[token][index] = oracles[token][oracles[token].length.sub(1)];\\n    oracles[token].length = oracles[token].length.sub(1);\\n    if (reportExists(token, oracleAddress)) {\\n      removeReport(token, oracleAddress);\\n    }\\n    emit OracleRemoved(token, oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Removes a report that is expired.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @param n The number of expired reports to remove, at most (deterministic upper gas bound).\\n   */\\n  function removeExpiredReports(address token, uint256 n) external {\\n    require(\\n      token != address(0) && n < timestamps[token].getNumElements(),\\n      \\\"token addr null or trying to remove too many reports\\\"\\n    );\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      (bool isExpired, address oldestAddress) = isOldestReportExpired(token);\\n      if (isExpired) {\\n        removeReport(token, oldestAddress);\\n      } else {\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Check if last report is expired.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return isExpired\\n   * @return The address of the last report.\\n   */\\n  function isOldestReportExpired(address token) public view returns (bool, address) {\\n    require(token != address(0), \\\"token address cannot be null\\\");\\n    address oldest = timestamps[token].getTail();\\n    uint256 timestamp = timestamps[token].getValue(oldest);\\n    // solhint-disable-next-line not-rely-on-time\\n    if (now.sub(timestamp) >= getTokenReportExpirySeconds(token)) {\\n      return (true, oldest);\\n    }\\n    return (false, oldest);\\n  }\\n\\n  /**\\n   * @notice Updates an oracle value and the median.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @param value The amount of `token` equal to one CELO, expressed as a fixidity value.\\n   * @param lesserKey The element which should be just left of the new oracle value.\\n   * @param greaterKey The element which should be just right of the new oracle value.\\n   * @dev Note that only one of `lesserKey` or `greaterKey` needs to be correct to reduce friction.\\n   */\\n  function report(address token, uint256 value, address lesserKey, address greaterKey)\\n    external\\n    onlyOracle(token)\\n  {\\n    uint256 originalMedian = rates[token].getMedianValue();\\n    if (rates[token].contains(msg.sender)) {\\n      rates[token].update(msg.sender, value, lesserKey, greaterKey);\\n\\n      // Rather than update the timestamp, we remove it and re-add it at the\\n      // head of the list later. The reason for this is that we need to handle\\n      // a few different cases:\\n      //   1. This oracle is the only one to report so far. lesserKey = address(0)\\n      //   2. Other oracles have reported since this one's last report. lesserKey = getHead()\\n      //   3. Other oracles have reported, but the most recent is this one.\\n      //      lesserKey = key immediately after getHead()\\n      //\\n      // However, if we just remove this timestamp, timestamps[token].getHead()\\n      // does the right thing in all cases.\\n      timestamps[token].remove(msg.sender);\\n    } else {\\n      rates[token].insert(msg.sender, value, lesserKey, greaterKey);\\n    }\\n    timestamps[token].insert(\\n      msg.sender,\\n      // solhint-disable-next-line not-rely-on-time\\n      now,\\n      timestamps[token].getHead(),\\n      address(0)\\n    );\\n    emit OracleReported(token, msg.sender, now, value);\\n    uint256 newMedian = rates[token].getMedianValue();\\n    if (newMedian != originalMedian) {\\n      emit MedianUpdated(token, newMedian);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the number of rates.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return The number of reported oracle rates for `token`.\\n   */\\n  function numRates(address token) public view returns (uint256) {\\n    return rates[token].getNumElements();\\n  }\\n\\n  /**\\n   * @notice Returns the median rate.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return The median exchange rate for `token`.\\n   * @return fixidity\\n   */\\n  function medianRate(address token) external view returns (uint256, uint256) {\\n    return (rates[token].getMedianValue(), numRates(token) == 0 ? 0 : FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return keys Keys of nn unpacked list of elements from largest to smallest.\\n   * @return values Values of an unpacked list of elements from largest to smallest.\\n   * @return relations Relations of an unpacked list of elements from largest to smallest.\\n   */\\n  function getRates(address token)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory, SortedLinkedListWithMedian.MedianRelation[] memory)\\n  {\\n    return rates[token].getElements();\\n  }\\n\\n  /**\\n   * @notice Returns the number of timestamps.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return The number of oracle report timestamps for `token`.\\n   */\\n  function numTimestamps(address token) public view returns (uint256) {\\n    return timestamps[token].getNumElements();\\n  }\\n\\n  /**\\n   * @notice Returns the median timestamp.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return The median report timestamp for `token`.\\n   */\\n  function medianTimestamp(address token) external view returns (uint256) {\\n    return timestamps[token].getMedianValue();\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @return keys Keys of nn unpacked list of elements from largest to smallest.\\n   * @return values Values of an unpacked list of elements from largest to smallest.\\n   * @return relations Relations of an unpacked list of elements from largest to smallest.\\n   */\\n  function getTimestamps(address token)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory, SortedLinkedListWithMedian.MedianRelation[] memory)\\n  {\\n    return timestamps[token].getElements();\\n  }\\n\\n  /**\\n   * @notice Returns whether a report exists on token from oracle.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @param oracle The oracle whose report should be checked.\\n   */\\n  function reportExists(address token, address oracle) internal view returns (bool) {\\n    return rates[token].contains(oracle) && timestamps[token].contains(oracle);\\n  }\\n\\n  /**\\n   * @notice Returns the list of oracles for a particular token.\\n   * @param token The address of the token whose oracles should be returned.\\n   * @return The list of oracles for a particular token.\\n   */\\n  function getOracles(address token) external view returns (address[] memory) {\\n    return oracles[token];\\n  }\\n\\n  /**\\n   * @notice Returns the expiry for the token if exists, if not the default.\\n   * @param token The address of the token.\\n   * @return The report expiry in seconds.\\n   */\\n  function getTokenReportExpirySeconds(address token) public view returns (uint256) {\\n    if (tokenReportExpirySeconds[token] == 0) {\\n      return reportExpirySeconds;\\n    }\\n\\n    return tokenReportExpirySeconds[token];\\n  }\\n\\n  /**\\n   * @notice Removes an oracle value and updates the median.\\n   * @param token The address of the token for which the CELO exchange rate is being reported.\\n   * @param oracle The oracle whose value should be removed.\\n   * @dev This can be used to delete elements for oracles that have been removed.\\n   * However, a > 1 elements reports list should always be maintained\\n   */\\n  function removeReport(address token, address oracle) private {\\n    if (numTimestamps(token) == 1 && reportExists(token, oracle)) return;\\n    uint256 originalMedian = rates[token].getMedianValue();\\n    rates[token].remove(oracle);\\n    timestamps[token].remove(oracle);\\n    emit OracleReportRemoved(token, oracle);\\n    uint256 newMedian = rates[token].getMedianValue();\\n    if (newMedian != originalMedian) {\\n      emit MedianUpdated(token, newMedian);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x76e6cf0a14b0bfb6e4708f791a8ea79ebfc7e49c8233c7cdfeb9a5ca8350a525\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200407538038062004075833981810160405260208110156200003757600080fd5b81019080805190602001909291905050508060006200005b6200012360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350806200011b576001600060146101000a81548160ff0219169083151502179055505b50506200012b565b600033905090565b613f3a806200013b6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638e749281116100de578063ebc1d6bb11610097578063f2fde38b11610071578063f2fde38b14610a64578063fc20935d14610aa8578063fe4b84df14610af6578063ffe736bf14610b245761018e565b8063ebc1d6bb14610973578063ef90e1b0146109a1578063f0ca4adb14610a005761018e565b80638e7492811461065b5780638f32d59b146106f4578063a00a8b2c14610716578063b9292158146107a4578063bbc66a94146108cd578063dd34ca3b146109255761018e565b806353a572971161014b5780636deb6799116101255780636deb679914610521578063715018a61461057957806380e50744146105835780638da5cb5b146106115761018e565b806353a572971461042857806354255be0146104965780636dd6ef0c146104c95761018e565b806302f55b6114610193578063071b48fc146102bc578063158ef93e146103145780632e86bc0114610336578063370c998e1461038e578063493a353c1461040a575b600080fd5b6101d5600480360360208110156101a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb3565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610220578082015181840152602081019050610205565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610262578082015181840152602081019050610247565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156102a4578082015181840152602081019050610289565b50505050905001965050505050505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4f565b6040518082815260200191505060405180910390f35b61031c610f22565b604051808215151515815260200191505060405180910390f35b6103786004803603602081101561034c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f35565b6040518082815260200191505060405180910390f35b6103f0600480360360408110156103a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f4d565b604051808215151515815260200191505060405180910390f35b610412610f7c565b6040518082815260200191505060405180910390f35b6104946004803603606081101561043e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f82565b005b61049e6114be565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b61050b600480360360208110156104df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e4565b6040518082815260200191505060405180910390f35b6105636004803603602081101561053757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b7565b6040518082815260200191505060405180910390f35b610581611652565b005b61060f6004803603608081101561059957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061178b565b005b610619612162565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61069d6004803603602081101561067157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061218b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106e05780820151818401526020810190506106c5565b505050509050019250505060405180910390f35b6106fc612258565b604051808215151515815260200191505060405180910390f35b6107626004803603604081101561072c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107e6600480360360208110156107ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612301565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610831578082015181840152602081019050610816565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610873578082015181840152602081019050610858565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156108b557808201518184015260208101905061089a565b50505050905001965050505050505060405180910390f35b61090f600480360360208110156108e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061259d565b6040518082815260200191505060405180910390f35b6109716004803603604081101561093b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612670565b005b61099f6004803603602081101561098957600080fd5b8101908080359060200190929190505050612826565b005b6109e3600480360360208110156109b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612995565b604051808381526020018281526020019250505060405180910390f35b610a6260048036036040811015610a1657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a8e565b005b610aa660048036036020811015610a7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612df0565b005b610af460048036036040811015610abe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612e76565b005b610b2260048036036020811015610b0c57600080fd5b8101908080359060200190929190505050613094565b005b610b6660048036036020811015610b3a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613147565b60405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6060806060600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636cfa387390916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b158015610c4757600080fd5b505af4158015610c5b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506060811015610c8557600080fd5b8101908080516040519392919084640100000000821115610ca557600080fd5b83820191506020820185811115610cbb57600080fd5b8251866020820283011164010000000082111715610cd857600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610d0f578082015181840152602081019050610cf4565b5050505090500160405260200180516040519392919084640100000000821115610d3857600080fd5b83820191506020820185811115610d4e57600080fd5b8251866020820283011164010000000082111715610d6b57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610da2578082015181840152602081019050610d87565b5050505090500160405260200180516040519392919084640100000000821115610dcb57600080fd5b83820191506020820185811115610de157600080fd5b8251866020820283011164010000000082111715610dfe57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610e35578082015181840152602081019050610e1a565b505050509050016040525050509250925092509193909250565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ee057600080fd5b505af4158015610ef4573d6000803e3d6000fd5b505050506040513d6020811015610f0a57600080fd5b81019080805190602001909291905050509050919050565b600060149054906101000a900460ff1681565b60066020528060005260406000206000915090505481565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60055481565b610f8a612258565b610ffc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156110665750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156110b3575080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050115b801561115e57508173ffffffffffffffffffffffffffffffffffffffff16600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061111b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6111b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526056815260200180613dc46056913960600191505060405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206112dd6001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506133fb90919063ffffffff16565b815481106112e757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061135c57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113fa6001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506133fb90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816114449190613d18565b5061144f8383613445565b1561145f5761145e8383613653565b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6dc84b66cc948d847632b9d829f7cb1cb904fbf2c084554a9bc22ad9d845334060405160405180910390a3505050565b600080600080600180600280839350829250819150809050935093509350935090919293565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561157557600080fd5b505af4158015611589573d6000803e3d6000fd5b505050506040513d602081101561159f57600080fd5b81019080805190602001909291905050509050919050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561160a57600554905061164d565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b61165a612258565b6116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b83600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661186b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613e746027913960400191505060405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156118fc57600080fd5b505af4158015611910573d6000803e3d6000fd5b505050506040513d602081101561192657600080fd5b81019080805190602001909291905050509050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156119fc57600080fd5b505af4158015611a10573d6000803e3d6000fd5b505050506040513d6020811015611a2657600080fd5b810190808051906020019092919050505015611c6757600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63832a21479091338888886040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611b6f57600080fd5b505af4158015611b83573d6000803e3d6000fd5b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611c4a57600080fd5b505af4158015611c5e573d6000803e3d6000fd5b50505050611db3565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d4a092729091338888886040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611d9a57600080fd5b505af4158015611dae573d6000803e3d6000fd5b505050505b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d4a0927290913342600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____630944c59490916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611e9f57600080fd5b505af4158015611eb3573d6000803e3d6000fd5b505050506040513d6020811015611ec957600080fd5b810190808051906020019092919050505060006040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611fb057600080fd5b505af4158015611fc4573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f7cebb17173a9ed273d2b7538f64395c0ebf352ff743f1cf8ce66b437a61442134288604051808381526020018281526020019250505060405180910390a36000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156120c657600080fd5b505af41580156120da573d6000803e3d6000fd5b505050506040513d60208110156120f057600080fd5b81019080805190602001909291905050509050818114612159578673ffffffffffffffffffffffffffffffffffffffff167fa9981ebfc3b766a742486e898f54959b050a66006dbce1a4155c1f84a08bcf41826040518082815260200191505060405180910390a25b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561224c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612202575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661229a613a84565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600460205281600052604060002081815481106122cf57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060806060600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636cfa387390916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561239557600080fd5b505af41580156123a9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060608110156123d357600080fd5b81019080805160405193929190846401000000008211156123f357600080fd5b8382019150602082018581111561240957600080fd5b825186602082028301116401000000008211171561242657600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561245d578082015181840152602081019050612442565b505050509050016040526020018051604051939291908464010000000082111561248657600080fd5b8382019150602082018581111561249c57600080fd5b82518660208202830111640100000000821117156124b957600080fd5b8083526020830192505050908051906020019060200280838360005b838110156124f05780820151818401526020810190506124d5565b505050509050016040526020018051604051939291908464010000000082111561251957600080fd5b8382019150602082018581111561252f57600080fd5b825186602082028301116401000000008211171561254c57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612583578082015181840152602081019050612568565b505050509050016040525050509250925092509193909250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561262e57600080fd5b505af4158015612642573d6000803e3d6000fd5b505050506040513d602081101561265857600080fd5b81019080805190602001909291905050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156127755750600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561273757600080fd5b505af415801561274b573d6000803e3d6000fd5b505050506040513d602081101561276157600080fd5b810190808051906020019092919050505081105b6127ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180613d906034913960400191505060405180910390fd5b60008090505b81811015612821576000806127e485613147565b9150915081156127fd576127f88582613653565b612804565b5050612821565b505061281a600182613a8c90919063ffffffff16565b90506127d0565b505050565b61282e612258565b6128a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081116128f9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613ee56021913960400191505060405180910390fd5b600554811415612954576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613ec36022913960400191505060405180910390fd5b806005819055507fc68a9b88effd8a11611ff410efbc83569f0031b7bc70dd455b61344c7f0a042f816040518082815260200191505060405180910390a150565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612a2757600080fd5b505af4158015612a3b573d6000803e3d6000fd5b505050506040513d6020811015612a5157600080fd5b81019080805190602001909291905050506000612a6d8561259d565b14612a825769d3c21bcecceda1000000612a85565b60005b91509150915091565b612a96612258565b612b08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612b725750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612c055750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b612c5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252605a815260200180613e1a605a913960600191505060405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f828d2be040dede7698182e08dfa8bfbd663c879aee772509c4a2bd961d0ed43f60405160405180910390a35050565b612df8612258565b612e6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612e7381613b14565b50565b612e7e612258565b612ef0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008111612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613ee56021913960400191505060405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811415612fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613e9b6028913960400191505060405180910390fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff8324c8592dfd9991ee3e717351afe0a964605257959e3d99b0eb3d45bff94228282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600060149054906101000a900460ff1615613117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff02191690831515021790555061313b33613b14565b61314481612826565b50565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156131ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f746f6b656e20616464726573732063616e6e6f74206265206e756c6c0000000081525060200191505060405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d938ec7b90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561327e57600080fd5b505af4158015613292573d6000803e3d6000fd5b505050506040513d60208110156132a857600080fd5b810190808051906020019092919050505090506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____637c6bb8629091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561338057600080fd5b505af4158015613394573d6000803e3d6000fd5b505050506040513d60208110156133aa57600080fd5b810190808051906020019092919050505090506133c6856115b7565b6133d982426133fb90919063ffffffff16565b106133ec576001829350935050506133f6565b6000829350935050505b915091565b600061343d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613c58565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561350a57600080fd5b505af415801561351e573d6000803e3d6000fd5b505050506040513d602081101561353457600080fd5b8101908080519060200190929190505050801561364b5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561360f57600080fd5b505af4158015613623573d6000803e3d6000fd5b505050506040513d602081101561363957600080fd5b81019080805190602001909291905050505b905092915050565b600161365e836114e4565b14801561367157506136708282613445565b5b1561367b57613a80565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561370c57600080fd5b505af4158015613720573d6000803e3d6000fd5b505050506040513d602081101561373657600080fd5b81019080805190602001909291905050509050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561380c57600080fd5b505af4158015613820573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156138e757600080fd5b505af41580156138fb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe21a44017b6fa1658d84e937d56ff408501facdb4ff7427c479ac460d76f789360405160405180910390a36000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156139ea57600080fd5b505af41580156139fe573d6000803e3d6000fd5b505050506040513d6020811015613a1457600080fd5b81019080805190602001909291905050509050818114613a7d578373ffffffffffffffffffffffffffffffffffffffff167fa9981ebfc3b766a742486e898f54959b050a66006dbce1a4155c1f84a08bcf41826040518082815260200191505060405180910390a25b50505b5050565b600033905090565b600080828401905083811015613b0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613d6a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000838311158290613d05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613cca578082015181840152602081019050613caf565b50505050905090810190601f168015613cf75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b815481835581811115613d3f57818360005260206000209182019101613d3e9190613d44565b5b505050565b613d6691905b80821115613d62576000816000905550600101613d4a565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e2061646472206e756c6c206f7220747279696e6720746f2072656d6f766520746f6f206d616e79207265706f727473746f6b656e2061646472206e756c6c206f72206f7261636c652061646472206e756c6c206f7220696e646578206f6620746f6b656e206f7261636c65206e6f74206d617070656420746f206f7261636c652061646472746f6b656e206164647220776173206e756c6c206f72206f7261636c65206164647220776173206e756c6c206f72206f7261636c652061646472206973206e6f7420616e206f7261636c6520666f7220746f6b656e206164647273656e64657220776173206e6f7420616e206f7261636c6520666f7220746f6b656e2061646472746f6b656e207265706f72744578706972795365636f6e6473206861736e2774206368616e6765647265706f72744578706972795365636f6e6473206861736e2774206368616e6765647265706f727420657870697279207365636f6e6473206d757374206265203e2030a265627a7a72315820849253f5235f59f72c6f188eb06e1d5b61c0bf283d179bf6a9ddf924fe23f4c564736f6c634300050d0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638e749281116100de578063ebc1d6bb11610097578063f2fde38b11610071578063f2fde38b14610a64578063fc20935d14610aa8578063fe4b84df14610af6578063ffe736bf14610b245761018e565b8063ebc1d6bb14610973578063ef90e1b0146109a1578063f0ca4adb14610a005761018e565b80638e7492811461065b5780638f32d59b146106f4578063a00a8b2c14610716578063b9292158146107a4578063bbc66a94146108cd578063dd34ca3b146109255761018e565b806353a572971161014b5780636deb6799116101255780636deb679914610521578063715018a61461057957806380e50744146105835780638da5cb5b146106115761018e565b806353a572971461042857806354255be0146104965780636dd6ef0c146104c95761018e565b806302f55b6114610193578063071b48fc146102bc578063158ef93e146103145780632e86bc0114610336578063370c998e1461038e578063493a353c1461040a575b600080fd5b6101d5600480360360208110156101a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb3565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610220578082015181840152602081019050610205565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610262578082015181840152602081019050610247565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156102a4578082015181840152602081019050610289565b50505050905001965050505050505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4f565b6040518082815260200191505060405180910390f35b61031c610f22565b604051808215151515815260200191505060405180910390f35b6103786004803603602081101561034c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f35565b6040518082815260200191505060405180910390f35b6103f0600480360360408110156103a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f4d565b604051808215151515815260200191505060405180910390f35b610412610f7c565b6040518082815260200191505060405180910390f35b6104946004803603606081101561043e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f82565b005b61049e6114be565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b61050b600480360360208110156104df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e4565b6040518082815260200191505060405180910390f35b6105636004803603602081101561053757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b7565b6040518082815260200191505060405180910390f35b610581611652565b005b61060f6004803603608081101561059957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061178b565b005b610619612162565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61069d6004803603602081101561067157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061218b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106e05780820151818401526020810190506106c5565b505050509050019250505060405180910390f35b6106fc612258565b604051808215151515815260200191505060405180910390f35b6107626004803603604081101561072c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107e6600480360360208110156107ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612301565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610831578082015181840152602081019050610816565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610873578082015181840152602081019050610858565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156108b557808201518184015260208101905061089a565b50505050905001965050505050505060405180910390f35b61090f600480360360208110156108e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061259d565b6040518082815260200191505060405180910390f35b6109716004803603604081101561093b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612670565b005b61099f6004803603602081101561098957600080fd5b8101908080359060200190929190505050612826565b005b6109e3600480360360208110156109b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612995565b604051808381526020018281526020019250505060405180910390f35b610a6260048036036040811015610a1657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a8e565b005b610aa660048036036020811015610a7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612df0565b005b610af460048036036040811015610abe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612e76565b005b610b2260048036036020811015610b0c57600080fd5b8101908080359060200190929190505050613094565b005b610b6660048036036020811015610b3a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613147565b60405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6060806060600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636cfa387390916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b158015610c4757600080fd5b505af4158015610c5b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506060811015610c8557600080fd5b8101908080516040519392919084640100000000821115610ca557600080fd5b83820191506020820185811115610cbb57600080fd5b8251866020820283011164010000000082111715610cd857600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610d0f578082015181840152602081019050610cf4565b5050505090500160405260200180516040519392919084640100000000821115610d3857600080fd5b83820191506020820185811115610d4e57600080fd5b8251866020820283011164010000000082111715610d6b57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610da2578082015181840152602081019050610d87565b5050505090500160405260200180516040519392919084640100000000821115610dcb57600080fd5b83820191506020820185811115610de157600080fd5b8251866020820283011164010000000082111715610dfe57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610e35578082015181840152602081019050610e1a565b505050509050016040525050509250925092509193909250565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ee057600080fd5b505af4158015610ef4573d6000803e3d6000fd5b505050506040513d6020811015610f0a57600080fd5b81019080805190602001909291905050509050919050565b600060149054906101000a900460ff1681565b60066020528060005260406000206000915090505481565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60055481565b610f8a612258565b610ffc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156110665750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156110b3575080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050115b801561115e57508173ffffffffffffffffffffffffffffffffffffffff16600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061111b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6111b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526056815260200180613dc46056913960600191505060405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206112dd6001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506133fb90919063ffffffff16565b815481106112e757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061135c57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113fa6001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506133fb90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816114449190613d18565b5061144f8383613445565b1561145f5761145e8383613653565b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6dc84b66cc948d847632b9d829f7cb1cb904fbf2c084554a9bc22ad9d845334060405160405180910390a3505050565b600080600080600180600280839350829250819150809050935093509350935090919293565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561157557600080fd5b505af4158015611589573d6000803e3d6000fd5b505050506040513d602081101561159f57600080fd5b81019080805190602001909291905050509050919050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561160a57600554905061164d565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b61165a612258565b6116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b83600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661186b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613e746027913960400191505060405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156118fc57600080fd5b505af4158015611910573d6000803e3d6000fd5b505050506040513d602081101561192657600080fd5b81019080805190602001909291905050509050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156119fc57600080fd5b505af4158015611a10573d6000803e3d6000fd5b505050506040513d6020811015611a2657600080fd5b810190808051906020019092919050505015611c6757600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63832a21479091338888886040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611b6f57600080fd5b505af4158015611b83573d6000803e3d6000fd5b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611c4a57600080fd5b505af4158015611c5e573d6000803e3d6000fd5b50505050611db3565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d4a092729091338888886040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611d9a57600080fd5b505af4158015611dae573d6000803e3d6000fd5b505050505b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d4a0927290913342600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____630944c59490916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611e9f57600080fd5b505af4158015611eb3573d6000803e3d6000fd5b505050506040513d6020811015611ec957600080fd5b810190808051906020019092919050505060006040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611fb057600080fd5b505af4158015611fc4573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f7cebb17173a9ed273d2b7538f64395c0ebf352ff743f1cf8ce66b437a61442134288604051808381526020018281526020019250505060405180910390a36000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156120c657600080fd5b505af41580156120da573d6000803e3d6000fd5b505050506040513d60208110156120f057600080fd5b81019080805190602001909291905050509050818114612159578673ffffffffffffffffffffffffffffffffffffffff167fa9981ebfc3b766a742486e898f54959b050a66006dbce1a4155c1f84a08bcf41826040518082815260200191505060405180910390a25b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561224c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612202575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661229a613a84565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600460205281600052604060002081815481106122cf57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060806060600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636cfa387390916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561239557600080fd5b505af41580156123a9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060608110156123d357600080fd5b81019080805160405193929190846401000000008211156123f357600080fd5b8382019150602082018581111561240957600080fd5b825186602082028301116401000000008211171561242657600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561245d578082015181840152602081019050612442565b505050509050016040526020018051604051939291908464010000000082111561248657600080fd5b8382019150602082018581111561249c57600080fd5b82518660208202830111640100000000821117156124b957600080fd5b8083526020830192505050908051906020019060200280838360005b838110156124f05780820151818401526020810190506124d5565b505050509050016040526020018051604051939291908464010000000082111561251957600080fd5b8382019150602082018581111561252f57600080fd5b825186602082028301116401000000008211171561254c57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612583578082015181840152602081019050612568565b505050509050016040525050509250925092509193909250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561262e57600080fd5b505af4158015612642573d6000803e3d6000fd5b505050506040513d602081101561265857600080fd5b81019080805190602001909291905050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156127755750600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561273757600080fd5b505af415801561274b573d6000803e3d6000fd5b505050506040513d602081101561276157600080fd5b810190808051906020019092919050505081105b6127ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180613d906034913960400191505060405180910390fd5b60008090505b81811015612821576000806127e485613147565b9150915081156127fd576127f88582613653565b612804565b5050612821565b505061281a600182613a8c90919063ffffffff16565b90506127d0565b505050565b61282e612258565b6128a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600081116128f9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613ee56021913960400191505060405180910390fd5b600554811415612954576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613ec36022913960400191505060405180910390fd5b806005819055507fc68a9b88effd8a11611ff410efbc83569f0031b7bc70dd455b61344c7f0a042f816040518082815260200191505060405180910390a150565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612a2757600080fd5b505af4158015612a3b573d6000803e3d6000fd5b505050506040513d6020811015612a5157600080fd5b81019080805190602001909291905050506000612a6d8561259d565b14612a825769d3c21bcecceda1000000612a85565b60005b91509150915091565b612a96612258565b612b08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612b725750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612c055750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b612c5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252605a815260200180613e1a605a913960600191505060405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f828d2be040dede7698182e08dfa8bfbd663c879aee772509c4a2bd961d0ed43f60405160405180910390a35050565b612df8612258565b612e6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612e7381613b14565b50565b612e7e612258565b612ef0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008111612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613ee56021913960400191505060405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811415612fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613e9b6028913960400191505060405180910390fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff8324c8592dfd9991ee3e717351afe0a964605257959e3d99b0eb3d45bff94228282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600060149054906101000a900460ff1615613117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff02191690831515021790555061313b33613b14565b61314481612826565b50565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156131ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f746f6b656e20616464726573732063616e6e6f74206265206e756c6c0000000081525060200191505060405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d938ec7b90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561327e57600080fd5b505af4158015613292573d6000803e3d6000fd5b505050506040513d60208110156132a857600080fd5b810190808051906020019092919050505090506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____637c6bb8629091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561338057600080fd5b505af4158015613394573d6000803e3d6000fd5b505050506040513d60208110156133aa57600080fd5b810190808051906020019092919050505090506133c6856115b7565b6133d982426133fb90919063ffffffff16565b106133ec576001829350935050506133f6565b6000829350935050505b915091565b600061343d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613c58565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561350a57600080fd5b505af415801561351e573d6000803e3d6000fd5b505050506040513d602081101561353457600080fd5b8101908080519060200190929190505050801561364b5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561360f57600080fd5b505af4158015613623573d6000803e3d6000fd5b505050506040513d602081101561363957600080fd5b81019080805190602001909291905050505b905092915050565b600161365e836114e4565b14801561367157506136708282613445565b5b1561367b57613a80565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561370c57600080fd5b505af4158015613720573d6000803e3d6000fd5b505050506040513d602081101561373657600080fd5b81019080805190602001909291905050509050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561380c57600080fd5b505af4158015613820573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156138e757600080fd5b505af41580156138fb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe21a44017b6fa1658d84e937d56ff408501facdb4ff7427c479ac460d76f789360405160405180910390a36000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156139ea57600080fd5b505af41580156139fe573d6000803e3d6000fd5b505050506040513d6020811015613a1457600080fd5b81019080805190602001909291905050509050818114613a7d578373ffffffffffffffffffffffffffffffffffffffff167fa9981ebfc3b766a742486e898f54959b050a66006dbce1a4155c1f84a08bcf41826040518082815260200191505060405180910390a25b50505b5050565b600033905090565b600080828401905083811015613b0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613d6a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000838311158290613d05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613cca578082015181840152602081019050613caf565b50505050905090810190601f168015613cf75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b815481835581811115613d3f57818360005260206000209182019101613d3e9190613d44565b5b505050565b613d6691905b80821115613d62576000816000905550600101613d4a565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e2061646472206e756c6c206f7220747279696e6720746f2072656d6f766520746f6f206d616e79207265706f727473746f6b656e2061646472206e756c6c206f72206f7261636c652061646472206e756c6c206f7220696e646578206f6620746f6b656e206f7261636c65206e6f74206d617070656420746f206f7261636c652061646472746f6b656e206164647220776173206e756c6c206f72206f7261636c65206164647220776173206e756c6c206f72206f7261636c652061646472206973206e6f7420616e206f7261636c6520666f7220746f6b656e206164647273656e64657220776173206e6f7420616e206f7261636c6520666f7220746f6b656e2061646472746f6b656e207265706f72744578706972795365636f6e6473206861736e2774206368616e6765647265706f72744578706972795365636f6e6473206861736e2774206368616e6765647265706f727420657870697279207365636f6e6473206d757374206265203e2030a265627a7a72315820849253f5235f59f72c6f188eb06e1d5b61c0bf283d179bf6a9ddf924fe23f4c564736f6c634300050d0032",
  "sourceMap": "562:13364:156:-;;;2905:52;8:9:-1;5:2;;;30:1;27;20:12;5:2;2905:52:156;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2905:52:156;;;;;;;;;;;;;;;;2949:4;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;185:17:24;180:57;;226:4;212:11;;:18;;;;;;;;;;;;;;;;;;180:57;131:110;2905:52:156;562:13364;;788:96:0;833:15;867:10;860:17;;788:96;:::o;562:13364:156:-;;;;;;;",
  "deployedSourceMap": "562:13364:156:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;562:13364:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10432:202;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10432:202:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10432:202:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10432:202:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10432:202:156;;;;;;;;;;;;;;;;;;;;;11185:124;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11185:124:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;103:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1637:59:156;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1637:59:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1149:60;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1149:60:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1599:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5264:687;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5264:687:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2639:117;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10857:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10857:120:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12859:220;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12859:220:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1684:137:4;;;:::i;:::-;;7856:1436:156;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7856:1436:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12571:108:156;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12571:108:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12571:108:156;;;;;;;;;;;;;;;;;1250:92:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1213:44:156;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1213:44:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11737:212;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11737:212:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11737:212:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11737:212:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11737:212:156;;;;;;;;;;;;;;;;;;;;;9507:110;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9507:110:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6205:456;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6205:456:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3475:345;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3475:345:156;;;;;;;;;;;;;;;;;:::i;:::-;;9839:165;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9839:165:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;4628:420;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4628:420:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;4052:431:156;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4052:431:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3163:155;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3163:155:156;;;;;;;;;;;;;;;;;:::i;:::-;;6886:444;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6886:444:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10432:202;10500:16;10518;10536:50;10603:5;:12;10609:5;10603:12;;;;;;;;;;;;;;;:24;;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10603:26:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10603:26:156;;;;;;39:16:-1;36:1;17:17;2:54;10603:26:156;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10603:26:156;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;10603:26:156;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10603:26:156;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;10603:26:156;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10603:26:156;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;10603:26:156;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10603:26:156;;;;;;;;;;;10596:33;;;;;;10432:202;;;;;:::o;11185:124::-;11248:7;11270:10;:17;11281:5;11270:17;;;;;;;;;;;;;;;:32;;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11270:34:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11270:34:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11270:34:156;;;;;;;;;;;;;;;;11263:41;;11185:124;;;:::o;103:23:24:-;;;;;;;;;;;;;:::o;1637:59:156:-;;;;;;;;;;;;;;;;;:::o;1149:60::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1599:34::-;;;;:::o;5264:687::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5396:1:156;5379:19;;:5;:19;;;;:58;;;;;5435:1;5410:27;;:13;:27;;;;5379:58;:99;;;;;5473:5;5449:7;:14;5457:5;5449:14;;;;;;;;;;;;;;;:21;;;;:29;5379:99;:149;;;;;5515:13;5490:38;;:7;:14;5498:5;5490:14;;;;;;;;;;;;;;;5505:5;5490:21;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;5379:149;5364:266;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5669:5;5636:8;:15;5645:5;5636:15;;;;;;;;;;;;;;;:30;5652:13;5636:30;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;5704:7;:14;5712:5;5704:14;;;;;;;;;;;;;;;5719:28;5745:1;5719:7;:14;5727:5;5719:14;;;;;;;;;;;;;;;:21;;;;:25;;:28;;;;:::i;:::-;5704:44;;;;;;;;;;;;;;;;;;;;;;;;;5680:7;:14;5688:5;5680:14;;;;;;;;;;;;;;;5695:5;5680:21;;;;;;;;;;;;;;;;:68;;;;;;;;;;;;;;;;;;5778:28;5804:1;5778:7;:14;5786:5;5778:14;;;;;;;;;;;;;;;:21;;;;:25;;:28;;;;:::i;:::-;5754:7;:14;5762:5;5754:14;;;;;;;;;;;;;;;:52;;;;;:::i;:::-;;5816:34;5829:5;5836:13;5816:12;:34::i;:::-;5812:89;;;5860:34;5873:5;5880:13;5860:12;:34::i;:::-;5812:89;5932:13;5911:35;;5925:5;5911:35;;;;;;;;;;;;5264:687;;;:::o;2639:117::-;2690:7;2699;2708;2717;2740:1;2743;2746;2749;2732:19;;;;;;;;;;;;;;;;;;;;2639:117;;;;:::o;10857:120::-;10916:7;10938:10;:17;10949:5;10938:17;;;;;;;;;;;;;;;:32;;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10938:34:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10938:34:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10938:34:156;;;;;;;;;;;;;;;;10931:41;;10857:120;;;:::o;12859:220::-;12932:7;12986:1;12951:24;:31;12976:5;12951:31;;;;;;;;;;;;;;;;:36;12947:83;;;13004:19;;12997:26;;;;12947:83;13043:24;:31;13068:5;13043:31;;;;;;;;;;;;;;;;13036:38;;12859:220;;;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;7856:1436:156:-;7969:5;2279:8;:15;2288:5;2279:15;;;;;;;;;;;;;;;:27;2295:10;2279:27;;;;;;;;;;;;;;;;;;;;;;;;;2271:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7984:22;8009:5;:12;8015:5;8009:12;;;;;;;;;;;;;;;:27;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8009:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8009:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8009:29:156;;;;;;;;;;;;;;;;7984:54;;8048:5;:12;8054:5;8048:12;;;;;;;;;;;;;;;:21;;;;8070:10;8048:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8048:33:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8048:33:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8048:33:156;;;;;;;;;;;;;;;;8044:874;;;8091:5;:12;8097:5;8091:12;;;;;;;;;;;;;;;:19;;;;8111:10;8123:5;8130:9;8141:10;8091:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8091:61:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8091:61:156;;;;8793:10;:17;8804:5;8793:17;;;;;;;;;;;;;;;:24;;;;8818:10;8793:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8793:36:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8793:36:156;;;;8044:874;;;8850:5;:12;8856:5;8850:12;;;;;;;;;;;;;;;:19;;;;8870:10;8882:5;8889:9;8900:10;8850:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8850:61:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8850:61:156;;;;8044:874;8923:10;:17;8934:5;8923:17;;;;;;;;;;;;;;;:24;;;;8955:10;9025:3;9036:10;:17;9047:5;9036:17;;;;;;;;;;;;;;;:25;;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9036:27:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9036:27:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9036:27:156;;;;;;;;;;;;;;;;9079:1;8923:164;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8923:164:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8923:164:156;;;;9120:10;9098:45;;9113:5;9098:45;;;9132:3;9137:5;9098:45;;;;;;;;;;;;;;;;;;;;;;;;9149:17;9169:5;:12;9175:5;9169:12;;;;;;;;;;;;;;;:27;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9169:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9169:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9169:29:156;;;;;;;;;;;;;;;;9149:49;;9221:14;9208:9;:27;9204:84;;9264:5;9250:31;;;9271:9;9250:31;;;;;;;;;;;;;;;;;;9204:84;2356:1;;7856:1436;;;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;12571:108:156:-;12629:16;12660:7;:14;12668:5;12660:14;;;;;;;;;;;;;;;12653:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12571:108;;;:::o;1250:92:4:-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;1213:44:156:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;11737:212::-;11810:16;11828;11846:50;11913:10;:17;11924:5;11913:17;;;;;;;;;;;;;;;:29;;;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11913:31:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11913:31:156;;;;;;39:16:-1;36:1;17:17;2:54;11913:31:156;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11913:31:156;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;11913:31:156;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11913:31:156;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;11913:31:156;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11913:31:156;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;11913:31:156;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11913:31:156;;;;;;;;;;;11906:38;;;;;;11737:212;;;;;:::o;9507:110::-;9561:7;9583:5;:12;9589:5;9583:12;;;;;;;;;;;;;;;:27;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9583:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9583:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9583:29:156;;;;;;;;;;;;;;;;9576:36;;9507:110;;;:::o;6205:456::-;6308:1;6291:19;;:5;:19;;;;:61;;;;;6318:10;:17;6329:5;6318:17;;;;;;;;;;;;;;;:32;;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6318:34:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6318:34:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6318:34:156;;;;;;;;;;;;;;;;6314:1;:38;6291:61;6276:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6431:9;6443:1;6431:13;;6426:231;6450:1;6446;:5;6426:231;;;6476:14;6492:21;6517:28;6539:5;6517:21;:28::i;:::-;6475:70;;;;6557:9;6553:98;;;6578:34;6591:5;6598:13;6578:12;:34::i;:::-;6553:98;;;6637:5;;;;6553:98;6426:231;;6457:8;6463:1;6457;:5;;:8;;;;:::i;:::-;6453:12;;6426:231;;;;6205:456;;:::o;3475:345::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3584:1:156;3561:20;:24;3553:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3661:19;;3637:20;:43;;3629:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3747:20;3725:19;:42;;;;3778:37;3794:20;3778:37;;;;;;;;;;;;;;;;;;3475:345;:::o;9839:165::-;9897:7;9906;9929:5;:12;9935:5;9929:12;;;;;;;;;;;;;;;:27;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9929:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9929:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9929:29:156;;;;;;;;;;;;;;;;9979:1;9960:15;9969:5;9960:8;:15::i;:::-;:20;:38;;850:25;9960:38;;;9983:1;9960:38;9921:78;;;;9839:165;;;:::o;4628:420::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4742:1:156;4725:19;;:5;:19;;;;:50;;;;;4773:1;4748:27;;:13;:27;;;;4725:50;:85;;;;;4780:8;:15;4789:5;4780:15;;;;;;;;;;;;;;;:30;4796:13;4780:30;;;;;;;;;;;;;;;;;;;;;;;;;4779:31;4725:85;4710:206;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4955:4;4922:8;:15;4931:5;4922:15;;;;;;;;;;;;;;;:30;4938:13;4922:30;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;4965:7;:14;4973:5;4965:14;;;;;;;;;;;;;;;4985:13;4965:34;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;4965:34:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5029:13;5010:33;;5022:5;5010:33;;;;;;;;;;;;4628:420;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;4052:431:156:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4184:1:156;4161:20;:24;4153:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4268:24;:32;4293:6;4268:32;;;;;;;;;;;;;;;;4244:20;:56;;4229:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4397:20;4362:24;:32;4387:6;4362:32;;;;;;;;;;;;;;;:55;;;;4428:50;4449:6;4457:20;4428:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;4052:431;;:::o;3163:155::-;283:11:24;;;;;;;;;;;282:12;274:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:4;333:11;;:18;;;;;;;;;;;;;;;;;;3240:30:156;3259:10;3240:18;:30::i;:::-;3276:37;3292:20;3276:15;:37::i;:::-;3163:155;:::o;6886:444::-;6953:4;6959:7;6999:1;6982:19;;:5;:19;;;;6974:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7040:14;7057:10;:17;7068:5;7057:17;;;;;;;;;;;;;;;:25;;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7057:27:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7057:27:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7057:27:156;;;;;;;;;;;;;;;;7040:44;;7090:17;7110:10;:17;7121:5;7110:17;;;;;;;;;;;;;;;:26;;;;7137:6;7110:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7110:34:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7110:34:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7110:34:156;;;;;;;;;;;;;;;;7090:54;;7226:34;7254:5;7226:27;:34::i;:::-;7204:18;7212:9;7204:3;:7;;:18;;;;:::i;:::-;:56;7200:98;;7278:4;7284:6;7270:21;;;;;;;;7200:98;7311:5;7318:6;7303:22;;;;;;6886:444;;;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;12189:167:156:-;12265:4;12284:5;:12;12290:5;12284:12;;;;;;;;;;;;;;;:21;;;;12306:6;12284:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12284:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12284:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12284:29:156;;;;;;;;;;;;;;;;:67;;;;;12317:10;:17;12328:5;12317:17;;;;;;;;;;;;;;;:26;;;;12344:6;12317:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12317:34:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12317:34:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12317:34:156;;;;;;;;;;;;;;;;12284:67;12277:74;;12189:167;;;;:::o;13464:460::-;13559:1;13535:20;13549:5;13535:13;:20::i;:::-;:25;:56;;;;;13564:27;13577:5;13584:6;13564:12;:27::i;:::-;13535:56;13531:69;;;13593:7;;13531:69;13605:22;13630:5;:12;13636:5;13630:12;;;;;;;;;;;;;;;:27;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13630:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13630:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13630:29:156;;;;;;;;;;;;;;;;13605:54;;13665:5;:12;13671:5;13665:12;;;;;;;;;;;;;;;:19;;;;13685:6;13665:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13665:27:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13665:27:156;;;;13698:10;:17;13709:5;13698:17;;;;;;;;;;;;;;;:24;;;;13723:6;13698:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13698:32:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13698:32:156;;;;13768:6;13741:34;;13761:5;13741:34;;;;;;;;;;;;13781:17;13801:5;:12;13807:5;13801:12;;;;;;;;;;;;;;;:27;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13801:29:156;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13801:29:156;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13801:29:156;;;;;;;;;;;;;;;;13781:49;;13853:14;13840:9;:27;13836:84;;13896:5;13882:31;;;13903:9;13882:31;;;;;;;;;;;;;;;;;;13836:84;13464:460;;;;;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;834:176:3:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;1732:187:3:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;562:13364:156:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-11-17T13:39:54.611Z"
}