// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AlertBanner when an action is provided it dispatches the action when pressed 1`] = `
<View
  style={
    Object {
      "overflow": "hidden",
    }
  }
  testID="infoBanner"
>
  <View
    accessible={true}
    focusable={true}
    forwardedRef={[Function]}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#0768AE",
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingHorizontal": 25,
        "paddingTop": 10,
        "transform": Array [
          Object {
            "translateY": -500,
          },
        ],
      }
    }
    testID="SmartTopAlertTouchable"
  >
    <Text
      style={
        Array [
          Object {
            "color": "#2E3338",
            "fontFamily": "Inter-Regular",
            "fontSize": 14,
            "lineHeight": 18,
          },
          false,
          Object {
            "color": "white",
            "lineHeight": undefined,
            "textAlign": "center",
          },
        ]
      }
    >
      My message
    </Text>
  </View>
</View>
`;

exports[`AlertBanner when error message passed in renders error message 1`] = `
<View
  style={
    Object {
      "overflow": "hidden",
    }
  }
  testID="errorBanner"
>
  <View
    accessible={true}
    focusable={true}
    forwardedRef={[Function]}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#EA6042",
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingHorizontal": 25,
        "paddingTop": 10,
        "transform": Array [
          Object {
            "translateY": -500,
          },
        ],
      }
    }
    testID="SmartTopAlertTouchable"
  >
    <View
      style={
        Object {
          "marginLeft": 5,
          "marginRight": 8,
        }
      }
      testID="ErrorIcon"
    >
      <svg
        fill="none"
        height={16}
        style={Object {}}
        viewBox="0 0 16 16"
        width={16}
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          clipRule="evenodd"
          d="M10.1569 4.75L11.2175 5.81066L8.97834 8.04984L11.3354 10.4069L10.2747 11.4675L7.91768 9.1105L5.56066 11.4675L4.5 10.4069L6.85702 8.04984L4.61785 5.81067L5.67851 4.75001L7.91768 6.98918L10.1569 4.75Z"
          fill="#FFFFFF"
          fillRule="evenodd"
          style={Object {}}
        />
        <circle
          cx="8"
          cy="8"
          r="6.5"
          stroke="white"
          style={Object {}}
        />
      </svg>
    </View>
    <Text
      style={
        Array [
          Object {
            "color": "#2E3338",
            "fontFamily": "Inter-Regular",
            "fontSize": 14,
            "lineHeight": 18,
          },
          Object {
            "color": "#2E3338",
            "fontFamily": "Inter-Medium",
            "fontSize": 14,
            "lineHeight": 18,
          },
          Object {
            "color": "white",
            "lineHeight": undefined,
            "textAlign": "center",
          },
        ]
      }
    >
      This is an error
    </Text>
  </View>
</View>
`;

exports[`AlertBanner when message and title passed in renders title with message 1`] = `
<View
  style={
    Object {
      "overflow": "hidden",
    }
  }
  testID="infoBanner"
>
  <View
    accessible={true}
    focusable={true}
    forwardedRef={[Function]}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#0768AE",
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingHorizontal": 25,
        "paddingTop": 10,
        "transform": Array [
          Object {
            "translateY": -500,
          },
        ],
      }
    }
    testID="SmartTopAlertTouchable"
  >
    <Text
      style={
        Array [
          Object {
            "color": "#2E3338",
            "fontFamily": "Inter-Regular",
            "fontSize": 14,
            "lineHeight": 18,
          },
          false,
          Object {
            "color": "white",
            "lineHeight": undefined,
            "textAlign": "center",
          },
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#2E3338",
              "fontFamily": "Inter-Medium",
              "fontSize": 14,
              "lineHeight": 18,
            },
            Object {
              "color": "white",
              "lineHeight": undefined,
              "textAlign": "center",
            },
          ]
        }
      >
         
        Declaration
         
      </Text>
      This is your shadow speaking
    </Text>
  </View>
</View>
`;

exports[`AlertBanner when message passed in renders message 1`] = `
<View
  style={
    Object {
      "overflow": "hidden",
    }
  }
  testID="infoBanner"
>
  <View
    accessible={true}
    focusable={true}
    forwardedRef={[Function]}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#0768AE",
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingHorizontal": 25,
        "paddingTop": 10,
        "transform": Array [
          Object {
            "translateY": -500,
          },
        ],
      }
    }
    testID="SmartTopAlertTouchable"
  >
    <Text
      style={
        Array [
          Object {
            "color": "#2E3338",
            "fontFamily": "Inter-Regular",
            "fontSize": 14,
            "lineHeight": 18,
          },
          false,
          Object {
            "color": "white",
            "lineHeight": undefined,
            "textAlign": "center",
          },
        ]
      }
    >
      This is your shadow speaking
    </Text>
  </View>
</View>
`;
