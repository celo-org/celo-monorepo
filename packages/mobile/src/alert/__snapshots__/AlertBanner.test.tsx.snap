// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AlertBanner when error message passed in renders error message 1`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#FD785B",
        "height": 36,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "opacity": 1,
          "paddingHorizontal": 25,
        }
      }
    >
      <View
        style={
          Object {
            "marginHorizontal": 5,
          }
        }
      >
        <svg
          fill="none"
          height="16"
          style={Object {}}
          viewBox="0 0 16 16"
          width="16"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            clipRule="evenodd"
            d="M10.1569 4.75L11.2175 5.81066L8.97834 8.04984L11.3354 10.4069L10.2747 11.4675L7.91768 9.1105L5.56066 11.4675L4.5 10.4069L6.85702 8.04984L4.61785 5.81067L5.67851 4.75001L7.91768 6.98918L10.1569 4.75Z"
            fill="#FFFFFF"
            fillRule="evenodd"
            style={Object {}}
          />
          <circle
            cx="8"
            cy="8"
            r="6.5"
            stroke="white"
            style={Object {}}
          />
        </svg>
      </View>
      <Text
        numberOfLines={1}
        style={
          Array [
            Object {
              "color": "#2E3338",
              "fontFamily": "Hind-Regular",
              "fontSize": 14,
              "lineHeight": 18,
            },
            Object {
              "color": "white",
              "lineHeight": 20,
              "textAlign": "center",
            },
            Object {
              "fontFamily": "Hind-SemiBold",
            },
          ]
        }
      >
        This is an error
      </Text>
    </View>
  </View>
</View>
`;

exports[`AlertBanner when message and title passed in renders title with message 1`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#3C9BF4",
        "height": 36,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "opacity": 1,
          "paddingHorizontal": 25,
        }
      }
    >
      <Text
        numberOfLines={1}
        style={
          Array [
            Object {
              "color": "#2E3338",
              "fontFamily": "Hind-Regular",
              "fontSize": 14,
              "lineHeight": 18,
            },
            Object {
              "color": "white",
              "lineHeight": 20,
              "textAlign": "center",
            },
            false,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "white",
                "lineHeight": 20,
                "textAlign": "center",
              },
              Object {
                "fontFamily": "Hind-SemiBold",
              },
            ]
          }
        >
           
          Declaration
           
        </Text>
        This is your shadow speaking
      </Text>
    </View>
  </View>
</View>
`;

exports[`AlertBanner when message passed in renders message 1`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#3C9BF4",
        "height": 36,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "opacity": 1,
          "paddingHorizontal": 25,
        }
      }
    >
      <Text
        numberOfLines={1}
        style={
          Array [
            Object {
              "color": "#2E3338",
              "fontFamily": "Hind-Regular",
              "fontSize": 14,
              "lineHeight": 18,
            },
            Object {
              "color": "white",
              "lineHeight": 20,
              "textAlign": "center",
            },
            false,
          ]
        }
      >
        This is your shadow speaking
      </Text>
    </View>
  </View>
</View>
`;
