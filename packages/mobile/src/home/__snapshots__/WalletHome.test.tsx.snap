// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testnet banner Renders when connected with backup complete 1`] = `
<RNCSafeAreaView
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
      "position": "relative",
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderBottomColor": AnimatedValue {
          " __value": NaN,
        },
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "height": 62,
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "marginBottom": 0,
          "marginLeft": 4,
          "opacity": 1,
          "padding": 8,
        }
      }
    >
      <svg
        fill="none"
        height="32"
        viewBox="0 0 32 32"
        width="32"
      >
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="9.75"
          y2="9.75"
        />
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="15.75"
          y2="15.75"
        />
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="21.75"
          y2="21.75"
        />
      </svg>
    </View>
    <svg
      fill="none"
      height={32}
      viewBox="0 0 32 32"
      width={32}
    >
      <g
        filter="url(#prefix__filter0_d)"
      >
        <path
          d="M18.39 26.77c1.072-8.36 5.002-13.12 10.943-17.434l-3.037-4.003c-3.886 2.98-8.13 7.205-10.095 13.032-1.608-4.76-4.958-8.94-10.363-13.032L2.667 9.425C9.41 14.228 12.807 19.61 13.744 26.77h4.646z"
          fill="url(#prefix__paint0_linear)"
        />
      </g>
      <defs>
        <linearGradient
          gradientUnits="userSpaceOnUse"
          id="prefix__paint0_linear"
          x1={34.337}
          x2={28.937}
          y1={10.054}
          y2={30.49}
        >
          <stop
            offset={0.118}
            stopColor="#35D07F"
          />
          <stop
            offset={0.802}
            stopColor="#FBCC5C"
          />
        </linearGradient>
      </defs>
    </svg>
    <View
      style={
        Object {
          "width": 45,
        }
      }
    />
  </View>
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            Object {},
          ],
          "renderItem": [Function],
          "title": "activity",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        colors={
          Array [
            "#42D689",
          ]
        }
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={16}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
        "position": "relative",
      }
    }
    updateCellsBatchingPeriod={50}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#FFFFFF",
                "flexDirection": "row",
                "justifyContent": "space-between",
                "paddingHorizontal": 16,
                "paddingVertical": 8,
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Object {
                "color": "#9CA4A9",
                "fontFamily": "Inter-Medium",
                "fontSize": 13,
                "lineHeight": 16,
              }
            }
          >
            activity
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderTopColor": "#EDEEEF",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "paddingHorizontal": 16,
        "paddingVertical": 12,
      }
    }
    testID="SendOrRequestBar"
  >
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Object {
            "flex": 1,
            "flexDirection": "column",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 100,
            },
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            Object {
              "attribute": "selectableItemBackground",
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1AB775",
              "height": 40,
              "justifyContent": "center",
              "minWidth": 120,
              "opacity": undefined,
              "paddingHorizontal": 16,
              "paddingVertical": 5,
            }
          }
          testID="SendOrRequestBar/SendButton"
        >
          <Text
            style={
              Object {
                "color": "#FFFFFF",
                "fontFamily": "Inter-SemiBold",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            send
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Array [
            Object {
              "flex": 1,
              "flexDirection": "column",
            },
            Object {
              "marginHorizontal": 12,
            },
          ],
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 100,
            },
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            Object {
              "attribute": "selectableItemBackground",
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1AB775",
              "height": 40,
              "justifyContent": "center",
              "minWidth": 120,
              "opacity": undefined,
              "paddingHorizontal": 16,
              "paddingVertical": 5,
            }
          }
          testID="SendOrRequestBar/RequestButton"
        >
          <Text
            style={
              Object {
                "color": "#FFFFFF",
                "fontFamily": "Inter-SemiBold",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            paymentRequestFlow:request
          </Text>
        </View>
      </View>
    </View>
    <View
      accessible={true}
      focusable={true}
      nativeBackgroundAndroid={
        Object {
          "attribute": "selectableItemBackgroundBorderless",
          "type": "ThemeAttrAndroid",
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <svg
        fill="none"
        height={32}
        style={Object {}}
        viewBox="0 0 32 32"
        width={32}
      >
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={4}
          y={4}
        />
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={18}
          y={4}
        />
        <path
          d="M18 25v1a2 2 0 002 2h1M28 21v-1a2 2 0 00-2-2h-1M21 18h-1a2 2 0 00-2 2v1M25 28h1a2 2 0 002-2v-1"
          stroke="#1AB775"
          strokeLinecap="round"
          strokeWidth={2.75}
          style={Object {}}
        />
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={4}
          y={18}
        />
      </svg>
    </View>
  </View>
</RNCSafeAreaView>
`;

exports[`Testnet banner Renders when disconnected 1`] = `
<RNCSafeAreaView
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
      "position": "relative",
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderBottomColor": AnimatedValue {
          " __value": NaN,
        },
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "height": 62,
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "marginBottom": 0,
          "marginLeft": 4,
          "opacity": 1,
          "padding": 8,
        }
      }
    >
      <svg
        fill="none"
        height="32"
        viewBox="0 0 32 32"
        width="32"
      >
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="9.75"
          y2="9.75"
        />
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="15.75"
          y2="15.75"
        />
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="21.75"
          y2="21.75"
        />
      </svg>
    </View>
    <svg
      fill="none"
      height={32}
      viewBox="0 0 32 32"
      width={32}
    >
      <g
        filter="url(#prefix__filter0_d)"
      >
        <path
          d="M18.39 26.77c1.072-8.36 5.002-13.12 10.943-17.434l-3.037-4.003c-3.886 2.98-8.13 7.205-10.095 13.032-1.608-4.76-4.958-8.94-10.363-13.032L2.667 9.425C9.41 14.228 12.807 19.61 13.744 26.77h4.646z"
          fill="url(#prefix__paint0_linear)"
        />
      </g>
      <defs>
        <linearGradient
          gradientUnits="userSpaceOnUse"
          id="prefix__paint0_linear"
          x1={34.337}
          x2={28.937}
          y1={10.054}
          y2={30.49}
        >
          <stop
            offset={0.118}
            stopColor="#35D07F"
          />
          <stop
            offset={0.802}
            stopColor="#FBCC5C"
          />
        </linearGradient>
      </defs>
    </svg>
    <View
      style={
        Object {
          "width": 45,
        }
      }
    />
  </View>
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            Object {},
          ],
          "renderItem": [Function],
          "title": "activity",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        colors={
          Array [
            "#42D689",
          ]
        }
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={16}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
        "position": "relative",
      }
    }
    updateCellsBatchingPeriod={50}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#FFFFFF",
                "flexDirection": "row",
                "justifyContent": "space-between",
                "paddingHorizontal": 16,
                "paddingVertical": 8,
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Object {
                "color": "#9CA4A9",
                "fontFamily": "Inter-Medium",
                "fontSize": 13,
                "lineHeight": 16,
              }
            }
          >
            activity
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderTopColor": "#EDEEEF",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "paddingHorizontal": 16,
        "paddingVertical": 12,
      }
    }
    testID="SendOrRequestBar"
  >
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Object {
            "flex": 1,
            "flexDirection": "column",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 100,
            },
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            Object {
              "attribute": "selectableItemBackground",
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1AB775",
              "height": 40,
              "justifyContent": "center",
              "minWidth": 120,
              "opacity": undefined,
              "paddingHorizontal": 16,
              "paddingVertical": 5,
            }
          }
          testID="SendOrRequestBar/SendButton"
        >
          <Text
            style={
              Object {
                "color": "#FFFFFF",
                "fontFamily": "Inter-SemiBold",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            send
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Array [
            Object {
              "flex": 1,
              "flexDirection": "column",
            },
            Object {
              "marginHorizontal": 12,
            },
          ],
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 100,
            },
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            Object {
              "attribute": "selectableItemBackground",
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1AB775",
              "height": 40,
              "justifyContent": "center",
              "minWidth": 120,
              "opacity": undefined,
              "paddingHorizontal": 16,
              "paddingVertical": 5,
            }
          }
          testID="SendOrRequestBar/RequestButton"
        >
          <Text
            style={
              Object {
                "color": "#FFFFFF",
                "fontFamily": "Inter-SemiBold",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            paymentRequestFlow:request
          </Text>
        </View>
      </View>
    </View>
    <View
      accessible={true}
      focusable={true}
      nativeBackgroundAndroid={
        Object {
          "attribute": "selectableItemBackgroundBorderless",
          "type": "ThemeAttrAndroid",
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <svg
        fill="none"
        height={32}
        style={Object {}}
        viewBox="0 0 32 32"
        width={32}
      >
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={4}
          y={4}
        />
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={18}
          y={4}
        />
        <path
          d="M18 25v1a2 2 0 002 2h1M28 21v-1a2 2 0 00-2-2h-1M21 18h-1a2 2 0 00-2 2v1M25 28h1a2 2 0 002-2v-1"
          stroke="#1AB775"
          strokeLinecap="round"
          strokeWidth={2.75}
          style={Object {}}
        />
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={4}
          y={18}
        />
      </svg>
    </View>
  </View>
</RNCSafeAreaView>
`;

exports[`Testnet banner Shows testnet banner for 5 seconds 1`] = `
<RNCSafeAreaView
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
      "position": "relative",
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderBottomColor": AnimatedValue {
          " __value": NaN,
        },
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "height": 62,
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "marginBottom": 0,
          "marginLeft": 4,
          "opacity": 1,
          "padding": 8,
        }
      }
    >
      <svg
        fill="none"
        height="32"
        viewBox="0 0 32 32"
        width="32"
      >
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="9.75"
          y2="9.75"
        />
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="15.75"
          y2="15.75"
        />
        <line
          stroke="#2E3338"
          strokeLinecap="round"
          strokeWidth="2.5"
          x1="7.25"
          x2="24.75"
          y1="21.75"
          y2="21.75"
        />
      </svg>
    </View>
    <svg
      fill="none"
      height={32}
      viewBox="0 0 32 32"
      width={32}
    >
      <g
        filter="url(#prefix__filter0_d)"
      >
        <path
          d="M18.39 26.77c1.072-8.36 5.002-13.12 10.943-17.434l-3.037-4.003c-3.886 2.98-8.13 7.205-10.095 13.032-1.608-4.76-4.958-8.94-10.363-13.032L2.667 9.425C9.41 14.228 12.807 19.61 13.744 26.77h4.646z"
          fill="url(#prefix__paint0_linear)"
        />
      </g>
      <defs>
        <linearGradient
          gradientUnits="userSpaceOnUse"
          id="prefix__paint0_linear"
          x1={34.337}
          x2={28.937}
          y1={10.054}
          y2={30.49}
        >
          <stop
            offset={0.118}
            stopColor="#35D07F"
          />
          <stop
            offset={0.802}
            stopColor="#FBCC5C"
          />
        </linearGradient>
      </defs>
    </svg>
    <View
      style={
        Object {
          "width": 45,
        }
      }
    />
  </View>
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            Object {},
          ],
          "renderItem": [Function],
          "title": "activity",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        colors={
          Array [
            "#42D689",
          ]
        }
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={16}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
        "position": "relative",
      }
    }
    updateCellsBatchingPeriod={50}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#FFFFFF",
                "flexDirection": "row",
                "justifyContent": "space-between",
                "paddingHorizontal": 16,
                "paddingVertical": 8,
              },
              undefined,
            ]
          }
        >
          <Text
            style={
              Object {
                "color": "#9CA4A9",
                "fontFamily": "Inter-Medium",
                "fontSize": 13,
                "lineHeight": 16,
              }
            }
          >
            activity
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderTopColor": "#EDEEEF",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "paddingHorizontal": 16,
        "paddingVertical": 12,
      }
    }
    testID="SendOrRequestBar"
  >
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Object {
            "flex": 1,
            "flexDirection": "column",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 100,
            },
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            Object {
              "attribute": "selectableItemBackground",
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1AB775",
              "height": 40,
              "justifyContent": "center",
              "minWidth": 120,
              "opacity": undefined,
              "paddingHorizontal": 16,
              "paddingVertical": 5,
            }
          }
          testID="SendOrRequestBar/SendButton"
        >
          <Text
            style={
              Object {
                "color": "#FFFFFF",
                "fontFamily": "Inter-SemiBold",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            send
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Array [
            Object {
              "flex": 1,
              "flexDirection": "column",
            },
            Object {
              "marginHorizontal": 12,
            },
          ],
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 100,
            },
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          nativeBackgroundAndroid={
            Object {
              "attribute": "selectableItemBackground",
              "type": "ThemeAttrAndroid",
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#1AB775",
              "height": 40,
              "justifyContent": "center",
              "minWidth": 120,
              "opacity": undefined,
              "paddingHorizontal": 16,
              "paddingVertical": 5,
            }
          }
          testID="SendOrRequestBar/RequestButton"
        >
          <Text
            style={
              Object {
                "color": "#FFFFFF",
                "fontFamily": "Inter-SemiBold",
                "fontSize": 16,
                "lineHeight": 22,
              }
            }
          >
            paymentRequestFlow:request
          </Text>
        </View>
      </View>
    </View>
    <View
      accessible={true}
      focusable={true}
      nativeBackgroundAndroid={
        Object {
          "attribute": "selectableItemBackgroundBorderless",
          "type": "ThemeAttrAndroid",
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <svg
        fill="none"
        height={32}
        style={Object {}}
        viewBox="0 0 32 32"
        width={32}
      >
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={4}
          y={4}
        />
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={18}
          y={4}
        />
        <path
          d="M18 25v1a2 2 0 002 2h1M28 21v-1a2 2 0 00-2-2h-1M21 18h-1a2 2 0 00-2 2v1M25 28h1a2 2 0 002-2v-1"
          stroke="#1AB775"
          strokeLinecap="round"
          strokeWidth={2.75}
          style={Object {}}
        />
        <rect
          height={10}
          rx={3}
          stroke="#1AB775"
          strokeWidth={2.75}
          style={Object {}}
          width={10}
          x={4}
          y={18}
        />
      </svg>
    </View>
  </View>
</RNCSafeAreaView>
`;
