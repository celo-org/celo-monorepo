// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "28.0.3"
        minSdkVersion = 16
        compileSdkVersion = 28
        targetSdkVersion = 28
        supportLibVersion = "28.0.0"
        kotlinVersion = '1.3.0'
        detoxKotlinVersion = '1.3.0'
        // Must pin to 16 because 17 uses androidX
        googlePlayServicesVersion = "16.+"
        // Change this to change the geth version
        celoClientDirectory = new File(rootProject.projectDir, '../../../node_modules/@celo/client/build/bin')
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath 'com.google.gms:google-services:4.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        maven {
            url "$rootDir/../../../node_modules/detox/Detox-android"
        }
        flatDir {
            dirs celoClientDirectory
        }
        maven { 
            url "https://www.jitpack.io" 
        }
        maven { 
            url "https://maven.google.com" 
        } 
      }
}

subprojects {
    project.configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.android.support'
                    && !details.requested.name.contains('multidex') ) {
                details.useVersion rootProject.ext.supportLibVersion
            }
            if (details.requested.group == 'com.segment.analytics.android.integrations'
                    && details.requested.name == 'firebase' ) {
                details.useVersion "1.2.0"
            }
        }
    }

    afterEvaluate {project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion
            }
        }
    }
}

