validator transfer

0) transfer gold from beneficiary to RG contract
test small
celocli transfer:gold 

USAGE
  $ celocli transfer:gold --from $FROM_GROUP_ADDR --to $CELO_VALIDATOR_GROUP_RG_ADDRESS --value=1e18 --useLedger --ledgerCustomAddresses=[0]

celocli transfer:gold --from $TO_GROUP_ADDR --to $CELO_VALIDATOR_GROUP_RG_ADDRESS --value=9999e18 --useLedger --ledgerCustomAddresses=[0]


export CELO_VALIDATOR_GROUP_RG_ADDRESS='FIXME'

OPTIONS
  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the sender
  --ledgerAddresses=ledgerAddresses                  [default: 1] If --useLedger is set, this will get the first N addresses for local signing
  --ledgerConfirmAddress                             Set it to ask confirmation for the address of the transaction from the ledger
  --ledgerCustomAddresses=ledgerCustomAddresses      [default: [0]] If --useLedger is set, this will get the array of index addresses for local signing. Example --ledgerCustomAddresses "[4,99]"
  --to=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d    (required) Address of the receiver
  --useLedger                                        Set it to use a ledger wallet
  --value=value                                      (required) Amount to transfer (in wei)

EXAMPLE
  gold --from 0xa0Af2E71cECc248f4a7fD606F203467B500Dd53B --to 0x5409ed021d9299bf6814279a6a1411a7e866a631 --value 10000000000000000000



1) lock gold
celocli releasegold:locked-gold --contract $CELO_VALIDATOR_GROUP_RG_ADDRESS --action lock --value 100000e17 --useLedger --ledgerCustomAddresses=[0]

test lock 1 gold
celocli releasegold:locked-gold --contract $CELO_VALIDATOR_GROUP_RG_ADDRESS --action lock --value 1e18 --useLedger --ledgerCustomAddresses=[0]

2) check that it's locked
# On your local machine
celocli lockedgold:show $CELO_VALIDATOR_GROUP_RG_ADDRESS

3) show group info
# On your local machine
celocli validatorgroup:show $CELO_VALIDATOR_GROUP_RG_ADDRESS

4) john does this 
# On the Validator machine
celocli validator:affiliate $CELO_VALIDATOR_GROUP_RG_ADDRESS --from $CELO_VALIDATOR_SIGNER_ADDRESS




5) I accept the affiliation
# On your local machine
celocli validatorgroup:member --accept 0x1b4A54049a8652c4c3E62C8c6959F06280aCFC6c --from $CELO_VALIDATOR_GROUP_SIGNER_ADDRESS --useLedger --ledgerCustomAddresses=[2]
C6c is John's validator -- will need to claim this in metadata 

6) Verify affiliation worked
# On your local machine
celocli validator:show $CELO_VALIDATOR_RG_ADDRESS
celocli validatorgroup:show $CELO_VALIDATOR_GROUP_RG_ADDRESS


7) Vote
# On your local machine
#celocli election:vote --from $CELO_VALIDATOR_VOTE_SIGNER_ADDRESS --for $CELO_VALIDATOR_GROUP_RG_ADDRESS --value 10000e18
celocli election:vote --from $CELO_VALIDATOR_GROUP_VOTE_SIGNER_ADDRESS --for $CELO_VALIDATOR_GROUP_RG_ADDRESS --value 10000000000000000000000


8) Verify votes
# On your local machine
celocli election:show $CELO_VALIDATOR_GROUP_RG_ADDRESS --group
celocli election:show $CELO_VALIDATOR_GROUP_RG_ADDRESS --voter
celocli election:show $CELO_VALIDATOR_RG_ADDRESS --voter

9) Activate votes
# On your local machine
# Note that this command will wait for the next epoch transition, which may be up to 24 hours in the future.
celocli election:activate --from $CELO_VALIDATOR_VOTE_SIGNER_ADDRESS --wait && celocli election:activate --from $CELO_VALIDATOR_GROUP_VOTE_SIGNER_ADDRESS --wait

10) verify vote activation
# On your local machine
celocli election:show $CELO_VALIDATOR_GROUP_RG_ADDRESS --voter
celocli election:show $CELO_VALIDATOR_RG_ADDRESS --voter


11) metadata

