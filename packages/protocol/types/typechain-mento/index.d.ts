/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import {BigNumber} from "bignumber.js";

export interface AddressLinkedListContract
  extends Truffle.Contract<AddressLinkedListInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AddressLinkedListInstance>;
}

export interface AddressSortedLinkedListContract
  extends Truffle.Contract<AddressSortedLinkedListInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AddressSortedLinkedListInstance>;
}

export interface AddressSortedLinkedListWithMedianContract
  extends Truffle.Contract<AddressSortedLinkedListWithMedianInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AddressSortedLinkedListWithMedianInstance>;
}

export interface ContextContract extends Truffle.Contract<ContextInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContextInstance>;
}

export interface ExchangeContract extends Truffle.Contract<ExchangeInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<ExchangeInstance>;
}

export interface ExchangeBRLContract
  extends Truffle.Contract<ExchangeBRLInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<ExchangeBRLInstance>;
}

export interface ExchangeBRLProxyContract
  extends Truffle.Contract<ExchangeBRLProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ExchangeBRLProxyInstance>;
}

export interface ExchangeEURContract
  extends Truffle.Contract<ExchangeEURInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<ExchangeEURInstance>;
}

export interface ExchangeEURProxyContract
  extends Truffle.Contract<ExchangeEURProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ExchangeEURProxyInstance>;
}

export interface ExchangeProxyContract
  extends Truffle.Contract<ExchangeProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ExchangeProxyInstance>;
}

export interface FreezableContract extends Truffle.Contract<FreezableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FreezableInstance>;
}

export interface FreezerContract extends Truffle.Contract<FreezerInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<FreezerInstance>;
}

export interface GoldTokenContract extends Truffle.Contract<GoldTokenInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<GoldTokenInstance>;
}

export interface GrandaMentoContract
  extends Truffle.Contract<GrandaMentoInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<GrandaMentoInstance>;
}

export interface GrandaMentoProxyContract
  extends Truffle.Contract<GrandaMentoProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GrandaMentoProxyInstance>;
}

export interface ICeloTokenContract
  extends Truffle.Contract<ICeloTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICeloTokenInstance>;
}

export interface ICeloVersionedContractContract
  extends Truffle.Contract<ICeloVersionedContractInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ICeloVersionedContractInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IExchangeContract extends Truffle.Contract<IExchangeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IExchangeInstance>;
}

export interface IFreezerContract extends Truffle.Contract<IFreezerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IFreezerInstance>;
}

export interface InitializableContract
  extends Truffle.Contract<InitializableInstance> {
  "new"(
    testingDeployment: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<InitializableInstance>;
}

export interface IRegistryContract extends Truffle.Contract<IRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRegistryInstance>;
}

export interface IReserveContract extends Truffle.Contract<IReserveInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IReserveInstance>;
}

export interface ISortedOraclesContract
  extends Truffle.Contract<ISortedOraclesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISortedOraclesInstance>;
}

export interface IStableTokenContract
  extends Truffle.Contract<IStableTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IStableTokenInstance>;
}

export interface MultiSigContract extends Truffle.Contract<MultiSigInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<MultiSigInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface ProxyContract extends Truffle.Contract<ProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ProxyInstance>;
}

export interface ReentrancyGuardContract
  extends Truffle.Contract<ReentrancyGuardInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ReentrancyGuardInstance>;
}

export interface RegistryContract extends Truffle.Contract<RegistryInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<RegistryInstance>;
}

export interface ReserveContract extends Truffle.Contract<ReserveInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<ReserveInstance>;
}

export interface ReserveProxyContract
  extends Truffle.Contract<ReserveProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ReserveProxyInstance>;
}

export interface ReserveSpenderMultiSigContract
  extends Truffle.Contract<ReserveSpenderMultiSigInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<ReserveSpenderMultiSigInstance>;
}

export interface ReserveSpenderMultiSigProxyContract
  extends Truffle.Contract<ReserveSpenderMultiSigProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ReserveSpenderMultiSigProxyInstance>;
}

export interface SortedOraclesContract
  extends Truffle.Contract<SortedOraclesInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<SortedOraclesInstance>;
}

export interface SortedOraclesProxyContract
  extends Truffle.Contract<SortedOraclesProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SortedOraclesProxyInstance>;
}

export interface StableTokenContract
  extends Truffle.Contract<StableTokenInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenInstance>;
}

export interface StableTokenBRLContract
  extends Truffle.Contract<StableTokenBRLInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenBRLInstance>;
}

export interface StableTokenBRLProxyContract
  extends Truffle.Contract<StableTokenBRLProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenBRLProxyInstance>;
}

export interface StableTokenEURContract
  extends Truffle.Contract<StableTokenEURInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenEURInstance>;
}

export interface StableTokenEURProxyContract
  extends Truffle.Contract<StableTokenEURProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenEURProxyInstance>;
}

export interface StableTokenProxyContract
  extends Truffle.Contract<StableTokenProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StableTokenProxyInstance>;
}

export interface StableTokenRegistryContract
  extends Truffle.Contract<StableTokenRegistryInstance> {
  "new"(
    test: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenRegistryInstance>;
}

export interface StableTokenRegistryProxyContract
  extends Truffle.Contract<StableTokenRegistryProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<StableTokenRegistryProxyInstance>;
}

export interface UsingPrecompilesContract
  extends Truffle.Contract<UsingPrecompilesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UsingPrecompilesInstance>;
}

export interface UsingRegistryContract
  extends Truffle.Contract<UsingRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UsingRegistryInstance>;
}

export interface AddressLinkedListInstance extends Truffle.ContractInstance {
  toBytes(
    a: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  toAddress(
    b: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface AddressSortedLinkedListInstance
  extends Truffle.ContractInstance {
  toBytes(
    a: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  toAddress(
    b: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface AddressSortedLinkedListWithMedianInstance
  extends Truffle.ContractInstance {
  toBytes(
    a: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  toAddress(
    b: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ContextInstance extends Truffle.ContractInstance {}

export interface ExchangeInstance extends Truffle.ContractInstance {
  goldBucket(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lastBucketUpdate(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  minimumReports(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  reserveFraction(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spread(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stable(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stableBucket(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stableTokenRegistryId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateFrequency(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  activateStable: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  sell: {
    (
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchange: {
    (
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buy: {
    (
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyTokenAmount(
    sellAmount: number | BigNumber | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getSellTokenAmount(
    buyAmount: number | BigNumber | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getBuyAndSellBuckets(
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  setUpdateFrequency: {
    (
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinimumReports: {
    (
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStableToken: {
    (
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSpread: {
    (
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReserveFraction: {
    (
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ExchangeBRLInstance extends Truffle.ContractInstance {
  activateStable: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  buy: {
    (
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchange: {
    (
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyAndSellBuckets(
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getBuyTokenAmount(
    sellAmount: number | BigNumber | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getSellTokenAmount(
    buyAmount: number | BigNumber | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  goldBucket(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  initialize: {
    (
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lastBucketUpdate(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  minimumReports(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  reserveFraction(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  sell: {
    (
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinimumReports: {
    (
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReserveFraction: {
    (
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSpread: {
    (
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStableToken: {
    (
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setUpdateFrequency: {
    (
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spread(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stable(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stableBucket(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stableTokenRegistryId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateFrequency(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
}

export interface ExchangeBRLProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ExchangeEURInstance extends Truffle.ContractInstance {
  activateStable: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  buy: {
    (
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      buyAmount: number | BigNumber | string,
      maxSellAmount: number | BigNumber | string,
      buyGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchange: {
    (
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyAndSellBuckets(
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getBuyTokenAmount(
    sellAmount: number | BigNumber | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getSellTokenAmount(
    buyAmount: number | BigNumber | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  goldBucket(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  initialize: {
    (
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      stableTokenIdentifier: string,
      _spread: number | BigNumber | string,
      _reserveFraction: number | BigNumber | string,
      _updateFrequency: number | BigNumber | string,
      _minimumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lastBucketUpdate(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  minimumReports(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  reserveFraction(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  sell: {
    (
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BigNumber | string,
      minBuyAmount: number | BigNumber | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinimumReports: {
    (
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMininumReports: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReserveFraction: {
    (
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newReserveFraction: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSpread: {
    (
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStableToken: {
    (
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newStableToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setUpdateFrequency: {
    (
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newUpdateFrequency: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spread(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stable(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stableBucket(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stableTokenRegistryId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateFrequency(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
}

export interface ExchangeEURProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ExchangeProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FreezableInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FreezerInstance extends Truffle.ContractInstance {
  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isFrozen(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  freeze: {
    (
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unfreeze: {
    (
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface GoldTokenInstance extends Truffle.ContractInstance {
  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferWithComment: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  increaseSupply: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface GrandaMentoInstance extends Truffle.ContractInstance {
  activeProposalIdsSuperset(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approver(txDetails?: Truffle.TransactionDetails): Promise<string>;

  exchangeProposalCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  exchangeProposals(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  maxApprovalExchangeRateChange(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spread(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  stableTokenExchangeLimits(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vetoPeriodSeconds(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      _registry: string | BigNumber,
      _approver: string | BigNumber,
      _maxApprovalExchangeRateChange: number | BigNumber | string,
      _spread: number | BigNumber | string,
      _vetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _registry: string | BigNumber,
      _approver: string | BigNumber,
      _maxApprovalExchangeRateChange: number | BigNumber | string,
      _spread: number | BigNumber | string,
      _vetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _registry: string | BigNumber,
      _approver: string | BigNumber,
      _maxApprovalExchangeRateChange: number | BigNumber | string,
      _spread: number | BigNumber | string,
      _vetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _registry: string | BigNumber,
      _approver: string | BigNumber,
      _maxApprovalExchangeRateChange: number | BigNumber | string,
      _spread: number | BigNumber | string,
      _vetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createExchangeProposal: {
    (
      stableTokenRegistryId: string,
      sellAmount: number | BigNumber | string,
      sellCelo: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      stableTokenRegistryId: string,
      sellAmount: number | BigNumber | string,
      sellCelo: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      stableTokenRegistryId: string,
      sellAmount: number | BigNumber | string,
      sellCelo: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      stableTokenRegistryId: string,
      sellAmount: number | BigNumber | string,
      sellCelo: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveExchangeProposal: {
    (
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelExchangeProposal: {
    (
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeExchangeProposal: {
    (
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyAmount(
    celoStableTokenExchangeRate: number | BigNumber | string,
    sellAmount: number | BigNumber | string,
    sellCelo: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  removeFromActiveProposalIdsSuperset: {
    (
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getActiveProposalIds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  getStableTokenExchangeLimits(
    stableTokenRegistryId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  setApprover: {
    (
      newApprover: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newApprover: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newApprover: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newApprover: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMaxApprovalExchangeRateChange: {
    (
      newMaxApprovalExchangeRateChange: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newMaxApprovalExchangeRateChange: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMaxApprovalExchangeRateChange: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMaxApprovalExchangeRateChange: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSpread: {
    (
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newSpread: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStableTokenExchangeLimits: {
    (
      stableTokenRegistryId: string,
      minExchangeAmount: number | BigNumber | string,
      maxExchangeAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      stableTokenRegistryId: string,
      minExchangeAmount: number | BigNumber | string,
      maxExchangeAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      stableTokenRegistryId: string,
      minExchangeAmount: number | BigNumber | string,
      maxExchangeAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      stableTokenRegistryId: string,
      minExchangeAmount: number | BigNumber | string,
      maxExchangeAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setVetoPeriodSeconds: {
    (
      newVetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newVetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newVetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newVetoPeriodSeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface GrandaMentoProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ICeloTokenInstance extends Truffle.ContractInstance {
  transferWithComment: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ICeloVersionedContractInstance
  extends Truffle.ContractInstance {
  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IExchangeInstance extends Truffle.ContractInstance {
  buy: {
    (
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sell: {
    (
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchange: {
    (
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      arg2: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setUpdateFrequency: {
    (
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyTokenAmount(
    arg0: number | BigNumber | string,
    arg1: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getSellTokenAmount(
    arg0: number | BigNumber | string,
    arg1: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getBuyAndSellBuckets(
    arg0: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;
}

export interface IFreezerInstance extends Truffle.ContractInstance {
  isFrozen(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface InitializableInstance extends Truffle.ContractInstance {
  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface IRegistryInstance extends Truffle.ContractInstance {
  setAddressFor: {
    (
      arg0: string,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAddressForOrDie(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressFor(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressForStringOrDie(
    identifier: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressForString(
    identifier: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOneOf(
    arg0: (string | BigNumber)[],
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IReserveInstance extends Truffle.ContractInstance {
  setTobinTaxStalenessThreshold: {
    (
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addToken: {
    (
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeToken: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferGold: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferExchangeGold: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferCollateralAsset: {
    (
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getReserveGoldBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getUnfrozenReserveGoldBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOrComputeTobinTax: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getReserveRatio(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  addExchangeSpender: {
    (
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeExchangeSpender: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addSpender: {
    (
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeSpender: {
    (
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isStableAsset(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isCollateralAsset(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ISortedOraclesInstance extends Truffle.ContractInstance {
  addOracle: {
    (
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeOracle: {
    (
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  report: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string | BigNumber,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string | BigNumber,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string | BigNumber,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      arg2: string | BigNumber,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeExpiredReports: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOldestReportExpired(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string]>;

  numRates(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  medianRate(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  numTimestamps(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  medianTimestamp(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface IStableTokenInstance extends Truffle.ContractInstance {
  mint: {
    (
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setInflationParameters: {
    (
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  valueToUnits(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  unitsToValue(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getInflationParameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  balanceOf(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface MultiSigInstance extends Truffle.ContractInstance {
  MAX_OWNER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  confirmations(
    arg0: number | BigNumber | string,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  internalRequired(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isOwner(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owners(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  required(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transactionCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transactions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, string, boolean]>;

  initialize: {
    (
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addOwner: {
    (
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeOwner: {
    (
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  replaceOwner: {
    (
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeRequirement: {
    (
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeInternalRequirement: {
    (
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTransaction: {
    (
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransaction: {
    (
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeConfirmation: {
    (
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeTransaction: {
    (
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isConfirmed(
    transactionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getConfirmationCount(
    transactionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTransactionCount(
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOwners(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getConfirmations(
    transactionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getTransactionIds(
    from: number | BigNumber | string,
    to: number | BigNumber | string,
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;
}

export interface OwnableInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProxyInstance extends Truffle.ContractInstance {
  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ReentrancyGuardInstance extends Truffle.ContractInstance {}

export interface RegistryInstance extends Truffle.ContractInstance {
  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setAddressFor: {
    (
      identifier: string,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      identifier: string,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAddressForOrDie(
    identifierHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressFor(
    identifierHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressForStringOrDie(
    identifier: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAddressForString(
    identifier: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOneOf(
    identifierHashes: (string | BigNumber)[],
    sender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ReserveInstance extends Truffle.ContractInstance {
  assetAllocationSymbols(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  assetAllocationWeights(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  collateralAssetLastSpendingDay(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  collateralAssets(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  exchangeSpenderAddresses(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  frozenReserveGoldDays(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  frozenReserveGoldStartBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  frozenReserveGoldStartDay(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isCollateralAsset(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isExchangeSpender(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOtherReserveAddress(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isSpender(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isToken(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lastSpendingDay(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  otherReserveAddresses(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spendingLimit(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  tobinTax(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  tobinTaxCache(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  tobinTaxReserveRatio(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tobinTaxStalenessThreshold(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      registryAddress: string | BigNumber,
      _tobinTaxStalenessThreshold: number | BigNumber | string,
      _spendingRatioForCelo: number | BigNumber | string,
      _frozenGold: number | BigNumber | string,
      _frozenDays: number | BigNumber | string,
      _assetAllocationSymbols: (string | BigNumber)[],
      _assetAllocationWeights: (number | BigNumber | string)[],
      _tobinTax: number | BigNumber | string,
      _tobinTaxReserveRatio: number | BigNumber | string,
      _collateralAssets: (string | BigNumber)[],
      _collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      _tobinTaxStalenessThreshold: number | BigNumber | string,
      _spendingRatioForCelo: number | BigNumber | string,
      _frozenGold: number | BigNumber | string,
      _frozenDays: number | BigNumber | string,
      _assetAllocationSymbols: (string | BigNumber)[],
      _assetAllocationWeights: (number | BigNumber | string)[],
      _tobinTax: number | BigNumber | string,
      _tobinTaxReserveRatio: number | BigNumber | string,
      _collateralAssets: (string | BigNumber)[],
      _collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      _tobinTaxStalenessThreshold: number | BigNumber | string,
      _spendingRatioForCelo: number | BigNumber | string,
      _frozenGold: number | BigNumber | string,
      _frozenDays: number | BigNumber | string,
      _assetAllocationSymbols: (string | BigNumber)[],
      _assetAllocationWeights: (number | BigNumber | string)[],
      _tobinTax: number | BigNumber | string,
      _tobinTaxReserveRatio: number | BigNumber | string,
      _collateralAssets: (string | BigNumber)[],
      _collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      _tobinTaxStalenessThreshold: number | BigNumber | string,
      _spendingRatioForCelo: number | BigNumber | string,
      _frozenGold: number | BigNumber | string,
      _frozenDays: number | BigNumber | string,
      _assetAllocationSymbols: (string | BigNumber)[],
      _assetAllocationWeights: (number | BigNumber | string)[],
      _tobinTax: number | BigNumber | string,
      _tobinTaxReserveRatio: number | BigNumber | string,
      _collateralAssets: (string | BigNumber)[],
      _collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTobinTaxStalenessThreshold: {
    (
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTobinTax: {
    (
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTobinTaxReserveRatio: {
    (
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDailySpendingRatio: {
    (
      ratio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      ratio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      ratio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ratio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDailySpendingRatioForCollateralAssets: {
    (
      collateralAssets: (string | BigNumber)[],
      collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      collateralAssets: (string | BigNumber)[],
      collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      collateralAssets: (string | BigNumber)[],
      collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateralAssets: (string | BigNumber)[],
      collateralAssetDailySpendingRatios: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDailySpendingRatio(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getDailySpendingRatioForCollateralAsset(
    collateralAsset: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setFrozenGold: {
    (
      frozenGold: number | BigNumber | string,
      frozenDays: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      frozenGold: number | BigNumber | string,
      frozenDays: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      frozenGold: number | BigNumber | string,
      frozenDays: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      frozenGold: number | BigNumber | string,
      frozenDays: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAssetAllocations: {
    (
      symbols: (string | BigNumber)[],
      weights: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      symbols: (string | BigNumber)[],
      weights: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      symbols: (string | BigNumber)[],
      weights: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      symbols: (string | BigNumber)[],
      weights: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addToken: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeToken: {
    (
      token: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addOtherReserveAddress: {
    (
      reserveAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      reserveAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      reserveAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      reserveAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeOtherReserveAddress: {
    (
      reserveAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      reserveAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      reserveAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      reserveAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addSpender: {
    (
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeSpender: {
    (
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addExchangeSpender: {
    (
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeExchangeSpender: {
    (
      spender: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      spender: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getExchangeSpenders(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  transferGold: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferCollateralAsset: {
    (
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateralAsset: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferExchangeGold: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getOrComputeTobinTax: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getOtherReserveAddresses(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getAssetAllocationSymbols(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getAssetAllocationWeights(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  getUnfrozenBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getReserveGoldBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOtherReserveAddressesGoldBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getUnfrozenReserveGoldBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getReserveAddressesCollateralAssetBalance(
    collateralAsset: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addCollateralAsset: {
    (
      collateralAsset: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      collateralAsset: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      collateralAsset: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateralAsset: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeCollateralAsset: {
    (
      collateralAsset: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      collateralAsset: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      collateralAsset: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateralAsset: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkIsCollateralAsset(
    collateralAsset: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getFrozenReserveGoldBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getReserveRatio(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isStableAsset(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ReserveProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ReserveSpenderMultiSigInstance
  extends Truffle.ContractInstance {
  MAX_OWNER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  addOwner: {
    (
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeInternalRequirement: {
    (
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeRequirement: {
    (
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _required: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransaction: {
    (
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmations(
    arg0: number | BigNumber | string,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  executeTransaction: {
    (
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getConfirmationCount(
    transactionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getConfirmations(
    transactionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getOwners(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getTransactionCount(
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTransactionIds(
    from: number | BigNumber | string,
    to: number | BigNumber | string,
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  initialize: {
    (
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owners: (string | BigNumber)[],
      _required: number | BigNumber | string,
      _internalRequired: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  internalRequired(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isConfirmed(
    transactionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owners(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  removeOwner: {
    (
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  replaceOwner: {
    (
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  required(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  revokeConfirmation: {
    (
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTransaction: {
    (
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BigNumber,
      value: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transactionCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transactions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, string, boolean]>;
}

export interface ReserveSpenderMultiSigProxyInstance
  extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface SortedOraclesInstance extends Truffle.ContractInstance {
  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOracle(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  oracles(
    arg0: string | BigNumber,
    arg1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  reportExpirySeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenReportExpirySeconds(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReportExpiry: {
    (
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTokenReportExpiry: {
    (
      _token: string | BigNumber,
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      _reportExpirySeconds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addOracle: {
    (
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeOracle: {
    (
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      oracleAddress: string | BigNumber,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeExpiredReports: {
    (
      token: string | BigNumber,
      n: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      n: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      n: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      n: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOldestReportExpired(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string]>;

  report: {
    (
      token: string | BigNumber,
      value: number | BigNumber | string,
      lesserKey: string | BigNumber,
      greaterKey: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      value: number | BigNumber | string,
      lesserKey: string | BigNumber,
      greaterKey: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      value: number | BigNumber | string,
      lesserKey: string | BigNumber,
      greaterKey: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      value: number | BigNumber | string,
      lesserKey: string | BigNumber,
      greaterKey: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  numRates(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  medianRate(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getRates(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BigNumber[], BigNumber[]]>;

  numTimestamps(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  medianTimestamp(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTimestamps(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BigNumber[], BigNumber[]]>;

  getOracles(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getTokenReportExpirySeconds(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface SortedOraclesProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StableTokenInstance extends Truffle.ContractInstance {
  checkProofOfPossession(
    sender: string | BigNumber,
    blsKey: string,
    blsPop: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  fractionMulExp(
    aNumerator: number | BigNumber | string,
    aDenominator: number | BigNumber | string,
    bNumerator: number | BigNumber | string,
    bDenominator: number | BigNumber | string,
    exponent: number | BigNumber | string,
    _decimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getBlockNumberFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochNumber(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getEpochNumberOfBlock(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochSize(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getParentSealBitmap(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVerifiedSealBitmapFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  hashHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  minQuorumSize(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  minQuorumSizeInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  numberValidatorsInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  numberValidatorsInSet(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  validatorSignerAddressFromCurrentSet(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorSignerAddressFromSet(
    index: number | BigNumber | string,
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setInflationParameters: {
    (
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferWithComment: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  allowance(
    accountOwner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    accountOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getInflationParameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  valueToUnits(
    value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getExchangeRegistryId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  unitsToValue(
    units: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  debitGasFees: {
    (
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  creditGasFees: {
    (
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StableTokenBRLInstance extends Truffle.ContractInstance {
  allowance(
    accountOwner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    accountOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkProofOfPossession(
    sender: string | BigNumber,
    blsKey: string,
    blsPop: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  creditGasFees: {
    (
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  debitGasFees: {
    (
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fractionMulExp(
    aNumerator: number | BigNumber | string,
    aDenominator: number | BigNumber | string,
    bNumerator: number | BigNumber | string,
    bDenominator: number | BigNumber | string,
    exponent: number | BigNumber | string,
    _decimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getBlockNumberFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochNumber(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getEpochNumberOfBlock(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochSize(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getExchangeRegistryId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getInflationParameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getParentSealBitmap(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVerifiedSealBitmapFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  hashHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  minQuorumSize(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  minQuorumSizeInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  mint: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  numberValidatorsInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  numberValidatorsInSet(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setInflationParameters: {
    (
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferWithComment: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unitsToValue(
    units: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  validatorSignerAddressFromCurrentSet(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorSignerAddressFromSet(
    index: number | BigNumber | string,
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  valueToUnits(
    value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
}

export interface StableTokenBRLProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StableTokenEURInstance extends Truffle.ContractInstance {
  allowance(
    accountOwner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    accountOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkProofOfPossession(
    sender: string | BigNumber,
    blsKey: string,
    blsPop: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  creditGasFees: {
    (
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      feeRecipient: string | BigNumber,
      gatewayFeeRecipient: string | BigNumber,
      communityFund: string | BigNumber,
      refund: number | BigNumber | string,
      tipTxFee: number | BigNumber | string,
      gatewayFee: number | BigNumber | string,
      baseTxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  debitGasFees: {
    (
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fractionMulExp(
    aNumerator: number | BigNumber | string,
    aDenominator: number | BigNumber | string,
    bNumerator: number | BigNumber | string,
    bDenominator: number | BigNumber | string,
    exponent: number | BigNumber | string,
    _decimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getBlockNumberFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochNumber(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getEpochNumberOfBlock(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochSize(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getExchangeRegistryId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getInflationParameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getParentSealBitmap(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVerifiedSealBitmapFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  hashHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _symbol: string,
      _decimals: number | BigNumber | string,
      registryAddress: string | BigNumber,
      inflationRate: number | BigNumber | string,
      inflationFactorUpdatePeriod: number | BigNumber | string,
      initialBalanceAddresses: (string | BigNumber)[],
      initialBalanceValues: (number | BigNumber | string)[],
      exchangeIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  minQuorumSize(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  minQuorumSizeInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  mint: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  numberValidatorsInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  numberValidatorsInSet(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setInflationParameters: {
    (
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rate: number | BigNumber | string,
      updatePeriod: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferWithComment: {
    (
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      value: number | BigNumber | string,
      comment: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unitsToValue(
    units: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  validatorSignerAddressFromCurrentSet(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorSignerAddressFromSet(
    index: number | BigNumber | string,
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  valueToUnits(
    value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
}

export interface StableTokenEURProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StableTokenProxyInstance extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StableTokenRegistryInstance extends Truffle.ContractInstance {
  fiatTickers(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stableTokens(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getVersionNumber(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize: {
    (
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getContractInstances(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber[]]>;

  removeStableToken: {
    (
      fiatTicker: string,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fiatTicker: string,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fiatTicker: string,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fiatTicker: string,
      index: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addNewStableToken: {
    (
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fiatTicker: string,
      stableTokenContractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  queryStableTokenContractNames(
    fiatTicker: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface StableTokenRegistryProxyInstance
  extends Truffle.ContractInstance {
  _getImplementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _setAndInitializeImplementation: {
    (
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      callbackData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setImplementation: {
    (
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface UsingPrecompilesInstance extends Truffle.ContractInstance {
  fractionMulExp(
    aNumerator: number | BigNumber | string,
    aDenominator: number | BigNumber | string,
    bNumerator: number | BigNumber | string,
    bDenominator: number | BigNumber | string,
    exponent: number | BigNumber | string,
    _decimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getEpochSize(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getEpochNumberOfBlock(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEpochNumber(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  validatorSignerAddressFromCurrentSet(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorSignerAddressFromSet(
    index: number | BigNumber | string,
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  numberValidatorsInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  numberValidatorsInSet(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  checkProofOfPossession(
    sender: string | BigNumber,
    blsKey: string,
    blsPop: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getBlockNumberFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  hashHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getParentSealBitmap(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVerifiedSealBitmapFromHeader(
    header: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  minQuorumSize(
    blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  minQuorumSizeInCurrentSet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface UsingRegistryInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRegistry: {
    (
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
