{
  "oldArtifactsFolder": "/home/circleci/app/packages/protocol/build/core-contracts.v0/contracts",
  "newArtifactsFolder": "/home/circleci/app/packages/protocol/build/core-contracts.v1/contracts",
  "exclude": "/.*Test|Mock.*|I[A-Z].*|.*Proxy|MultiSig.*|ReleaseGold|SlasherUtil|UsingPrecompiles/",
  "report": {
    "contracts": {
      "DowntimeSlasher": {
        "changes": {
          "storage": [
            {
              "contract": "DowntimeSlasher",
              "compatible": false,
              "errors": [
                "variable bitmaps was inserted"
              ]
            }
          ],
          "major": [
            {
              "contract": "DowntimeSlasher",
              "signature": "isDown(uint256,uint256,uint256)",
              "type": "MethodRemoved"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "slash(uint256,uint256,uint256,uint256,address[],address[],uint256[],address[],address[],uint256[])",
              "type": "MethodRemoved"
            }
          ],
          "minor": [
            {
              "contract": "DowntimeSlasher",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "getBitmapForInterval(uint256,uint256)",
              "type": "MethodAdded"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "setBitmapForInterval(uint256,uint256)",
              "type": "MethodAdded"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "wasDownForInterval(uint256,uint256,uint256)",
              "type": "MethodAdded"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "isBitmapSetForInterval(uint256,uint256)",
              "type": "MethodAdded"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "wasDownForIntervals(uint256[],uint256[],uint256[])",
              "type": "MethodAdded"
            },
            {
              "contract": "DowntimeSlasher",
              "signature": "slash(uint256[],uint256[],uint256[],uint256,address[],address[],uint256[],address[],address[],uint256[])",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "DowntimeSlasher",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "+1",
          "major": "0",
          "minor": "0",
          "patch": "0"
        }
      },
      "Governance": {
        "changes": {
          "storage": [],
          "major": [
            {
              "contract": "Governance",
              "signature": "getVoteRecord(address,uint256)",
              "oldValue": "uint256, uint256",
              "newValue": "uint256, uint256, uint256",
              "type": "MethodReturn"
            }
          ],
          "minor": [
            {
              "contract": "Governance",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Governance",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Governance",
              "dependency": "Proposals",
              "type": "LibraryLinkingChange"
            },
            {
              "contract": "Governance",
              "dependency": "IntegerSortedLinkedList",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "+1",
          "minor": "0",
          "patch": "0"
        }
      },
      "MetaTransactionWallet": {
        "changes": {
          "storage": [],
          "major": [
            {
              "contract": "MetaTransactionWallet",
              "type": "NewContract"
            }
          ],
          "minor": [],
          "patch": [
            {
              "contract": "MetaTransactionWallet",
              "dependency": "Signatures",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "+1",
          "minor": "0",
          "patch": "0"
        }
      },
      "Accounts": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Accounts",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Accounts",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Accounts",
              "dependency": "Signatures",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Attestations": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Attestations",
              "signature": "approveTransfer(bytes32,uint256,address,address,bool)",
              "type": "MethodAdded"
            },
            {
              "contract": "Attestations",
              "signature": "requireNAttestationsRequested(bytes32,address,uint32)",
              "type": "MethodAdded"
            },
            {
              "contract": "Attestations",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Attestations",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Attestations",
              "dependency": "Signatures",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "DoubleSigningSlasher": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "DoubleSigningSlasher",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "DoubleSigningSlasher",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Election": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Election",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Election",
              "signature": "revokeActive(address,uint256,address,address,uint256)",
              "oldValue": "public",
              "newValue": "external",
              "type": "MethodVisibility"
            },
            {
              "contract": "Election",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Election",
              "dependency": "AddressSortedLinkedList",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "EpochRewards": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "EpochRewards",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "EpochRewards",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Escrow": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Escrow",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Escrow",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Escrow",
              "dependency": "Signatures",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Exchange": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Exchange",
              "signature": "buy(uint256,uint256,bool)",
              "type": "MethodAdded"
            },
            {
              "contract": "Exchange",
              "signature": "sell(uint256,uint256,bool)",
              "type": "MethodAdded"
            },
            {
              "contract": "Exchange",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Exchange",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "GasPriceMinimum": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "GasPriceMinimum",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "GasPriceMinimum",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "GoldToken": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "GoldToken",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "GoldToken",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "LockedGold": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "LockedGold",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "LockedGold",
              "type": "DeployedBytecode"
            },
            {
              "contract": "LockedGold",
              "dependency": "Signatures",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Random": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Random",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Random",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Reserve": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Reserve",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Reserve",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "SortedOracles": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "SortedOracles",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "SortedOracles",
              "type": "DeployedBytecode"
            },
            {
              "contract": "SortedOracles",
              "dependency": "AddressSortedLinkedListWithMedian",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "StableToken": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "StableToken",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "StableToken",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "Validators": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Validators",
              "signature": "getVersionNumber()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Validators",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Validators",
              "dependency": "AddressLinkedList",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      }
    },
    "libraries": {
      "LinkedList": {
        "storage": [],
        "major": [
          {
            "contract": "LinkedList",
            "signature": "insert(struct LinkedList.List,bytes32,bytes32,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "LinkedList",
            "signature": "push(struct LinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "LinkedList",
            "signature": "remove(struct LinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "LinkedList",
            "signature": "update(struct LinkedList.List,bytes32,bytes32,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "LinkedList",
            "signature": "contains(struct LinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "LinkedList",
            "signature": "headN(struct LinkedList.List,uint256)",
            "type": "MethodRemoved"
          },
          {
            "contract": "LinkedList",
            "signature": "getKeys(struct LinkedList.List)",
            "type": "MethodRemoved"
          }
        ],
        "minor": [],
        "patch": [
          {
            "contract": "LinkedList",
            "type": "DeployedBytecode"
          }
        ]
      },
      "SortedLinkedList": {
        "storage": [],
        "major": [
          {
            "contract": "SortedLinkedList",
            "signature": "insert(struct SortedLinkedList.List,bytes32,uint256,bytes32,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "remove(struct SortedLinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "update(struct SortedLinkedList.List,bytes32,uint256,bytes32,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "push(struct SortedLinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "popN(struct SortedLinkedList.List,uint256)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "contains(struct SortedLinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "getValue(struct SortedLinkedList.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "getElements(struct SortedLinkedList.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "getKeys(struct SortedLinkedList.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedList",
            "signature": "headN(struct SortedLinkedList.List,uint256)",
            "type": "MethodRemoved"
          }
        ],
        "minor": [],
        "patch": [
          {
            "contract": "SortedLinkedList",
            "type": "DeployedBytecode"
          }
        ]
      },
      "SortedLinkedListWithMedian": {
        "storage": [],
        "major": [
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "insert(struct SortedLinkedListWithMedian.List,bytes32,uint256,bytes32,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "remove(struct SortedLinkedListWithMedian.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "update(struct SortedLinkedListWithMedian.List,bytes32,uint256,bytes32,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "push(struct SortedLinkedListWithMedian.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "popN(struct SortedLinkedListWithMedian.List,uint256)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "contains(struct SortedLinkedListWithMedian.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getValue(struct SortedLinkedListWithMedian.List,bytes32)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getMedianValue(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getHead(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getMedian(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getTail(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getNumElements(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getElements(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          },
          {
            "contract": "SortedLinkedListWithMedian",
            "signature": "getKeys(struct SortedLinkedListWithMedian.List)",
            "type": "MethodRemoved"
          }
        ],
        "minor": [],
        "patch": [
          {
            "contract": "SortedLinkedListWithMedian",
            "type": "DeployedBytecode"
          }
        ]
      },
      "AddressLinkedList": {
        "storage": [],
        "major": [],
        "minor": [
          {
            "contract": "AddressLinkedList",
            "signature": "getVersionNumber()",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "AddressLinkedList",
            "type": "DeployedBytecode"
          }
        ]
      },
      "AddressSortedLinkedList": {
        "storage": [],
        "major": [],
        "minor": [
          {
            "contract": "AddressSortedLinkedList",
            "signature": "getVersionNumber()",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "AddressSortedLinkedList",
            "type": "DeployedBytecode"
          }
        ]
      },
      "AddressSortedLinkedListWithMedian": {
        "storage": [],
        "major": [],
        "minor": [
          {
            "contract": "AddressSortedLinkedListWithMedian",
            "signature": "getVersionNumber()",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "AddressSortedLinkedListWithMedian",
            "type": "DeployedBytecode"
          }
        ]
      },
      "IntegerSortedLinkedList": {
        "storage": [],
        "major": [],
        "minor": [
          {
            "contract": "IntegerSortedLinkedList",
            "signature": "getVersionNumber()",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "IntegerSortedLinkedList",
            "type": "DeployedBytecode"
          }
        ]
      },
      "Proposals": {
        "storage": [],
        "major": [],
        "minor": [
          {
            "contract": "Proposals",
            "signature": "getVersionNumber()",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "Proposals",
            "type": "DeployedBytecode"
          }
        ]
      },
      "Signatures": {
        "storage": [],
        "major": [],
        "minor": [
          {
            "contract": "Signatures",
            "signature": "getVersionNumber()",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "Signatures",
            "type": "DeployedBytecode"
          }
        ]
      }
    }
  }
}
