{
  "oldArtifactsFolder": "build/core-contracts.v8/contracts",
  "newArtifactsFolder": [
    "build/core-contracts.v9/contracts",
    "build/core-contracts.v9/contracts-0.8"
  ],
  "exclude": "/.*Test|Mock.*|I[A-Z].*|.*Proxy|MultiSig.*|ReleaseGold|SlasherUtil|UsingPrecompiles|^UsingRegistry/",
  "report": {
    "contracts": {
      "Attestations": {
        "changes": {
          "storage": [],
          "major": [
            {
              "contract": "Attestations",
              "signature": "request(bytes32,uint256,address)",
              "type": "MethodRemoved"
            },
            {
              "contract": "Attestations",
              "signature": "selectIssuers(bytes32)",
              "type": "MethodRemoved"
            },
            {
              "contract": "Attestations",
              "signature": "complete(bytes32,uint8,bytes32,bytes32)",
              "type": "MethodRemoved"
            },
            {
              "contract": "Attestations",
              "signature": "approveTransfer(bytes32,uint256,address,address,bool)",
              "type": "MethodRemoved"
            }
          ],
          "minor": [],
          "patch": [
            {
              "contract": "Attestations",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "+1",
          "minor": "0",
          "patch": "0"
        }
      },
      "Governance": {
        "changes": {
          "storage": [],
          "major": [
            {
              "contract": "Governance",
              "signature": "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
              "type": "MethodRemoved"
            },
            {
              "contract": "Governance",
              "signature": "setApprovalStageDuration(uint256)",
              "type": "MethodRemoved"
            },
            {
              "contract": "Governance",
              "signature": "getApprovalStageDuration()",
              "type": "MethodRemoved"
            },
            {
              "contract": "Governance",
              "signature": "getVoteRecord(address,uint256)",
              "oldValue": "uint256, uint256, uint256",
              "newValue": "uint256, uint256, uint256, uint256, uint256, uint256",
              "type": "MethodReturn"
            }
          ],
          "minor": [
            {
              "contract": "Governance",
              "signature": "getAmountOfGoldUsedForVoting(address)",
              "type": "MethodAdded"
            },
            {
              "contract": "Governance",
              "signature": "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
              "type": "MethodAdded"
            },
            {
              "contract": "Governance",
              "signature": "votePartially(uint256,uint256,uint256,uint256,uint256)",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Governance",
              "type": "DeployedBytecode"
            },
            {
              "contract": "Governance",
              "dependency": "Proposals",
              "type": "LibraryLinkingChange"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "+1",
          "minor": "0",
          "patch": "0"
        }
      },
      "Election": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "Election",
              "signature": "allowedToVoteOverMaxNumberOfGroups(address)",
              "type": "MethodAdded"
            },
            {
              "contract": "Election",
              "signature": "updateTotalVotesByAccountForGroup(address,address)",
              "type": "MethodAdded"
            },
            {
              "contract": "Election",
              "signature": "setAllowedToVoteOverMaxNumberOfGroups(bool)",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "Election",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "GoldToken": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [
            {
              "contract": "GoldToken",
              "signature": "burn(uint256)",
              "type": "MethodAdded"
            },
            {
              "contract": "GoldToken",
              "signature": "circulatingSupply()",
              "type": "MethodAdded"
            },
            {
              "contract": "GoldToken",
              "signature": "getBurnedAmount()",
              "type": "MethodAdded"
            }
          ],
          "patch": [
            {
              "contract": "GoldToken",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "+1",
          "patch": "0"
        }
      },
      "LockedGold": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [],
          "patch": [
            {
              "contract": "LockedGold",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "=",
          "patch": "+1"
        }
      },
      "MetaTransactionWalletDeployer": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [],
          "patch": [
            {
              "contract": "MetaTransactionWalletDeployer",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "=",
          "patch": "+1"
        }
      },
      "Validators": {
        "changes": {
          "storage": [],
          "major": [],
          "minor": [],
          "patch": [
            {
              "contract": "Validators",
              "type": "DeployedBytecode"
            }
          ]
        },
        "versionDelta": {
          "storage": "=",
          "major": "=",
          "minor": "=",
          "patch": "+1"
        }
      }
    },
    "libraries": {
      "Proposals": {
        "storage": [],
        "major": [
          {
            "contract": "Proposals",
            "signature": "updateVote(struct Proposals.Proposal,uint256,uint256,enum Proposals.VoteValue,enum Proposals.VoteValue)",
            "type": "MethodRemoved"
          }
        ],
        "minor": [
          {
            "contract": "Proposals",
            "signature": "updateVote(struct Proposals.Proposal,uint256,uint256,uint256,uint256,uint256,uint256)",
            "type": "MethodAdded"
          }
        ],
        "patch": [
          {
            "contract": "Proposals",
            "type": "DeployedBytecode"
          }
        ]
      }
    }
  }
}
