apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "common.fullname" . }}-bootnode
  labels:
{{ include "common.standard.labels" .  | indent 4 }}
    component: bootnode
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
{{ include "common.standard.labels" .  | indent 6 }}
      component: bootnode
  template:
    metadata:
      labels:
{{ include "common.standard.labels" .  | indent 8 }}
        component: bootnode
    spec:
      containers:
      - name: bootnode
        image: {{ .Values.bootnode.image.repository }}:{{ .Values.bootnode.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - /bin/sh
        - -c
        args:
        - |
          set -euo pipefail
          NAT_FLAG=""
          [[ "$IP_ADDRESS" != "none" ]] && NAT_FLAG="--nat=extip:$IP_ADDRESS"
          /usr/local/bin/bootnode --nodekey=/etc/bootnode/node.key --verbosity=5 ${NAT_FLAG} --networkid=${NETWORK_ID} --ping-ip-from-packet={{ .Values.geth.ping_ip_from_packet }}
        env:
        - name: IP_ADDRESS
          value: {{ default "none" .Values.geth.bootnodeIpAddress }}
        - name: NETWORK_ID
          valueFrom:
            configMapKeyRef:
              name: {{ template "common.fullname" . }}-geth-config
              key: networkid
        volumeMounts:
        - name: data
          mountPath: /etc/bootnode
        ports:
        - name: discovery
          containerPort: 30301
          protocol: UDP
      initContainers:
      - name: generate-node-key
        image: {{ .Values.celotool.image.repository }}:{{ .Values.celotool.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - /bin/sh
        - -c
        args:
        - |
          celotooljs.sh generate bip32 --mnemonic \"$MNEMONIC\" --accountType bootnode --index 0 > /etc/bootnode/node.key
        env:
        - name: MNEMONIC
          valueFrom:
            secretKeyRef:
              name: {{ template "common.fullname" . }}-geth-account
              key: mnemonic
        volumeMounts:
        - name: data
          mountPath: /etc/bootnode
      volumes:
      - name: data
        emptyDir: {}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
