apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "common.fullname" . }}
  labels:
{{ include "common.standard.labels" .  | indent 4 }}
  component: celo-fullnode
spec:
{{ if .Values.storage.enable }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: {{ .Values.storage.storageClass }}
      accessModes: [ "{{ .Values.storage.accessModes }}" ]
      resources:
        requests:
          storage: {{ .Values.storage.size }}
{{ end }}
  podManagementPolicy: Parallel
  updateStrategy:
{{ toYaml .Values.geth.updateStrategy | indent 4 }}
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "common.fullname" . }}
  selector:
    matchLabels:
{{ include "common.standard.labels" .  | indent 6 }}
      component: celo-fullnode
  template:
    metadata:
      labels:
{{ include "common.standard.labels" .  | indent 8 }}
        component: celo-fullnode
{{ if .Values.prometheus | default true }}
      annotations:
{{ include "common.prometheus-annotations" . | indent 8 }}
{{ end }}
    spec:
      # see https://www.verygoodsecurity.com/blog/posts/kubernetes-multi-az-deployments-using-pod-anti-affinity
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - celo-fullnode
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
      initContainers:
{{ include "common.init-genesis-container" .  | indent 6 }}
{{ if .Values.geth.node_keys }}
      - name: set-node-key
        image: alpine:3.12
        command:
        - /bin/sh
        - -c
        args:
        - |
            RID=$(echo $REPLICA_NAME | grep -Eo '[0-9]+$')
            NODE_KEYS={{ join "," .Values.geth.node_keys }}
            NODE_KEY=$(echo -n $NODE_KEYS | cut -d ',' -f $((RID + 1)))
            echo -n $NODE_KEY > /root/.celo/pkey
        volumeMounts:
        - name: data
          mountPath: /root/.celo
        env:
        - name: REPLICA_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
{{ end }}
      containers:
{{ include "common.full-node-container" (dict "Values" $.Values "Release" $.Release "Chart" $.Chart "expose" true "ip_addresses" .Values.geth.public_ip_per_node "syncmode" .Values.geth.syncmode "gcmode" .Values.geth.syncmodex "max_latest_block_age_seconds" .Values.geth.readiness_probe_max_block_age_seconds "rpc_apis" .Values.geth.rpc_apis "pprof" (or (.Values.prometheus) (.Values.pprof.enabled)) "pprof_port" (.Values.pprof.port) "metrics" (or (.Values.prometheus) (.Values.metrics)) "ports" .Values.geth.service_node_port_per_full_node "extra_setup" ((include "celo-fullnode.aws-subnet-specific-nat-ip" .) | indent 4)) | indent 6 }}
{{ if .Values.geth.create_network_endpoint_group }}
{{ include "celo-fullnode.health-checker-server" (dict "protocol_name" "http" "tcp_check_port" 8545 "server_port" 6000) | indent 6 }}
{{ include "celo-fullnode.health-checker-server" (dict "protocol_name" "ws" "tcp_check_port" 8546 "server_port" 6001) | indent 6 }}
{{ end }}
      volumes:
      - name: data
        emptyDir: {}
      - name: health-check
        configMap:
          name: {{ template "common.fullname" . }}-health-check
          defaultMode: 0555
