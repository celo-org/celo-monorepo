---
# -- Number of celo-blockchain statefulset replicas
replicaCount: 2
# -- Override default name format. Use false to use default name format, or a string to override
fullnameOverride: false

# -- Enables aws specific settings
aws: false
# -- Enables azure specific settings
azure: false
# -- Enables gcp specific settings
gcp: false

ingress:
  # -- Enable ingress resource for rpc and ws endpoints
  enabled: false
  # -- Ingress class name
  ingressClassName: nginx
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  # -- Ingress hostnames
  hosts:
    - celo-fullnode.local
  # -- Ingress TLS configuration
  tls: []
  #  - secretName: celo-fullnode-tls
  #    hosts:
  #      - celo-fullnode.local

# -- Labels to add to `nodeSelector` field of the statefulset
nodeSelector: {}
  # pool: spot

# -- Labels to add to the podTemplateSpec from statefulset
extraPodLabels: {}
  # mode: archive

# -- Tolerations rules to add to `tolerations` field of the statefulset
tolerations: []
# - effect: NoSchedule
#   key: pool
#   operator: Equal
#   value: spot

storage:
  # -- Enable persistent storage for the celo-blockchain statefulset
  enable: true
  # -- Name of the storage class to use for the celo-blockchain statefulset
  storageClass: default
  # -- accessMode for the volumes
  accessModes: ReadWriteOnce
  # -- Size of the persistent volume claim for the celo-blockchain statefulset
  size: 20Gi
  snapshot:
    # -- Enable the use of a snapshot as a source for the celo-blockchain statefulset. Snapshot resource must exist in the same namepace
    enabled: false
    # -- Class for the snapshot
    kind: VolumeSnapshot
    # -- Name of the snapshot (must exist in the same namespace)
    name: forno-snapshot

geth:
  # -- Image for the celo-blockchain statefulset
  image:
    repository: us.gcr.io/celo-testnet/geth
    tag: master
    imagePullPolicy: IfNotPresent
  # -- Resources for `geth` container
  resources:
    requests:
      memory: "8Gi"
      cpu: "3"
    limits: {}
  # -- Blockchain sync mode. Valid values are: full, lightest, light and fast
  syncmode: full
  # -- Blockchain garbage collection mode. Valid values are: full and archive
  gcmode: full
  # -- Enable blockchain option `--ping-ip-from-packet`
  ping_ip_from_packet: false
  # -- Enable blockchain option `--use-in-memory-discovery-table`
  in_memory_discovery_table: false
  # -- Loggin verbosity. Valid values are: 0-5. 0 is the least verbose
  verbosity: 2
  # -- Array with Private keys used for as nodekey for the celo-blockchain replicas. Replica 0 will use the first ip, replica 1 the second, etc.
  node_keys: []
  # - 582849f34c5503110c01ec2b50f0537ca0ba2390674ad763e554762cdb02f314
  # - f6e3eeddc80be88946536c6d1818b510d4ae18a80a1ff6ef7eeff75ba3a88d4f
  # -- Array with 'public' ip addresses used for `nat=extip:<ip>` option. Replica 0 will use the first ip, replica 1 the second, etc.
  public_ip_per_node: []
  # - 1.2.3.4
  # - 5.6.7.8
  # -- Type of the LoadBalancer for the service attached to each replica. Each replica of the statefulset will have a service of this type.
  # If type is `LoadBalancer`, it will be created with the `public_ip_per_node` as the `loadBalancerIP`
  service_type: LoadBalancer
  # -- Create a differente service for each protocol
  service_protocols:
  - TCP
  - UDP
  # -- Used if nodePort service type is specified. This is only intended to be used in AWS.
  service_node_port_per_full_node: []
  # -- Expose RPC port externally in the individual replica services
  expose_rpc_externally: false
  # -- API's exposed in the RPC/WS interfaces
  rpc_apis: eth,net,rpc,web3
  # -- Gas cap that can be used in eth_call/estimateGas
  rpc_gascap: 10000000
  # -- Use GPC's `cloud.google.com/neg` annotations to configure NEG for the RPC/WS services
  create_network_endpoint_group: false
  # -- Celo-blockchain statefulset `updateStrategy`
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
      # maxUnavailable: 25%
      # maxSurge: 25%
  # -- Maximum number of netwook peers. Includes both inbound and outbound connections, and light clients
  maxpeers: 1150
  light:
    # -- Maximum number of light clients to serve, or light servers to attach to
    maxpeers: 1000
    # -- Maximum percentage of time allowed for serving LES requests (multi-threaded processing allows values over 100)
    serve: 70
  # -- WS-RPC server listening port
  ws_port: 8546
  # -- HPA configuration for celo-blockchain statefulset. Check official documentation for more info
  autoscaling:
    # -- Enable HPA for celo-blockchain statefulset
    enabled: false
    # -- Minimum number of replicas
    minReplicas: 1
    # -- Maximum number of replicas
    maxReplicas: 5
    # -- Metric reference for HPA
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 85
          type: Utilization
      type: Resource
    # -- HPA behavior configuration
    behavior:
      scaleDown:
        policies:
        - periodSeconds: 60
          type: Pods
          value: 2
        - periodSeconds: 60
          type: Percent
          value: 25
        selectPolicy: Max
        stabilizationWindowSeconds: 1800
      scaleUp:
        policies:
        - periodSeconds: 15
          type: Pods
          value: 2
        - periodSeconds: 15
          type: Percent
          value: 25
        selectPolicy: Max
        stabilizationWindowSeconds: 600

# -- Blockchain genesis configuration
genesis:
  # -- Network ID for custom testnet. Not used in case of mainnet, baklava or alfajores
  networkId: 42220
  # -- Network name. Valid values are mainnet, rc1 (both for mainnet), baklava or afajores
  network: rc1
  # -- Use a custom genesis shared as part of a configmap. Used for custom networks with small genesis files
  useGenesisFileBase64: false
  # -- Base64 encoded genesis file if `useGenesisFileBase64` is set to true
  genesisFileBase64: ""

# -- Enable celo-blockchain metrics and prometheus scraping
metrics: true
# -- Pprof configuration for celo-blockchain
pprof:
  enabled: true
  path: /debug/metrics/prometheus
  port: 6060
