ingressClassName: nginx
blockscout:
  eventStream:
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    port: 4000
    resources:
      requests:
        memory: 1000Mi
        cpu: 2
    enableEventStream: false
    beanstalkdPort: ""
    beanstalkdHost: ""
    beanstalkdTube: ""
    replicas: 0
    readinessProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
  indexer:
    terminationGracePeriodSeconds: 60
    port: 4001
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    db:
      name: blockscout
      connectionName: project:region:db-name
      # to be fetched from secrets
      # username: blockscout
      # password: password
      port: 5432
      proxy:
        host: 127.0.0.1
        port: 5432
        livenessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        resources:
          requests:
            memory: 500Mi
            cpu: 700m
    poolSize: 200
    poolSizeReplica: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    resources:
      requests:
        memory: 1000Mi
        cpu: 2
    affinity: {}
    nodeSelector: {}
    rpcRegion: "indexer"  
    primaryRpcRegion: "indexer"  
    fetchers:
      blockRewards:
        enabled: false
  api:
    suffix:
      enabled: false
      path: ""
    port: 4000
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 20%
    autoscaling:
        maxReplicas: 10
        minReplicas: 2
        target:
          cpu: 70
    rpcRegion: "api"  
    primaryRpcRegion: "indexer"  
    db:
      name: blockscout
      connectionName: project:region:db-name
      # to be fetched from secrets
      # username: blockscout
      # password: password
      port: 5432
      proxy:
        host: 127.0.0.1
        port: 5432
        livenessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        resources:
          requests:
            memory: 500Mi
            cpu: 700m
    poolSize: 30
    poolSizeReplica: 5
    rateLimit: "1000000"
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    resources:
      requests:
        memory: 500Mi
        cpu: 500m
    affinity: {}
    nodeSelector: {}
  web:
    host: ""
    suffix:
      enabled: false
      path: ""
    # used once to create additional resources for proper routing
    # of multiple environments on the same domain
    extraEnvironments:
      # format:
      # -
      #  environment: alfajores|baklava|rc1 etc.
      #  suffix: alfajores|baklava|mainnet etc, must match the suffix
      #          value configured for those environments
      #  ingressIp: x.x.x.x
      source: []
      # format:
      # -
      #  sourceHost: ""
      target: []
    port: 4000
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 20%
    autoscaling:
      maxReplicas: 5
      minReplicas: 2
      target:
        cpu: 70
    db:
      name: blockscout
      connectionName: project:region:db-name
      # to be fetched from secrets
      # username: blockscout
      # password: password
      port: 5432
      proxy:
        host: 127.0.0.1
        port: 5432
        livenessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        resources:
          requests:
            memory: 500Mi
            cpu: 700m
    poolSize: 30
    poolSizeReplica: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    sourcify:
      enabled: true
      serverUrl: https://sourcify.dev/server
      repoUrl: https://repo.sourcify.dev/contracts
    resources:
      requests:
        memory: 250M
        cpu: 500m
    affinity: {}
    nodeSelector: {}
    appsMenu:
      enabled: true
    recaptchaSecretName: ""  # k8s secret that needs to pre-exist
    stats:
      enabled: false
      reportUrl: ""
      makerdojo: ""
    rpcRegion: "web"  
    primaryRpcRegion: "indexer"
    liveUpdates:
      disabled: true
    homepage:
      showPrice: true
      showTxs: false
    accountPoolSize: 1
    tokenIcons:
      enabled: false
    basicAuth:
      enabled: false
  metadataCrawler:
    enabled: false
    schedule: "0 */2 * * *" # every 2 hours
    image:
      repository: gcr.io/celo-testnet/celo-monorepo
      tag: metadata-crawler-77a392216d4927e85ce4b683508fc0539aa92a34
  archiveNodes:
    jsonrpcHttpUrl: http://tx-nodes-private:8545
    jsonrpcWsUrl: ws://tx-nodes-private:8545
  fullNodes:
    jsonrpcPublicHttp: ""
  metrics:
    enabled: false
  affinity: {}
  nodeSelector: {}
  image:
    repository: gcr.io/celo-testnet/blockscout
    pullPolicy: IfNotPresent
    tag: v2.0.4-beta-celo
  healthyBlocksPeriod: 300
  erlangNodeName: blockscout
  cookieSecretName: blockscout-erlang-cookie
  db:
    drop: "false"
  epochRewards:
    enabled: true
  campaignBanner:
    refreshInterval: "60"
  grafanaUrl: https://clabs.grafana.net
  secrets:
    # Format:
    # secretName: gcp:secretmanager:projects/<project-id>/secrets/<env>-blockscout-<secret-key>
    # - <project-id> - numeric project id
    # - <env> - alfajores|baklava|rc1 etc.
    # - <secret-key> - name of the secret
    # Example: segmentKey: gcp:secretmanager:projects/365081401101/secrets/baklava-blockscout-segmentKey
    segmentKey: ""
    discordWebhookUrl: ""
    dbUser: ""
    dbPassword: ""
    recaptcha:
      projectId: ""
      siteKey: ""
      apiKey: ""
      secretKey: ""
    erlang:
      cookie: ""
    campaignBannerApiUrl: ""
  chain:
    subnetwork: Celo
    networkID: 1101
  domainName: celo-testnet.org
  gcp:
    projectId: celo-testnet-production
