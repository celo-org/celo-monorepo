ingressClassName: nginx
blockscout:
  indexer:
    terminationGracePeriodSeconds: 60
    port: 4001
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    db:
      name: blockscout
      connectionName: project:region:db-name
      # to be fetched from secrets
      # username: blockscout
      # password: password
      port: 5432
      proxy:
        host: 127.0.0.1
        port: 5432
        livenessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        resources:
          requests:
            memory: 500Mi
            cpu: 700m
    poolSize: 30
    poolSizeReplica: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: false
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    resources:
      requests:
        memory: 1000Mi
        cpu: 2
  api:
    suffix:
      enabled: false
      path: ""
    port: 4000
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 20%
    autoscaling:
        maxReplicas: 10
        minReplicas: 2
        target:
          cpu: 70
    db:
      name: blockscout
      connectionName: project:region:db-name
      # to be fetched from secrets
      # username: blockscout
      # password: password
      port: 5432
      proxy:
        host: 127.0.0.1
        port: 5432
        livenessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        resources:
          requests:
            memory: 500Mi
            cpu: 700m
    poolSize: 30
    poolSizeReplica: 5
    rateLimit: "1000000"
    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    resources:
      requests:
        memory: 500Mi
        cpu: 500m
  web:
    host: ""
    suffix:
      enabled: false
      path: ""
    # used once to create additional resources for proper routing
    # of multiple environments on the same domain
    extraEnvironments:
      # format:
      # -
      #  environment: alfajores|baklava|rc1 etc.
      #  suffix: alfajores|baklava|mainnet etc, must match the suffix
      #          value configured for those environments
      #  ingressIp: x.x.x.x
      source: []
      # format:
      # -
      #  sourceHost: ""
      target: []
    port: 4000
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 20%
    autoscaling:
      maxReplicas: 5
      minReplicas: 2
      target:
        cpu: 70
    db:
      name: blockscout
      connectionName: project:region:db-name
      # to be fetched from secrets
      # username: blockscout
      # password: password
      port: 5432
      proxy:
        host: 127.0.0.1
        port: 5432
        livenessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          enabled: false
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        resources:
          requests:
            memory: 500Mi
            cpu: 700m
    poolSize: 30
    poolSizeReplica: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    sourcify:
      enabled: true
      serverUrl: https://sourcify.dev/server
      repoUrl: https://repo.sourcify.dev/contracts
    resources:
      requests:
        memory: 250M
        cpu: 500m
    appsMenu:
      enabled: true
      swapList: '[{"url":"https://ubeswap.org/", "title":"Ubeswap"}, {"url":"https://symmetric.finance/", "title":"Symmetric"}, {"url":"https://www.mobius.money/", "title":"Mobius"}, {"url":"https://mento.finance/", "title":"Mento-fi"}, {"url":"https://swap.bitssa.com/", "title":"Swap Bitssa"}]'
      defiList: '[{"url":"https://moola.market/", "title":"Moola"},  {"url":"https://www.pinnata.xyz/farm#/", "title":"Pinnata"}, {"url":"https://goodghosting.com/", "title":"GoodGhosting"}, {"url":"https://revo.market/", "title":"Revo"}, {"url":"https://www.immortaldao.finance", "title":"ImmortalDao Finance"}]'
      walletList: '[{"url":"https://valoraapp.com/", "title":"Valora"}, {"url":"https://celoterminal.com/", "title":"Celo Terminal"}, {"url":"https://celowallet.app/", "title":"Celo Wallet"}, {"url":"https://www.nodewallet.xyz/", "title":"Node Wallet"}]'
      nftList: '[{"url":"https://niftydrop.net/", "title":"Niftydrop"}, {"url":"https://nfts.valoraapp.com/", "title":"NFT Viewer"}, {"url":"https://cyberbox.art/", "title":"Cyberbox"}, {"url":"https://nom.space/", "title":"Nomspace"}, {"url":"https://alities.io/", "title":"Alities"}]'
      connectList: '[{"url":"https://impactmarket.com/", "title":"impactMarket"}, {"url":"https://talentprotocol.com/", "title":"Talent Protocol"}, {"url":"https://doni.app/", "title":"Doni"}]'
      spendList: '[{"url":"https://giftcards.bidali.com/", "title":"Bidali"}, {"url":"https://flywallet.io/", "title":"Flywallet"},{"url":"https://chispend.com/", "title":"ChiSpend"}]'
      financeToolsList: '[{"url":"https://celotracker.com/", "title":"Celo Tracker"}, {"url":"https://celo.tax/", "title":"celo.tax"}, {"url":"https://trelis.com/", "title": "Trelis"}]'
      learningList: '[{"url": "https://celo.org/papers/whitepaper", "title":"Celo Whitepaper"}, {"url": "https://learn.figment.io/protocols/celo", "title":"Learn Celo"}, {"url": "https://www.coinbase.com/price/celo", "title":"Coinbase Earn"}]'
      resourcesList: '[{"url":"https://celovote.com/", "title":"Celo Vote"}, {"url":"https://forum.celo.org/", "title":"Celo Forum"}, {"url":"https://thecelo.com/", "title":"TheCelo"}, {"url":"https://celo.org/validators/explore", "title":"Validators"}, {"url":"https://celoreserve.org/", "title":"Celo Reserve"}, {"url":"https://docs.celo.org/", "title":"Celo Docs"}]'
    recaptchaSecretName: ""  # k8s secret that needs to pre-exist
    stats:
      enabled: false
      reportUrl: ""
      makerdojo: ""
  metadataCrawler:
    enabled: false
    schedule: "0 */2 * * *" # every 2 hours
    image:
      repository: gcr.io/celo-testnet/celo-monorepo
      tag: metadata-crawler-77a392216d4927e85ce4b683508fc0539aa92a34
  archiveNodes:
    jsonrpcHttpUrl: http://tx-nodes-private:8545
    jsonrpcWsUrl: ws://tx-nodes-private:8545
  fullNodes:
    jsonrpcPublicHttp: ""
  metrics:
    enabled: false
  image:
    repository: gcr.io/celo-testnet/blockscout
    pullPolicy: IfNotPresent
    tag: v2.0.4-beta-celo
  healthyBlocksPeriod: 300
  erlangNodeName: blockscout
  cookieSecretName: blockscout-erlang-cookie
  db:
    drop: "false"
  epochRewards:
    enabled: false
  campaignBanner:
    refreshInterval: "60"
  grafanaUrl: https://clabs.grafana.net
  secrets:
    # Format:
    # secretName: gcp:secretmanager:projects/<project-id>/secrets/<env>-blockscout-<secret-key>
    # - <project-id> - numeric project id
    # - <env> - alfajores|baklava|rc1 etc.
    # - <secret-key> - name of the secret
    # Example: segmentKey: gcp:secretmanager:projects/365081401101/secrets/baklava-blockscout-segmentKey
    segmentKey: ""
    discordWebhookUrl: ""
    dbUser: ""
    dbPassword: ""
    recaptcha:
      projectId: ""
      siteKey: ""
      apiKey: ""
    erlang:
      cookie: ""
    campaignBannerApiUrl: ""
  chain:
    subnetwork: Celo
    networkID: 1101
  domainName: celo-testnet.org
  gcp:
    projectId: celo-testnet-production
