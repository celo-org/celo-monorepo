{{- $reuseClient := .Values.reuse_light_clients | default false -}}
apiVersion: v1
kind: Service
metadata:
  name: load-test
  labels:
    component: load-test
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    component: load-test
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.environment }}-load-test
  labels:
    app: load-test
    chart: load-test
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: load-test
spec:
  podManagementPolicy: Parallel
  serviceName: load-test
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: load-test
      release: {{ .Release.Name }}
      component: load-test
  template:
    metadata:
      labels:
        app: load-test
        release: {{ .Release.Name }}
        component: load-test
    spec:
      initContainers:
      - name: generate-keys
        image: {{ .Values.celotool.image.repository }}:{{ .Values.celotool.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args:
        - |
          [[ $REPLICA_NAME =~ -([0-9]+)$ ]] || exit 1
          RID=${BASH_REMATCH[1]}
          echo $RID > /root/.celo/rid
          celotooljs.sh generate public-key --mnemonic "$MNEMONIC" --accountType bootnode --index 0 > /root/.celo/bootnodeEnodeAddress
          echo -n "Generating Bootnode enode address for the validator: "
          cat /root/.celo/bootnodeEnodeAddress

          BOOTNODE_IP_ADDRESS=${{ .Release.Namespace | upper }}_BOOTNODE_SERVICE_HOST
          echo `cat /root/.celo/bootnodeEnodeAddress`@$BOOTNODE_IP_ADDRESS:30301 > /root/.celo/bootnodeEnode
          echo -n "Generating Bootnode enode for the validator: "
          cat /root/.celo/bootnodeEnode

          celotooljs.sh generate prepare-load-test \
            --mnemonic "$MNEMONIC" \
            --threads {{ .Values.threads | default "1" }} \
            --index $RID
        command:
        - bash
        - -c
        env:
        - name: REPLICA_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MNEMONIC
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-load-test
              key: mnemonic
        volumeMounts:
        - name: data
          mountPath: /root/.celo
{{ include "common.init-genesis-container" .  | indent 6 }}
      - name: import-geth-account
        image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - |
          for thread in $(seq 0 {{ sub .Values.threads 1 | default "0" }}); do
            geth --nousb account import --password /root/.celo/account/accountSecret /root/.celo/pkey$thread || true
          done
        volumeMounts:
        - name: data
          mountPath: /root/.celo
        - name: account
          mountPath: "/root/.celo/account"
          readOnly: true
      containers:
{{- if $reuseClient }}
      - name: geth
        image: {{ $.Values.geth.image.repository }}:{{ $.Values.geth.image.tag }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - |-
          set -euo pipefail
          cp /var/geth/static-nodes.json /root/.celo/static-nodes.json

          ACCOUNT_ADDRESSES=$(cat /root/.celo/address | tr '\n' ',')
          ACCOUNT_ADDRESSES=${ACCOUNT_ADDRESSES::-1}

          exec geth \
          --datadir /root/.celo \
          --ipcpath=geth.ipc \
          --nousb \
          --rpc \
          --rpcapi=eth,web3,debug,admin,personal,net \
          --allow-insecure-unlock \
          --rpcvhosts=* \
          --networkid={{ $.Values.geth.networkID }} \
          --nodekey=/root/.celo/pkey0 \
          --syncmode=fast \
          --consoleformat=json \
          --consoleoutput=stdout \
          --verbosity=1 \
          --unlock=$ACCOUNT_ADDRESSES \
          --password=/root/.celo/account/accountSecret \
          --port 30303 \
          --rpcport 8545
        resources:
          requests:
            memory: 4Gi
            cpu: 2
        volumeMounts:
        - name: data
          mountPath: /root/.celo
        - name: config
          mountPath: /var/geth
        - name: account
          mountPath: "/root/.celo/account"
          readOnly: true
{{- else }}
{{- range $index, $e := until (.Values.threads | int) }}
      - name: geth-{{ $index }}
        image: {{ $.Values.geth.image.repository }}:{{ $.Values.geth.image.tag }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - |-
          set -euo pipefail
          cp -rp /root/.celo_share /root/.celo
          cp /var/geth/static-nodes.json /root/.celo/static-nodes.json

          ACCOUNT_ADDRESS=$(awk 'NR=={{ add $index 1 }}' /root/.celo/address)

          exec geth \
          --nousb \
          --rpc \
          --rpcapi=eth,web3,debug,admin,personal,net \
          --allow-insecure-unlock \
          --rpcvhosts=* \
          --networkid={{ $.Values.geth.networkID }} \
          --nodekey=/root/.celo/pkey{{ $index }} \
          --syncmode=lightest \
          --consoleformat=json \
          --consoleoutput=stdout \
          --verbosity=1 \
          --unlock=$ACCOUNT_ADDRESS \
          --password=/root/.celo/account/accountSecret \
          --port {{ add 30303 $index }} \
          --rpcport {{ add 8545 $index }}
        resources:
          requests:
            memory: 200Mi
            cpu: 100m
        volumeMounts:
        - name: data
          mountPath: /root/.celo_share
          readOnly: true
        - name: config
          mountPath: /var/geth
        - name: account
          mountPath: "/root/.celo_share/account"
          readOnly: true
{{- end }}
{{- end }}
      - name: simulate-client
        image: {{ .Values.celotool.image.repository }}:{{ .Values.celotool.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
          runAsUser: 0
        command:
          - bash
          - "-c"
          - |
            RID=`cat /root/.celo/rid`

            # Send the txs to the next load test client
            RECIPIENT_INDEX=$(( ($RID + 1) % {{ .Values.replicas }} ))

            exec celotooljs.sh geth simulate-client \
{{- if $reuseClient }}
              --reuse-client \
{{- end }}
              --index $RID \
              --recipient-index $RECIPIENT_INDEX \
              --delay {{ .Values.delay }} \
              --mnemonic "$MNEMONIC" \
              --blockscout-url {{ .Values.blockscout.url }} \
              --blockscoutMeasurePercent {{ .Values.blockscout.measurePercent }} \
              --client-count {{ .Values.threads | default "1" }}
        resources:
          requests:
            memory: 4Gi
            cpu: 2
        env:
        - name: MNEMONIC
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-load-test
              key: mnemonic
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-load-test
              key: accountSecret
        volumeMounts:
        - name: data
          mountPath: /root/.celo
      volumes:
      - name: data
        emptyDir: {}
      - name: config
        configMap:
          name: {{ .Values.environment }}-load-test-config
      - name: account
        secret:
          secretName: {{ .Values.environment }}-load-test
{{- if $reuseClient }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: ssd
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.geth.diskSize | default 10 }}Gi
{{- end }}
