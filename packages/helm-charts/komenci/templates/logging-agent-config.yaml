apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-agent-config
  namespace: default
data:
  credentials-json: |
{{ .Values.loggingAgent.credentials | b64dec | indent 4 }}
  app-conf: |
    # Tails the container logs into standard JSON
    <source>
      @type tail
      path /var/log/containers/*.log
      path_key file_path
      pos_file /opt/containers.log.pos
      tag komenci.app.{{ .Values.environment.network }}
      limit_recently_modified 1d
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    # Parses the kubernetes context from the container log name
    <filter komenci.app.**>
      @type parser
      format /var\/log\/containers\/(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace>[^_]+)_(?<container_name>.+)-(?<container_id>[a-z0-9]{64})\.log$/
      reserve_data true
      emit_invalid_record_to_error false
      key_name file_path
    </filter>

    <filter komenci.app.**>
      @type grep
      <regexp>
        key namespace
        pattern /{{ .Values.environment.name }}/
      </regexp>
    </filter>

    <filter komenci.app.**>
      @type parser
      key_name log
      reserve_time true
      reserve_data true

      <parse>
        @type multi_format
        <pattern>
          format json
        </pattern>
        <pattern>
          format none
        </pattern>
      </parse>
    </filter>

    # Transforms the container log into a user friendly format
    <filter komenci.app.**>
      @type record_transformer
      enable_ruby
      <record>
        message ${record['message'] || record['msg'] || record['log']}
        severity ${record['severity'] || if record['stream'] == 'stderr' then 'ERROR' else 'INFO' end}
        "logging.googleapis.com/local_resource_id" ${"k8s_container.#{record['namespace']}.#{record['pod_name']}.#{record['container_name']}"}
      </record>
      remove_keys stream,log,file_path,msg,namespace,pod_name,container_name
    </filter>

  google-fluentd-conf: |
    @include config.d/*.conf

    # Prometheus monitoring.
    <source>
      @type prometheus
      port 24231
    </source>
    <source>
      @type prometheus_monitor
    </source>

    # Do not collect fluentd's own logs to avoid infinite loops.
    <label @FLUENT_LOG>
      <match **>
        @type null
      </match>
    </label>

    # Add a unique insertId to each log entry that doesn't already have it.
    # This helps guarantee the order and prevent log duplication.
    <filter **>
      @type add_insert_ids
    </filter>

    # Configure all sources to output to Google Cloud Logging
    <match **>
      @type google_cloud
      label_map {
        "container_id": "container_id"
      }
      use_metadata_service false
      buffer_type file
      buffer_path /var/log/google-fluentd/buffers
      buffer_chunk_limit 512KB
      flush_interval 5s
      disable_retry_limit false
      retry_limit 3
      retry_wait 10
      max_retry_wait 300
      num_threads 8
      detect_json true
      use_grpc true
      k8s_cluster_name {{ .Values.environment.cluster.name }}
      k8s_cluster_location {{ .Values.environment.cluster.location }}
    </match>

