# adapted from https://github.com/CircleCI-Public/circleci-demo-react-native
# and https://github.com/facebook/react-native/blob/master/.circleci/config.yml

version: 2
reference:
  workspace: &workspace
    ~/src
  ## Configurations
  android_config: &android_config
    working_directory: *workspace
    macos:
      xcode: "10.2.1"
    shell: /bin/bash --login -eo pipefail
    environment:
      TERM: dumb
      JVM_OPTS: -Xmx3200m


defaults: &defaults
  working_directory: ~/app
  docker:
    - image: celohq/node10-gcloud
  environment:
    # To avoid ENOMEM problem when running node
    NODE_OPTIONS: "--max-old-space-size=4096"

android-defaults: &android-defaults
  <<: *defaults
  docker:
    - image: circleci/android:api-28-node8-alpha
  environment:
    _JAVA_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
    GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m -XX:+HeapDumpOnOutOfMemoryError"'

general:
  artifacts:
    - "mobile/coverage"
    - "protocol/coverage"

jobs:
  install_dependencies:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-

      - checkout

      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      - run:
          name: Verify setup for incremental testing
          command: |
            set -euo pipefail
            cd ~/app
            set -v
            # To get the "master" branch mapping
            git checkout master
            git checkout ${CIRCLE_BRANCH}
            # Verify that following commands work, they are later called in the incremental testing script
            # There output does not matter here, the fact that they finish successfully does.
            git rev-parse --abbrev-ref HEAD

      - attach_workspace:
          at: ~/app

      - restore_cache:
          keys:
            - yarn-v2-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-v2-{{ arch }}-{{ .Branch }}-
            - yarn-v2-{{ arch }}-
            - yarn-v2-

      - run:
          name: Delete @celo dir from node_modules (if its there)
          command: rm -rf ~/app/node_modules/@celo

      - run:
          name: Install dependencies
          command: |
            # Deals with yarn install flakiness which can come due to yarnpkg.com being
            # unreliable. For example, https://circleci.com/gh/celo-org/celo-monorepo/82685
            yarn install || yarn install
      - run:
          name: Fail if someone forgot to commit "yarn.lock"
          command: |
            if [[ $(git status --porcelain) ]]; then
              echo "There are git differences after running yarn install"
              exit 1
            fi
      - run: npm rebuild scrypt

      - save_cache:
          key: yarn-v2-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/*/node_modules

      - run:
          name: Build packages
          command: |
            # separate build to avoid ENOMEM in CI :(
            yarn build --scope @celo/utils
            yarn build --scope @celo/protocol
            yarn build --scope docs
            yarn build --scope @celo/walletkit
            yarn build --ignore @celo/protocol --ignore docs --ignore @celo/walletkit

      - persist_to_workspace:
          root: .
          paths:
            - .

  mobile_e2e_test:
    <<: *android_config
    resource_class: large
    steps:
      - checkout
      - run: cd ~/src/
      - restore_cache:
          keys:
            - yarn-v4-macos-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-v4-macos-{{ .Branch }}-
            - yarn-v4-macos-
            - yarn-v4-
      - restore_cache:
          keys:
            - android-emulator-image-v3-{{ checksum "packages/mobile/scripts/install_android_emulator_image.sh" }}
      - run:
          name: Setup environment variables
          command: |
            echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:${HOME}/.yarn/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:/usr/local/share/android-sdk/tools/bin"' >> $BASH_ENV
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
            export PATH=$PATH:/usr/local/share/android-sdk/platform-tools/
      - run:
          name: Install Android sdk
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk
      - run:
          name: Install emulator dependencies
          command: (yes | bash ./packages/mobile/scripts/install_android_emulator_image.sh > /dev/null) || true
      - save_cache:
          key: android-emulator-image-v3-{{ checksum "packages/mobile/scripts/install_android_emulator_image.sh" }}
          paths:
            - /usr/local/Caskroom/android-sdk/*
      - run:
          name: Install Android dependencies
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install cask
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-platform-tools
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask-versions
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install homebrew/cask-versions/adoptopenjdk8
      - run: 
          name: Creace Android Virtual Device (AVD)
          command: |
            avdmanager create avd -n Nexus_5X_API_28_x86 -k "system-images;android-26;google_apis;x86" -g google_apis -d "Nexus 5"
            # Copy device configuarion, adv for some reason doesn't
            mkdir -p ~/.android/avd/Nexus_5X_API_28_x86.avd/ && cp packages/mobile/e2e/conf/avd_conf.ini ~/.android/avd/Nexus_5X_API_28_x86.avd/config.ini
      - run:
          name: Set up nodejs
          command: |
            echo `. ~/.bash_profile` # for some mreason just `source ~/.bash_profile` makes the build fail
            # install nvm
            HOMEBREW_NO_AUTO_UPDATE=1 brew install wget
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash
            echo -e '\nexport NVM_DIR="$HOME/.nvm"' >> ~/.bash_profile
            echo -e '\n[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bash_profile # add nvm to path
      - run: echo `. ~/.bash_profile`
      - run: nvm install v10.16.3 && nvm use v10.16.3
      - run:
          name: install miscellaneous
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install tree
      # Currently not used
      # - run: npm install --global react-native-kill-packager 
      - run:
          # need to run this because it's another OS than install_dependecies job
          name: yarn
          command: |
            # TODO, Make cache work and figure out why this doesn't work
            # if [ ! -d node_modules ]; then
            #     echo "No cache found, install yarn. Hold tight."
            #     yarn
            # else
            #   echo "Cache found, just run post-script."
            #   yarn postinstall
            # fi
            yarn
            yarn build 
      - save_cache:
          key: yarn-v4-macos-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/src/node_modules
            - ~/src/packages/*/node_modules
            - ~/.cache/yarn
      - run:
          name: Install some extra dependencies the app needs
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pidcat watchman
      - restore_cache:
          key: yarn-v3-{{ arch }}-{{ .Branch }}-{{ checksum "packages/mobile/android/build.gradle" }}-{{ checksum "packages/mobile/android/settings.gradle" }}-{{ checksum "packages/mobile/android/app/build.gradle" }}-{{ checksum "packages/mobile/.env.test" }}
      - run: cd ~/src/packages/mobile && yarn test:build-e2e # tests seem to fail if the app is built at the same time the emulator runs
      - run:
          name: Start emulator
          command: cd ~/src/packages/mobile && bash ./scripts/start_emulator.sh
          background: true
      - run: 
          name: Start metro
          command: cd ~/src/packages/mobile && yarn start
          background: true
      - run: cp node_modules/.bin/jest packages/mobile/node_modules/.bin/ # for some reason jest is just not there
      # TODO - run: lock device
      - run: tree packages/mobile/android/app/build/outputs/apk/
      - run:
          name: Sleep until Device connects
          command: cd ~/src/packages/mobile && bash ./scripts/wait_for_emulator_to_connect.sh
      # TODO - run: unlock device
      - run:
          name: Run yarn dev
          command: cd ~/src/packages/mobile && ENVFILE=".env.test" yarn dev
      - run:
          name: Run test itself
          command: cd ~/src/packages/mobile && ENVFILE=".env.test" yarn test:detox
      - run: cd ~/src
      - save_cache:
          key: yarn-v3-{{ arch }}-{{ .Branch }}-{{ checksum "packages/mobile/android/build.gradle" }}-{{ checksum "packages/mobile/android/settings.gradle" }}-{{ checksum "packages/mobile/android/app/build.gradle" }}-{{ checksum "packages/mobile/.env.test" }}
          paths:
            - ~/src/packages/mobile/android/app/build/outputs/apk/
            - ~/.gradle/
  
  lint-checks:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      # If this fails, fix it with 
      # `./node_modules/.bin/prettier --config .prettierrc.js --write '**/*.+(ts|tsx|js|jsx)'`
      - run: yarn run prettify:diff
      - run: yarn run lint

  general-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run lerna --ignore @celo/contractkit --ignore @celo/mobile --ignore @celo/protocol --ignore @celo/celotool --ignore @celo/walletkit --ignore @celo/celocli run test

  mobile-test-build-app:
    working_directory: ~/app
    docker:
      - image: circleci/android:api-28

    steps:
      - attach_workspace:
          at: ~/app

      - run:
          name: Build Android app (debug version)
          command: |
            set -euo pipefail
            cd packages/mobile/android
            ENVFILE=.env.test ./gradlew assembleDebug
            cd -

  mobile-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app

      - run:
          name: Ensure translations are not missing
          command: |
            cd packages/mobile
            ./scripts/verify_locales.sh

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            # Tests fail with https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory without this
            NODE_OPTIONS="--max-old-space-size=4096" yarn --cwd packages/mobile test:ci
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: packages/mobile/coverage
          destination: mobile/coverage

      - run:
          name: copy
          command: |
            mkdir -p packages/mobile/mobile/coverage
            cp -r packages/mobile/coverage packages/mobile/mobile/
      - run:
          name: Upload to CodeCov
          command: yarn codecov -F mobile

  verification-pool-api:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn --cwd packages/verification-pool-api test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

  protocol-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/protocol,${PWD}/packages/utils,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: test
          # Flaky tests - run them twice
          command: yarn --cwd packages/protocol test || yarn --cwd packages/protocol test

  # Slow and flaky compared to protocol-test which runs without coverage
  protocol-test-with-code-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/protocol,${PWD}/packages/utils,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: test
          # Flaky tests - run them twice
          command: yarn --cwd packages/protocol test:coverage || yarn --cwd packages/protocol test:coverage
      - store_artifacts:
          path: packages/protocol/coverage
          destination: protocol/coverage
      - run:
          name: Upload to CodeCov
          command: yarn codecov -F protocol

  contractkit-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Generate DevChain
          command: |
            (cd packages/contractkit && yarn test:prepare)
      - run:
          name: Run Tests
          command: yarn --cwd=packages/contractkit test

  walletkit-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: test alphanet
          command: |
            # Test alphanet
            set -euo pipefail
            yarn --cwd=packages/walletkit build alfajores
            yarn --cwd=packages/walletkit test

      - run:
          name: test alphanet staging
          command: |
            # Test alphanet
            set -euo pipefail
            yarn --cwd=packages/walletkit build alfajoresstaging
            yarn --cwd=packages/walletkit test

  cli-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Test
          command: |
            set -euo pipefail
            yarn --cwd=packages/cli test
      - run:
          name: Fail if someone forgot to commit CLI docs
          command: |
            yarn --cwd=packages/cli docs
            if [[ $(git status packages/docs/command-line-interface --porcelain) ]]; then
              git --no-pager diff packages/docs/command-line-interface
              echo "There are git differences after generating CLI docs"
              exit 1
            fi
      - run:
          name: Verify that a new account can be created
          command: |
            yarn --cwd=packages/cli run celocli account:new

      - run:
          name: Install and test the npm package
          command: |
            set -euo pipefail
            cd packages/cli
            yarn pack
            cd /tmp
            npm install ~/app/packages/cli/celo-celocli-*.tgz
            ./node_modules/.bin/celocli account:new # Small test

  end-to-end-geth-transfer-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/celotool,${PWD}/packages/protocol,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: Setup Go language
          command: |
            set -e
            set -v
            wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
            tar xf go1.11.5.linux-amd64.tar.gz -C /tmp
            ls /tmp/go/bin/go
            /tmp/go/bin/go version
      - run:
          name: Setup Rust language
          command: |
            set -e
            set -v
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            rustup install 1.36.0
            rustup default 1.36.0
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            go version
            cd packages/celotool
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ./ci_test_transfers.sh checkout master

  end-to-end-geth-exit-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/celotool,${PWD}/packages/protocol,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: Setup Go language
          command: |
            set -e
            set -v
            wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
            tar xf go1.11.5.linux-amd64.tar.gz -C /tmp
            ls /tmp/go/bin/go
            /tmp/go/bin/go version
      - run:
          name: Setup Rust language
          command: |
            set -e
            set -v
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            rustup install 1.36.0
            rustup default 1.36.0
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            go version
            cd packages/celotool
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ./ci_test_exit.sh checkout master

  end-to-end-geth-governance-test:
    <<: *defaults
    # Source: https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/celotool,${PWD}/packages/protocol,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: Setup Go language
          command: |
            set -e
            set -v
            wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
            tar xf go1.11.5.linux-amd64.tar.gz -C /tmp
            ls /tmp/go/bin/go
            /tmp/go/bin/go version
      - run:
          name: Setup Rust language
          command: |
            set -e
            set -v
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            rustup install 1.36.0
            rustup default 1.36.0
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            go version
            cd packages/celotool
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ./ci_test_governance.sh checkout master

  end-to-end-geth-sync-test:
    <<: *defaults
    # Source: https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/celotool,${PWD}/packages/protocol,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: Setup Go language
          command: |
            set -e
            set -v
            wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
            tar xf go1.11.5.linux-amd64.tar.gz -C /tmp
            ls /tmp/go/bin/go
            /tmp/go/bin/go version
      - run:
          name: Setup Rust language
          command: |
            set -e
            set -v
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            rustup install 1.36.0
            rustup default 1.36.0
      - run:
          name: Run test
          command: |
            set -e
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            go version
            cd packages/celotool
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ./ci_test_sync.sh checkout master

  end-to-end-geth-integration-sync-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            FILES_TO_CHECK="${PWD}/packages/celotool,${PWD}/packages/protocol,${PWD}/.circleci/config.yml"
            ./scripts/ci_check_if_test_should_run_v2.sh ${FILES_TO_CHECK}
      - run:
          name: Setup Go language
          command: |
            set -e
            set -v
            wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
            tar xf go1.11.5.linux-amd64.tar.gz -C /tmp
            ls /tmp/go/bin/go
            /tmp/go/bin/go version
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            rustup install 1.36.0
            rustup default 1.36.0
      - run:
          name: Run test
          command: |
            set -e
            export PATH=${PATH}:~/.cargo/bin:/tmp/go/bin
            go version
            cd packages/celotool
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ./ci_test_sync_with_network.sh checkout master

  web:
    working_directory: ~/app
    docker:
      - image: celohq/node8:gcloud
    steps:
      - attach_workspace:
          at: ~/app

      - run: mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run: cd packages/web && ./circle_deploy.sh

  test-typescript-npm-package-install:
    working_directory: ~/app
    docker:
      - image: celohq/node8:gcloud
    steps:
      - run:
          name: Installing npm package - @celo/typescript
          command: yarn add @celo/typescript

  test-utils-npm-package-install:
    working_directory: ~/app
    docker:
      - image: celohq/node8:gcloud
    steps:
      - run:
          name: Installing npm package - @celo/utils
          command: yarn add @celo/utils

  test-walletkit-npm-package-install:
    working_directory: ~/app
    docker:
      - image: celohq/node8:gcloud
    steps:
      - run:
          name: Installing npm package - @celo/walletkit
          command: |
            # Try one more time in case the first attempt fails
            # to deal with scenarios like https://circleci.com/gh/celo-org/celo-monorepo/23329
            yarn add @celo/walletkit || yarn add @celo/walletkit

  test-celocli-npm-package-install:
    working_directory: ~/app
    docker:
      - image: celohq/node8:gcloud
    steps:
      - run:
          name: Installing npm package - @celo/celocli
          command: npm install @celo/celocli
      - run:
          name: Minor test of celocli
          command: ./node_modules/.bin/celocli account:new # Small test

workflows:
  version: 2
  celo-monorepo-build:
    jobs:
      - install_dependencies
      - mobile_e2e_test:
          requires:
            - install_dependencies
            - mobile-test-build-app
      - lint-checks:
          requires:
            - install_dependencies
      - general-test:
          requires:
            - install_dependencies
      - walletkit-test:
          requires:
            - install_dependencies
      - cli-test:
          requires:
            - install_dependencies
      - contractkit-test:
          requires:
            - install_dependencies
      - mobile-test:
          requires:
            - lint-checks
      - mobile-test-build-app:
          requires:
            - mobile-test
      - verification-pool-api:
          requires:
            - lint-checks
      - protocol-test:
          requires:
            - lint-checks
            - walletkit-test
      - end-to-end-geth-transfer-test:
          requires:
            - lint-checks
            - walletkit-test
      - end-to-end-geth-exit-test:
          requires:
            - lint-checks
            - walletkit-test
      - end-to-end-geth-governance-test:
          requires:
            - lint-checks
            - walletkit-test
      - end-to-end-geth-sync-test:
          requires:
            - lint-checks
            - walletkit-test
      - end-to-end-geth-integration-sync-test:
          requires:
            - lint-checks
            - walletkit-test
  npm-install-testing-cron-workflow:
    triggers:
      - schedule:
          # 7 PM in UTC = noon in PDT.
          # Best for test to fail during SF afternoon, so that, someone can fix it during the day time.
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-typescript-npm-package-install
      - test-utils-npm-package-install
      - test-walletkit-npm-package-install
      - test-celocli-npm-package-install
  protocol-testing-with-code-coverage-cron-workflow:
    triggers:
      - schedule:
          # 1 PM in UTC = 6 AM in PDT.
          # Best for this slow test (~3 hours) to run during SF early morning.
          cron: "0 13 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - install_dependencies
      - lint-checks:
          requires:
            - install_dependencies
      - walletkit-test:
          requires:
            - install_dependencies
      - protocol-test-with-code-coverage:
          requires:
            - lint-checks
            - walletkit-test
