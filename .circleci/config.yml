# adapted from https://github.com/CircleCI-Public/circleci-demo-react-native
# and https://github.com/facebook/react-native/blob/master/.circleci/config.yml

version: 2.1
parameters:
  # When you need to force a rebuild of the node modules cache then bump this version
  node-modules-cache-version:
    type: integer
    default: 7
reference:
  workspace: &workspace ~/app
  ## Configurations
  android_config: &android_config
    working_directory: *workspace
    macos:
      # This is the last version that has openjdk 8
      # On newer openjdk (11) we get the following error when running sdkmanager
      # `Exception in thread "main" java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema`
      # See https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '11.5.0'
    shell: /bin/bash --login -eo pipefail
    environment:
      TERM: dumb
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"'

defaults: &defaults
  working_directory: ~/app
  docker:
    - image: us.gcr.io/celo-testnet/circleci-node12:1.0.0
  environment:
    # To avoid ENOMEM problem when running node
    NODE_OPTIONS: '--max-old-space-size=4096'

contract-defaults: &contract-defaults
  <<: *defaults
  environment:
    RELEASE_TAG: core-contracts.v4

e2e-defaults: &e2e-defaults
  <<: *defaults
  docker:
    - image: celohq/circleci:geth1.9-2
  environment:
    CELO_BLOCKCHAIN_BRANCH_TO_TEST: master
general:
  artifacts:
    - 'protocol/coverage'

commands:
  yarn_install:
    steps:
      - run:
          name: Create cache checksum files
          command: |
            mkdir -p ~/.tmp/checksumfiles
            # Concatenate package.json so we can use them as a part of the cache key
            find . -maxdepth 5 -type f -name 'package.json' -not -path "*node_modules*" -print0 | sort -z | xargs -0 cat > ~/.tmp/checksumfiles/package.json
            # Concatenate patches so we can use them as a part of the cache key
            find ./patches -type f -name '*.patch' -print0 | sort -z | xargs -0 cat > ~/.tmp/checksumfiles/patches
      - restore_cache:
          name: Restore cached node_modules
          keys:
            # Using a single cache key here as we don't want to fallback on restoring node_modules produced
            # by a different yarn.lock and patches
            - node_modules-<< pipeline.parameters.node-modules-cache-version >>-{{ arch }}-{{ checksum "yarn.lock" }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/patches" }}
      - run:
          name: Extract cached node_modules (if present)
          command: |
            if [ -e ~/.tmp/node_modules.tgz ]; then
              tar -xf ~/.tmp/node_modules.tgz
            else
              # Dependencies have changed, create beacon file used by the install and check licenses steps
              touch ~/.tmp/yarn_deps_have_changed
            fi

      - run:
          name: Install dependencies
          command: |
            if [ ! -e ~/.tmp/yarn_deps_have_changed ]; then
              # Though `yarn install` is instantaneous with up-to-date node_modules which is the case when we've restored cached node_modules,
              # there's currently a bug with the generated node_modules/.yarn-integrity file which is apparently not entirely stable
              # for a given `yarn.lock`, through different runs of `yarn install`
              # This causes the `yarn check --integrity` step to fail
              # and hence `yarn install` has to redo all the work again (taking unnecessary time, and making the current cache useless)
              # See https://github.com/yarnpkg/yarn/issues/6703
              # So here to workaround this issue, we skip the install if dependencies haven't changed
              echo "Skipping install, dependencies haven't changed"
              # We still have to run postinstall though
              yarn run postinstall
              exit 0
            fi

            # Deals with yarn install flakiness which can come due to yarnpkg.com being
            # unreliable. For example, https://circleci.com/gh/celo-org/celo-monorepo/82685
            yarn install || yarn install || yarn install
      - run:
          name: Fail if someone forgot to commit "yarn.lock"
          command: |
            if [[ $(git status --porcelain) ]]; then
              git --no-pager diff
              echo "There are git differences after running yarn install"
              exit 1
            fi
      - run:
          name: Fail if generated dependency graph doesn't match committed
          command: ./scripts/ci_check_dependency_graph_changed.sh

      # Workaround save_cache not supporting globbing for the paths key
      # see note in https://circleci.com/docs/2.0/caching/#basic-example-of-dependency-caching and https://ideas.circleci.com/ideas/CCI-I-239
      - run:
          name: Create cached node_modules (if necessary)
          command: |
            if [ ! -e ~/.tmp/node_modules.tgz ]; then
              # This find command finds all top level node_modules directories, I.E all node modules that are not contained in a node_modules directory.
              tar -c `find -type d -name node_modules | grep -v "node_modules.*node_modules"` | gzip --fast > ~/.tmp/node_modules.tgz
            fi
      - save_cache:
          name: Save cached node_modules
          key: node_modules-<< pipeline.parameters.node-modules-cache-version >>-{{ arch }}-{{ checksum "yarn.lock" }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/patches" }}
          paths:
            - ~/.tmp/node_modules.tgz

jobs:
  install_dependencies:
    <<: *defaults
    # Source: https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: large
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-

      - checkout

      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'

      - run:
          name: Verify setup for incremental testing
          command: |
            set -euo pipefail
            cd ~/app
            set -v
            # To get the "master" branch mapping
            git checkout master
            git checkout ${CIRCLE_BRANCH}
            # Verify that following commands work, they are later called in the incremental testing script
            # There output does not matter here, the fact that they finish successfully does.
            git rev-parse --abbrev-ref HEAD

      - attach_workspace:
          at: ~/app

      - yarn_install

      - run:
          name: Build packages
          command: |
            yarn build --ignore docs

      - run:
          name: Check licenses
          command: |
            if [ ! -e ~/.tmp/yarn_deps_have_changed ]; then
              # Internally `yarn check-licenses` downloads dependencies into its cache again even if node_modules are up-to-date
              # which happens when we've restored our cached node_modules.
              # Making `yarn check-licenses` take ~45secs instead of ~3secs (depending on network conditions and build machine)
              # So here we skip checking when it's unnecessary
              echo "Skipping checking licenses, dependencies haven't changed"
              exit 0
            fi
            yarn check-licenses

      - persist_to_workspace:
          root: .
          paths:
            - .

  lint-checks:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      # If this fails, fix it with
      # `./node_modules/.bin/prettier --config .prettierrc.js --write '**/*.+(ts|tsx|js|jsx)'`
      - run: yarn run prettify:diff
      - run: yarn run lint

  vulnerability-checks:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run: ./scripts/ci_check_vulnerabilities.sh

  general-test:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run lerna \
              --ignore @celo/contractkit \
              --ignore @celo/protocol \
              --ignore @celo/celotool \
              --ignore @celo/celocli \
              --ignore @celo/env-tests \
              --ignore @celo/identity \
              --ignore @celo/transactions-uri \
              --ignore '@celo/wallet-*' \
              run test

      - store_test_results:
          path: test-results

  wallets-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Run Tests
          command: yarn run lerna --scope '@celo/wallet-*' run test

  # Split from the original script. The original script was assuming not big changes in dependencies.
  # As that's a possibility, we require to install the old and re-install the new one, and circle
  # crashes on the second re-install.
  # This pre script, generates the build and devchain, and adds it to the workspace to be used for the
  # other script
  pre-protocol-test-release:
    <<: *contract-defaults
    docker:
      # We override the default docker image here because this job builds the
      # previous release and requires node 10 rather than node 12 to build
      # properly.
      - image: celohq/node10-gcloud:v3
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Opcode tests
          command: yarn --cwd packages/protocol check-opcodes
      - run:
          name: Generate devchain of previous release
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            echo "Comparing against $RELEASE_TAG"
            yarn --cwd packages/protocol test:generate-old-devchain-and-build -b $RELEASE_TAG -d .tmp/released_chain -l /dev/stdout -g scripts/truffle/releaseGoldExampleConfigs.json
      - persist_to_workspace:
          root: .
          paths:
            - 'packages/protocol/.tmp/released_chain/*'

  protocol-test-release:
    <<: *contract-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Copy DevChain and Build generated from released tag
          command: |
            BUILD_AND_DEVCHAIN_DIR=$(echo build/$(echo $RELEASE_TAG | sed -e 's/\//_/g'))
            (cp -r packages/protocol/.tmp/released_chain packages/protocol/$BUILD_AND_DEVCHAIN_DIR)
      - run:
          name: Test against current release
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            echo "Comparing against $RELEASE_TAG"
            BUILD_AND_DEVCHAIN_DIR=$(echo build/$(echo $RELEASE_TAG | sed -e 's/\//_/g'))
            yarn --cwd packages/protocol test:devchain-release -b $RELEASE_TAG -d $BUILD_AND_DEVCHAIN_DIR -l /dev/stdout

  protocol-test-release-snapshots:
    <<: *contract-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Run check-versions on exhaustive history of releases and compare to snapshots
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            yarn --cwd packages/protocol test:release-snapshots
            if [[ $(git status packages/protocol/releaseData/versionReports --porcelain) ]]; then
              git --no-pager diff packages/protocol/releaseData/versionReports
              echo "There are git differences after generating release version report snapshots"
              echo "If these changes are intended, update the 'releaseData/versionReports' accordingly"
              exit 1
            fi

  protocol-test-common:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test common/

  protocol-test-compatibility:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test compatibility/

  protocol-test-governance-network:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test governance/network/

  protocol-test-governance-validators:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test governance/validators/

  protocol-test-governance-voting:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test governance/voting/

  protocol-test-identity:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test identity/

  protocol-test-stability:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Unit tests
          command: yarn --cwd packages/protocol test stability/

  # Slow and flaky compared to protocol-test which runs without coverage
  protocol-test-with-code-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: test
          command: yarn --cwd packages/protocol test:coverage
      - store_artifacts:
          path: packages/protocol/coverage
          destination: protocol/coverage
      - run:
          name: Upload to CodeCov
          command: yarn codecov -F protocol

  contractkit-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/contractkit
      - run:
          name: Generate DevChain
          command: |
            (cd packages/sdk/contractkit && yarn test:reset)
      - run:
          name: Run Tests
          command: yarn --cwd=packages/sdk/contractkit test

  # extrated to reuse the devchain generated by contractkit
  identity-tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/identity
      # - run:
      #     name: Copy DevChain generated by Contractkit
      #     command: |
      #       (cp -r packages/sdk/contractkit/.tmp packages/sdk/identity/.tmp)
      - run:
          name: Generate DevChain
          command: |
            (cd packages/sdk/identity && yarn test:reset)
      - run:
          name: Run Tests
          command: yarn --cwd=packages/sdk/identity test

  # extrated to reuse the devchain generated by contractkit
  transactions-uri-tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/transactions-uri
      # - run:
      #     name: Copy DevChain generated by Contractkit
      #     command: |
      #       (cp -r packages/sdk/contractkit/.tmp packages/sdk/transactions-uri/.tmp)
      - run:
          name: Generate DevChain
          command: |
            (cd packages/sdk/transactions-uri && yarn test:reset)
      - run:
          name: Run Tests
          command: yarn --cwd=packages/sdk/transactions-uri test

  cli-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celocli
      - run:
          name: Generate DevChain
          command: |
            (cd packages/cli && yarn test:reset)
      - run:
          name: Run Tests
          command: yarn --cwd=packages/cli test
      - run:
          name: Fail if someone forgot to commit CLI docs
          command: |
            yarn --cwd=packages/cli docs
            if [[ $(git status packages/docs/command-line-interface --porcelain) ]]; then
              git --no-pager diff packages/docs/command-line-interface
              echo "There are git differences after generating CLI docs"
              exit 1
            fi
      - run:
          name: Verify that a new account can be created
          command: |
            yarn --cwd=packages/cli run celocli account:new

      # Won't work when cli uses git dependencies!
      # - run:
      #     name: Install and test the npm package
      #     command: |
      #       set -euo pipefail
      #       cd packages/cli
      #       yarn pack
      #       cd /tmp
      #       npm install ~/app/packages/cli/celo-celocli-*.tgz
      #       ./node_modules/.bin/celocli account:new # Small test

  typescript-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/typescript
      - run:
          name: Install and test the npm package
          command: |
            set -euo pipefail
            cd packages/typescript
            yarn pack
            cd /tmp
            npm install ~/app/packages/typescript/*.tgz

  base-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/base
      - run:
          name: Install and test the npm package
          command: |
            set -euo pipefail
            cd packages/sdk/base
            yarn pack
            cd /tmp
            npm install ~/app/packages/sdk/base/*.tgz

  utils-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/utils
      - run:
          name: Install and test the npm package
          command: |
            set -euo pipefail
            cd packages/sdk/base
            yarn pack
            cd ../utils
            yarn pack
            cd /tmp
            npm install ~/app/packages/sdk/base/*.tgz
            npm install ~/app/packages/sdk/utils/*.tgz

  end-to-end-geth-transfer-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            cd packages/celotool
            ./ci_test_transfers.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-geth-blockchain-parameters-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            cd packages/celotool
            ./ci_test_blockchain_parameters.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-geth-slashing-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            cd packages/celotool
            ./ci_test_slashing.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-geth-governance-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            cd packages/celotool
            ./ci_test_governance.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-geth-replica-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          no_output_timeout: 20m
          command: |
            set -e
            cd packages/celotool
            ./ci_test_replicas.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-geth-sync-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          command: |
            set -e
            cd packages/celotool
            ./ci_test_sync.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-geth-validator-order-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          command: |
            set -e
            cd packages/celotool
            ./ci_test_validator_order.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  end-to-end-cip35-eth-compatibility-test:
    <<: *e2e-defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celotool
      - run:
          name: Run test
          command: |
            set -e
            cd packages/celotool
            ./ci_test_cip35.sh checkout ${CELO_BLOCKCHAIN_BRANCH_TO_TEST}

  test-typescript-npm-package-install:
    working_directory: ~/app
    docker:
      - image: us.gcr.io/celo-testnet/circleci-node12:1.0.0
    steps:
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/typescript
      - run:
          name: Installing npm package - @celo/typescript
          command: yarn add @celo/typescript

  test-utils-npm-package-install:
    working_directory: ~/app
    docker:
      - image: us.gcr.io/celo-testnet/circleci-node12:1.0.0
    steps:
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/utils
      - run:
          name: Installing npm package - @celo/utils
          command: yarn add @celo/utils

  test-contractkit-npm-package-install:
    working_directory: ~/app
    docker:
      - image: us.gcr.io/celo-testnet/circleci-node12:1.0.0
    steps:
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/contractkit
      - run:
          name: Installing npm package - @celo/contractkit
          command: |
            # Try one more time in case the first attempt fails
            # to deal with scenarios like https://circleci.com/gh/celo-org/celo-monorepo/23329
            yarn add @celo/contractkit || yarn add @celo/contractkit

  test-celocli-npm-package-install:
    working_directory: ~/app
    docker:
      - image: us.gcr.io/celo-testnet/circleci-node12:1.0.0
    steps:
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/celocli
      - run:
          name: Installing npm package - @celo/celocli
          command: npm install @celo/celocli
      - run:
          name: Minor test of celocli
          command: ./node_modules/.bin/celocli account:new # Small test

  phone-number-privacy-test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/phone-number-privacy-signer,@celo/phone-number-privacy-combiner
      - run:
          name: Run Tests for combiner
          command: yarn --cwd=packages/phone-number-privacy/combiner test
      - run:
          name: Run Tests for signer
          command: yarn --cwd=packages/phone-number-privacy/signer test

  certora-test:
    working_directory: ~/app
    docker:
      - image: circleci/openjdk:11-jdk-node
    parallelism: 4
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Check if the test should run
          command: |
            ./scripts/ci_check_if_test_should_run_v2.sh @celo/protocol
      - run:
          name: Certora dependencies
          command: |
            echo "export PATH=$PATH:~/.local/bin" >> $BASH_ENV
            sudo apt-get update || sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo apt-get install python3-pip
            pip3 install certora-cli
            wget https://github.com/ethereum/solidity/releases/download/v0.5.13/solc-static-linux
            chmod +x solc-static-linux
            sudo mv solc-static-linux /usr/bin/solc
      - run: echo ${CIRCLE_NODE_INDEX}
      - run:
          name: Build and run - Locked Gold
          command: |
            if [ ${CIRCLE_NODE_INDEX} == "0" ];
            then
              cd packages/protocol
              chmod +x specs/scripts/lockedgold.sh
              ./specs/scripts/lockedgold.sh
            fi
      - run:
          name: Build and run - Accounts
          command: |
            if [ ${CIRCLE_NODE_INDEX} == "1" ];
            then
              cd packages/protocol
              chmod +x specs/scripts/accounts.sh
              ./specs/scripts/accounts.sh
            fi
      - run:
          name: Build and run - Accounts privileged check
          command: |
            if [ ${CIRCLE_NODE_INDEX} == "2" ];
            then
              cd packages/protocol
              chmod +x specs/scripts/accountsPrivileged.sh
              ./specs/scripts/accountsPrivileged.sh
            fi
      - run:
          name: Build and run - Governance
          command: |
            if [ ${CIRCLE_NODE_INDEX} == "3" ];
            then
              cd packages/protocol
              chmod +x specs/scripts/*.sh
              ./specs/scripts/applyHarness.sh
              ./specs/scripts/governance.sh
            fi

  flakey-test-summary:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Add summary of flakey tests to GitHub Checks
          command: |
            node ./packages/flake-tracker/scripts/summary.js

workflows:
  version: 2
  celo-monorepo-build:
    jobs:
      - install_dependencies
      - certora-test:
          requires:
            - install_dependencies
      - lint-checks:
          requires:
            - install_dependencies
      - vulnerability-checks:
          requires:
            - install_dependencies
      - general-test:
          requires:
            - install_dependencies
      - cli-test:
          requires:
            - install_dependencies
      - contractkit-test:
          requires:
            - install_dependencies
      - wallets-test:
          requires:
            - install_dependencies
      - identity-tests:
          requires:
            - contractkit-test
      - transactions-uri-tests:
          requires:
            - contractkit-test
      - pre-protocol-test-release:
          requires:
            - lint-checks
      - protocol-test-release:
          requires:
            - lint-checks
            - pre-protocol-test-release
      - protocol-test-release-snapshots:
          requires:
            - lint-checks
      - protocol-test-common:
          requires:
            - lint-checks
      - protocol-test-compatibility:
          requires:
            - lint-checks
      - protocol-test-governance-network:
          requires:
            - lint-checks
      - protocol-test-governance-validators:
          requires:
            - lint-checks
      - protocol-test-governance-voting:
          requires:
            - lint-checks
      - protocol-test-identity:
          requires:
            - lint-checks
      - protocol-test-stability:
          requires:
            - lint-checks
      - typescript-test:
          requires:
            - install_dependencies
      - base-test:
          requires:
            - install_dependencies
      - utils-test:
          requires:
            - install_dependencies
      - end-to-end-geth-transfer-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-geth-blockchain-parameters-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-geth-slashing-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-geth-governance-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-geth-replica-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-geth-sync-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-geth-validator-order-test:
          requires:
            - lint-checks
            - contractkit-test
      - end-to-end-cip35-eth-compatibility-test:
          requires:
            - lint-checks
            - contractkit-test
      - phone-number-privacy-test:
          requires:
            - lint-checks
      - flakey-test-summary:
          requires:
            - protocol-test-common
            - protocol-test-compatibility
            - protocol-test-governance-network
            - protocol-test-governance-validators
            - protocol-test-governance-voting
            - protocol-test-identity
            - protocol-test-stability
            - end-to-end-geth-transfer-test
            - end-to-end-geth-blockchain-parameters-test
            - end-to-end-geth-slashing-test
            - end-to-end-geth-governance-test
            - end-to-end-geth-replica-test
            - end-to-end-geth-sync-test
            - end-to-end-geth-validator-order-test
            - end-to-end-cip35-eth-compatibility-test
            - phone-number-privacy-test
  npm-install-testing-cron-workflow:
    triggers:
      - schedule:
          # 7 PM in UTC = noon in PDT.
          # Best for test to fail during SF afternoon, so that, someone can fix it during the day time.
          cron: '0 19 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - test-typescript-npm-package-install
      - test-utils-npm-package-install
      - test-contractkit-npm-package-install
      - test-celocli-npm-package-install
  protocol-testing-with-code-coverage-cron-workflow:
    triggers:
      - schedule:
          # 1 PM in UTC = 6 AM in PDT.
          # Best for this slow test (~3 hours) to run during SF early morning.
          cron: '0 13 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - install_dependencies
      - lint-checks:
          requires:
            - install_dependencies
      - protocol-test-with-code-coverage:
          requires:
            - lint-checks
